#---------------------------------------------------------------------------*
#                                                                           *
#   L E X I Q U E                                                           *
#                                                                           *
#---------------------------------------------------------------------------*
lexique sara_scanner :
@string identifierString ;
@uint ulongValue ;
style identifier -> "Identifiers" ;
style keyWords -> "Key words" ;
style machineNameStyle -> "Machine names" ;
style delimitors -> "Delimitors" ;
style integer_csts -> "Integer constants" ;
style stringStyle -> "Character strings" ;
style commentStyle -> "Comments" ;
# -------------------------- identifier or key word --------------------
# keywords can be written in lower
# for identifiers, case is significant

$identifier$ ! identifierString error message "an identifier" style identifier ;
list keyWordList error message "the '%K' key word" style keyWords :
 "auto", "state", "first", "last", "goto", "true", "false",
 "nofirst", "nolast", "modalcompadd", "exclude", "modalcompsub", "include",
 "to", "scenario", "trans", "display",
 "ite_cache", "and_cache", "map", "bdd", "bool",
 "use_and", "use_ite", "use_and_ite", "check", "checkbool", "checkidentical" ;

rule 'a'->'z' | 'A'->'Z' :
  repeat
    enterCharacterIntoString !?identifierString !* ;
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end repeat ;
  send search identifierString in keyWordList default $identifier$ ;
end rule ;
# -------------------------- Delimitors -------------------------------

list delimitorsList error message "the '%K' delimitor" style delimitors :
  ",", ";", ":", "{", "}", "->", "&", "~", "?", "!", "|", "||", "+", "(", ")", ":=", "^", "=", "*", "@", "**" ;
rule list delimitorsList ;
# -------------------- Characters string --------------------------------------

$literal_string$ ! identifierString error message "a character string constant \"...\"" style stringStyle feature nonAtomicSelection ;

message incorrectStringEnd : "string does not end with '\"'" ;
message incorrectCharInString : "this character cannot appear within a string" ;
rule '"' :
  repeat
  while '\\' :
    select
    when 'n' :
      enterCharacterIntoString !?identifierString !'\n' ;
    when '\\' :
      enterCharacterIntoString !?identifierString !'\\' ;
    when '"' :
      enterCharacterIntoString !?identifierString !'"' ;
    default
      error incorrectCharInString ;
    end select ;
   while ' ' | '!' | '#'-> '\u007E' :
    enterCharacterIntoString !?identifierString !* ;
  end repeat ;
  select
  when '"' :
    send $literal_string$ ;
  default
    error incorrectStringEnd ;
  end select ;
end rule ;
# -------------------------- Machine name -----------------------------
$machineIdf$ ! identifierString error message "a machine name ($...)" style machineNameStyle ;
message incorrectMachineNameBeginning : "incorrect machine name beginning" ;
rule '$' :
  select
  when 'a'->'z' | 'A'->'Z' | '_' :
    repeat
      enterCharacterIntoString !?identifierString !* ;
    while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
    end repeat ;
  default
    error incorrectMachineNameBeginning ;
  end select ;
  send $machineIdf$ ; 
end rule ;
#------------------------------- Decimal positive number ------------------
$literal_integer$ ! ulongValue error message "a decimal number" style integer_csts ;
message decimalNumberTooLarge : "decimal number too large" ;

message internalError : "internal error" ;

rule '0'->'9' :
  enterDigitIntoUInt !* !?ulongValue error decimalNumberTooLarge, internalError ;
  repeat
  while '0'->'9' :
    enterDigitIntoUInt !* !?ulongValue error decimalNumberTooLarge, internalError ;
  while '_' :
  end repeat ;
  send $literal_integer$ ;
end rule ;
#--- separators
  rule '\u0001' -> ' ' :
  end rule ;
#------------------------------------ Comment ----------------------------
message incorrectEndOfComment : "incorrect end of comment" ;
$comment$ error message "a comment" style commentStyle feature nonAtomicSelection ;

rule '#' :
  repeat
  while '\u0001' ->'\t' | '\v'-> '\uFFFD' :
  end repeat ;
  select
  when '\n' :
  default
    error incorrectEndOfComment ;
  end select ;
  drop $comment$ ;
end rule ;
end lexique ;

#---------------------------------------------------------------------------*
