//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'sara_semantics.h'                           *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                     january 22th, 2007, at 22h16'43"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef sara_semantics_DEFINED
#define sara_semantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_bdd.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_M_variablesMap ;
class GGS_M_stateMap ;
class GGS_L_translationVector ;
class GGS_AC_boolExpression ;
class cPtr_AC_boolExpression ;
class GGS_C_importBoolMachine ;
class cPtr_C_importBoolMachine ;
class GGS_C_andExpression ;
class cPtr_C_andExpression ;
class GGS_C_orExpression ;
class cPtr_C_orExpression ;
class GGS_C_xorExpression ;
class cPtr_C_xorExpression ;
class GGS_C_impliesExpression ;
class cPtr_C_impliesExpression ;
class GGS_C_equalExpression ;
class cPtr_C_equalExpression ;
class GGS_C_notExpression ;
class cPtr_C_notExpression ;
class GGS_C_VariableExpression ;
class cPtr_C_VariableExpression ;
class GGS_C_trueExpression ;
class cPtr_C_trueExpression ;
class GGS_C_falseExpression ;
class cPtr_C_falseExpression ;
class GGS_L_transitionDefinition ;
class GGS_L_stateDefinition ;
class GGS_L_statesDefinitionList ;
class GGS_AC_machineDefinition ;
class cPtr_AC_machineDefinition ;
class GGS_M_modesMap ;
class GGS_ListForModes ;
class GGS_C_substractiveModalCompositionComponent ;
class cPtr_C_substractiveModalCompositionComponent ;
class GGS_C_additiveModalCompositionComponent ;
class cPtr_C_additiveModalCompositionComponent ;
class GGS_C_trans ;
class cPtr_C_trans ;
class GGS_C_importMachine ;
class cPtr_C_importMachine ;
class GGS_C_explicitAutomatonDefinition ;
class cPtr_C_explicitAutomatonDefinition ;
class GGS_C_boolToSeqExpression ;
class cPtr_C_boolToSeqExpression ;
class GGS_C_existsDefinition ;
class cPtr_C_existsDefinition ;
class GGS_C_forallDefinition ;
class cPtr_C_forallDefinition ;
class GGS_C_parallelComposition ;
class cPtr_C_parallelComposition ;
class GGS_C_orComposition ;
class cPtr_C_orComposition ;
class GGS_C_strongModalComposition ;
class cPtr_C_strongModalComposition ;
class GGS_C_weakModalComposition ;
class cPtr_C_weakModalComposition ;
class GGS_C_fullSaturationOperation ;
class cPtr_C_fullSaturationOperation ;
class GGS_C_complementationOperation ;
class cPtr_C_complementationOperation ;
class GGS_C_suppressTerminalStatesOperation ;
class cPtr_C_suppressTerminalStatesOperation ;
class GGS_C_suppressInitialStatesOperation ;
class cPtr_C_suppressInitialStatesOperation ;
class GGS_AC_job ;
class cPtr_AC_job ;
class GGS_C_machineCheck ;
class cPtr_C_machineCheck ;
class GGS_C_machineCheckIdentical ;
class cPtr_C_machineCheckIdentical ;
class GGS_C_machineComponent ;
class cPtr_C_machineComponent ;
class GGS_C_machineDefinedByAdditiveModalComp ;
class cPtr_C_machineDefinedByAdditiveModalComp ;
class GGS_C_machineDefinedBySubstractiveModalComp ;
class cPtr_C_machineDefinedBySubstractiveModalComp ;
class GGS_L_inputConfigurationForScenario ;
class GGS_L_inputScenario ;
class GGS_L_scenarioList ;
class GGS_C_scenarioComponent ;
class cPtr_C_scenarioComponent ;
class GGS_typeUse_AND ;
class cPtr_typeUse_AND ;
class GGS_typeUse_ITE ;
class cPtr_typeUse_ITE ;
class GGS_typeUse_AND_ITE ;
class cPtr_typeUse_AND_ITE ;
class GGS_typeResize_AND_cache ;
class cPtr_typeResize_AND_cache ;
class GGS_typeResize_ITE_cache ;
class cPtr_typeResize_ITE_cache ;
class GGS_typeResizeMap ;
class cPtr_typeResizeMap ;
class GGS_typeDisplayBDDstats ;
class cPtr_typeDisplayBDDstats ;
class GGS_L_jobList ;
class GGS_M_machinesMap ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Map '@M_variablesMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_variablesMap ;

class GGS_M_variablesMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_variablesMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Comparison methods
  public : GGS_bool operator == (const GGS_M_variablesMap & inOperand) const ;
  public : GGS_bool operator != (const GGS_M_variablesMap & inOperand) const ;
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_variablesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_M_variablesMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_M_variablesMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyGetIndex' Search Method
  public : void method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_M_variablesMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_M_variablesMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_M_variablesMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@M_stateMap'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_stateMap ;

class GGS_M_stateMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_stateMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Comparison methods
  public : GGS_bool operator == (const GGS_M_stateMap & inOperand) const ;
  public : GGS_bool operator != (const GGS_M_stateMap & inOperand) const ;
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_stateMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_M_stateMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_M_stateMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'defineState' Insert Modifier
  public : void modifier_defineState (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyGetIndex' Search Method
  public : void method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_M_stateMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_M_stateMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_M_stateMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@L_translationVector'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_translationVector ;

class GGS_L_translationVector : public AC_galgas_list {
  public : typedef elementOf_GGS_L_translationVector element_type ;
//--- Default Constructor
  public : GGS_L_translationVector (void) ;
//--- Copy Constructor
  public : GGS_L_translationVector (const GGS_L_translationVector & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator == (const GGS_L_translationVector & inOperand) const ;
  public : GGS_bool operator != (const GGS_L_translationVector & inOperand) const ;
//--- Constructor 'emptyList'
  public : static GGS_L_translationVector constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_translationVector constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_translationVector * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_luint & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_luint & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Lexique & _inLexique,
                                GGS_luint & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Lexique & _inLexique,
                                 GGS_luint & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_translationVector operator + (const GGS_L_translationVector & inOperand) const ;
  public : void modifier_prependValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint & argument_0) ;
  protected : void _internalPrependValues (const GGS_luint & argument_0) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_AC_boolExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_boolExpression {
//--- Pointer to actual instance
  protected : cPtr_AC_boolExpression * mPointer ;
//--- Default constructor
  public : GGS_AC_boolExpression (void) ;
//--- Copy constructor
  public : GGS_AC_boolExpression (const GGS_AC_boolExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_AC_boolExpression (void) ;
//--- Assignment operator
  public : void operator = (const GGS_AC_boolExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_AC_boolExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_AC_boolExpression & inOperand) const ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_AC_boolExpression & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_AC_boolExpression * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_AC_boolExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_boolExpression * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_importBoolMachine'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_importBoolMachine : public GGS_AC_boolExpression {
//--- Default constructor
  public : GGS_C_importBoolMachine (void) ;
//--- Copy constructor
  public : GGS_C_importBoolMachine (const GGS_C_importBoolMachine &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_importBoolMachine (void) ;
//--- 'new' constructor
  public : static GGS_C_importBoolMachine constructor_new (C_Lexique & inLexique,
                                const GGS_uint & argument_0,
                                const GGS_location & argument_1,
                                const GGS_L_translationVector & argument_2 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_importBoolMachine &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_importBoolMachine & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_importBoolMachine & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_uint  reader_mIndexOfImportedMachine (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mErrorLocation (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_translationVector  reader_mTranslationVector (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_importBoolMachine * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_importBoolMachine * operator () (LOCATION_ARGS) const {
      return (cPtr_C_importBoolMachine *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_andExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_andExpression : public GGS_AC_boolExpression {
//--- Default constructor
  public : GGS_C_andExpression (void) ;
//--- Copy constructor
  public : GGS_C_andExpression (const GGS_C_andExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_andExpression (void) ;
//--- 'new' constructor
  public : static GGS_C_andExpression constructor_new (C_Lexique & inLexique,
                                const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_andExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_andExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_andExpression & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_boolExpression  reader_mLeftExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_boolExpression  reader_mRightExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_andExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_andExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_C_andExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_orExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_orExpression : public GGS_AC_boolExpression {
//--- Default constructor
  public : GGS_C_orExpression (void) ;
//--- Copy constructor
  public : GGS_C_orExpression (const GGS_C_orExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_orExpression (void) ;
//--- 'new' constructor
  public : static GGS_C_orExpression constructor_new (C_Lexique & inLexique,
                                const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_orExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_orExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_orExpression & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_boolExpression  reader_mLeftExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_boolExpression  reader_mRightExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_orExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_orExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_C_orExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_xorExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_xorExpression : public GGS_AC_boolExpression {
//--- Default constructor
  public : GGS_C_xorExpression (void) ;
//--- Copy constructor
  public : GGS_C_xorExpression (const GGS_C_xorExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_xorExpression (void) ;
//--- 'new' constructor
  public : static GGS_C_xorExpression constructor_new (C_Lexique & inLexique,
                                const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_xorExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_xorExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_xorExpression & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_boolExpression  reader_mLeftExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_boolExpression  reader_mRightExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_xorExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_xorExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_C_xorExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_impliesExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_impliesExpression : public GGS_AC_boolExpression {
//--- Default constructor
  public : GGS_C_impliesExpression (void) ;
//--- Copy constructor
  public : GGS_C_impliesExpression (const GGS_C_impliesExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_impliesExpression (void) ;
//--- 'new' constructor
  public : static GGS_C_impliesExpression constructor_new (C_Lexique & inLexique,
                                const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_impliesExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_impliesExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_impliesExpression & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_boolExpression  reader_mLeftExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_boolExpression  reader_mRightExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_impliesExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_impliesExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_C_impliesExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_equalExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_equalExpression : public GGS_AC_boolExpression {
//--- Default constructor
  public : GGS_C_equalExpression (void) ;
//--- Copy constructor
  public : GGS_C_equalExpression (const GGS_C_equalExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_equalExpression (void) ;
//--- 'new' constructor
  public : static GGS_C_equalExpression constructor_new (C_Lexique & inLexique,
                                const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_equalExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_equalExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_equalExpression & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_boolExpression  reader_mLeftExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_boolExpression  reader_mRightExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_equalExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_equalExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_C_equalExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_notExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_notExpression : public GGS_AC_boolExpression {
//--- Default constructor
  public : GGS_C_notExpression (void) ;
//--- Copy constructor
  public : GGS_C_notExpression (const GGS_C_notExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_notExpression (void) ;
//--- 'new' constructor
  public : static GGS_C_notExpression constructor_new (C_Lexique & inLexique,
                                const GGS_AC_boolExpression & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_notExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_notExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_notExpression & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_boolExpression  reader_mExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_notExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_notExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_C_notExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_VariableExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_VariableExpression : public GGS_AC_boolExpression {
//--- Default constructor
  public : GGS_C_VariableExpression (void) ;
//--- Copy constructor
  public : GGS_C_VariableExpression (const GGS_C_VariableExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_VariableExpression (void) ;
//--- 'new' constructor
  public : static GGS_C_VariableExpression constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_VariableExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_VariableExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_VariableExpression & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mInputVarIndex (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_VariableExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_VariableExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_C_VariableExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_trueExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_trueExpression : public GGS_AC_boolExpression {
//--- Default constructor
  public : GGS_C_trueExpression (void) ;
//--- Copy constructor
  public : GGS_C_trueExpression (const GGS_C_trueExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_trueExpression (void) ;
//--- 'new' constructor
  public : static GGS_C_trueExpression constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_trueExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_trueExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_trueExpression & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_trueExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_trueExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_C_trueExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_falseExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_falseExpression : public GGS_AC_boolExpression {
//--- Default constructor
  public : GGS_C_falseExpression (void) ;
//--- Copy constructor
  public : GGS_C_falseExpression (const GGS_C_falseExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_falseExpression (void) ;
//--- 'new' constructor
  public : static GGS_C_falseExpression constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_falseExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_falseExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_falseExpression & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_falseExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_falseExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_C_falseExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@L_transitionDefinition'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_transitionDefinition ;

class GGS_L_transitionDefinition : public AC_galgas_list {
  public : typedef elementOf_GGS_L_transitionDefinition element_type ;
//--- Default Constructor
  public : GGS_L_transitionDefinition (void) ;
//--- Copy Constructor
  public : GGS_L_transitionDefinition (const GGS_L_transitionDefinition & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator == (const GGS_L_transitionDefinition & inOperand) const ;
  public : GGS_bool operator != (const GGS_L_transitionDefinition & inOperand) const ;
//--- Constructor 'emptyList'
  public : static GGS_L_transitionDefinition constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_transitionDefinition constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_AC_boolExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_luint & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_transitionDefinition * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_AC_boolExpression & _out_0,
                              GGS_location & _out_1,
                              GGS_luint & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_AC_boolExpression & _out_0,
                             GGS_location & _out_1,
                             GGS_luint & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Lexique & _inLexique,
                                GGS_AC_boolExpression & _out_0,
                                GGS_location & _out_1,
                                GGS_luint & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Lexique & _inLexique,
                                 GGS_AC_boolExpression & _out_0,
                                 GGS_location & _out_1,
                                 GGS_luint & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_AC_boolExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_luint & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_transitionDefinition operator + (const GGS_L_transitionDefinition & inOperand) const ;
  public : void modifier_prependValue (C_Lexique & _inLexique,
                                const GGS_AC_boolExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_luint & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_AC_boolExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_luint & argument_2) ;
  protected : void _internalPrependValues (const GGS_AC_boolExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_luint & argument_2) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@L_stateDefinition'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_stateDefinition ;

class GGS_L_stateDefinition : public AC_galgas_list {
  public : typedef elementOf_GGS_L_stateDefinition element_type ;
//--- Default Constructor
  public : GGS_L_stateDefinition (void) ;
//--- Copy Constructor
  public : GGS_L_stateDefinition (const GGS_L_stateDefinition & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator == (const GGS_L_stateDefinition & inOperand) const ;
  public : GGS_bool operator != (const GGS_L_stateDefinition & inOperand) const ;
//--- Constructor 'emptyList'
  public : static GGS_L_stateDefinition constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_stateDefinition constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_AC_boolExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_L_transitionDefinition & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_stateDefinition * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_luint & _out_0,
                              GGS_AC_boolExpression & _out_1,
                              GGS_location & _out_2,
                              GGS_L_transitionDefinition & _out_3
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_luint & _out_0,
                             GGS_AC_boolExpression & _out_1,
                             GGS_location & _out_2,
                             GGS_L_transitionDefinition & _out_3
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Lexique & _inLexique,
                                GGS_luint & _out_0,
                                GGS_AC_boolExpression & _out_1,
                                GGS_location & _out_2,
                                GGS_L_transitionDefinition & _out_3
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Lexique & _inLexique,
                                 GGS_luint & _out_0,
                                 GGS_AC_boolExpression & _out_1,
                                 GGS_location & _out_2,
                                 GGS_L_transitionDefinition & _out_3
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint & argument_0,
                                const GGS_AC_boolExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_L_transitionDefinition & argument_3) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_stateDefinition operator + (const GGS_L_stateDefinition & inOperand) const ;
  public : void modifier_prependValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_AC_boolExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_L_transitionDefinition & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint & argument_0,
                                const GGS_AC_boolExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_L_transitionDefinition & argument_3) ;
  protected : void _internalPrependValues (const GGS_luint & argument_0,
                                const GGS_AC_boolExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_L_transitionDefinition & argument_3) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@L_statesDefinitionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_statesDefinitionList ;

class GGS_L_statesDefinitionList : public AC_galgas_list {
  public : typedef elementOf_GGS_L_statesDefinitionList element_type ;
//--- Default Constructor
  public : GGS_L_statesDefinitionList (void) ;
//--- Copy Constructor
  public : GGS_L_statesDefinitionList (const GGS_L_statesDefinitionList & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator == (const GGS_L_statesDefinitionList & inOperand) const ;
  public : GGS_bool operator != (const GGS_L_statesDefinitionList & inOperand) const ;
//--- Constructor 'emptyList'
  public : static GGS_L_statesDefinitionList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_statesDefinitionList constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_statesDefinitionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_luint & _out_0,
                              GGS_location & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_luint & _out_0,
                             GGS_location & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Lexique & _inLexique,
                                GGS_luint & _out_0,
                                GGS_location & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Lexique & _inLexique,
                                 GGS_luint & _out_0,
                                 GGS_location & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint & argument_0,
                                const GGS_location & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_statesDefinitionList operator + (const GGS_L_statesDefinitionList & inOperand) const ;
  public : void modifier_prependValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint & argument_0,
                                const GGS_location & argument_1) ;
  protected : void _internalPrependValues (const GGS_luint & argument_0,
                                const GGS_location & argument_1) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_AC_machineDefinition'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_machineDefinition {
//--- Pointer to actual instance
  protected : cPtr_AC_machineDefinition * mPointer ;
//--- Default constructor
  public : GGS_AC_machineDefinition (void) ;
//--- Copy constructor
  public : GGS_AC_machineDefinition (const GGS_AC_machineDefinition &) ;
//--- Virtual destructor
  public : virtual ~GGS_AC_machineDefinition (void) ;
//--- Assignment operator
  public : void operator = (const GGS_AC_machineDefinition &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_AC_machineDefinition & inOperand) const ;
  public : GGS_bool operator != (const GGS_AC_machineDefinition & inOperand) const ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_AC_machineDefinition & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_AC_machineDefinition * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_AC_machineDefinition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_machineDefinition * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@M_modesMap'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_modesMap ;

class GGS_M_modesMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_modesMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Comparison methods
  public : GGS_bool operator == (const GGS_M_modesMap & inOperand) const ;
  public : GGS_bool operator != (const GGS_M_modesMap & inOperand) const ;
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_modesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_M_modesMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_M_modesMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_machineDefinition &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_machineDefinition   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyGetIndex' Search Method
  public : void method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_AC_machineDefinition   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_AC_machineDefinition & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_AC_machineDefinition & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_M_modesMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_M_modesMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_M_modesMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           list '@ListForModes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ListForModes ;

class GGS_ListForModes : public AC_galgas_list {
  public : typedef elementOf_GGS_ListForModes element_type ;
//--- Default Constructor
  public : GGS_ListForModes (void) ;
//--- Copy Constructor
  public : GGS_ListForModes (const GGS_ListForModes & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator == (const GGS_ListForModes & inOperand) const ;
  public : GGS_bool operator != (const GGS_ListForModes & inOperand) const ;
//--- Constructor 'emptyList'
  public : static GGS_ListForModes constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_ListForModes constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_ListForModes * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_luint & _out_0,
                              GGS_luint & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_luint & _out_0,
                             GGS_luint & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Lexique & _inLexique,
                                GGS_luint & _out_0,
                                GGS_luint & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Lexique & _inLexique,
                                 GGS_luint & _out_0,
                                 GGS_luint & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_ListForModes operator + (const GGS_ListForModes & inOperand) const ;
  public : void modifier_prependValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) ;
  protected : void _internalPrependValues (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_C_substractiveModalCompositionComponent'         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_substractiveModalCompositionComponent : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_substractiveModalCompositionComponent (void) ;
//--- Copy constructor
  public : GGS_C_substractiveModalCompositionComponent (const GGS_C_substractiveModalCompositionComponent &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_substractiveModalCompositionComponent (void) ;
//--- 'new' constructor
  public : static GGS_C_substractiveModalCompositionComponent constructor_new (C_Lexique & inLexique,
                                const GGS_M_modesMap & argument_0,
                                const GGS_ListForModes & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_substractiveModalCompositionComponent &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_substractiveModalCompositionComponent & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_substractiveModalCompositionComponent & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_M_modesMap  reader_mModeMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ListForModes  reader_mExclusionList (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_substractiveModalCompositionComponent * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_substractiveModalCompositionComponent * operator () (LOCATION_ARGS) const {
      return (cPtr_C_substractiveModalCompositionComponent *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_C_additiveModalCompositionComponent'           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_additiveModalCompositionComponent : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_additiveModalCompositionComponent (void) ;
//--- Copy constructor
  public : GGS_C_additiveModalCompositionComponent (const GGS_C_additiveModalCompositionComponent &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_additiveModalCompositionComponent (void) ;
//--- 'new' constructor
  public : static GGS_C_additiveModalCompositionComponent constructor_new (C_Lexique & inLexique,
                                const GGS_M_modesMap & argument_0,
                                const GGS_ListForModes & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_additiveModalCompositionComponent &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_additiveModalCompositionComponent & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_additiveModalCompositionComponent & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_M_modesMap  reader_mModeMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ListForModes  reader_mInclusionList (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_additiveModalCompositionComponent * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_additiveModalCompositionComponent * operator () (LOCATION_ARGS) const {
      return (cPtr_C_additiveModalCompositionComponent *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        GALGAS class 'GGS_C_trans'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_trans : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_trans (void) ;
//--- Copy constructor
  public : GGS_C_trans (const GGS_C_trans &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_trans (void) ;
//--- 'new' constructor
  public : static GGS_C_trans constructor_new (C_Lexique & inLexique,
                                const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_trans &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_trans & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_trans & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_boolExpression  reader_mSourceStateExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_boolExpression  reader_mTargetStateExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_trans * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_trans * operator () (LOCATION_ARGS) const {
      return (cPtr_C_trans *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_importMachine'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_importMachine : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_importMachine (void) ;
//--- Copy constructor
  public : GGS_C_importMachine (const GGS_C_importMachine &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_importMachine (void) ;
//--- 'new' constructor
  public : static GGS_C_importMachine constructor_new (C_Lexique & inLexique,
                                const GGS_uint & argument_0,
                                const GGS_L_translationVector & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_importMachine &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_importMachine & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_importMachine & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_uint  reader_mIndexOfImportedMachine (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_translationVector  reader_mTranslationVector (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_importMachine * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_importMachine * operator () (LOCATION_ARGS) const {
      return (cPtr_C_importMachine *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_C_explicitAutomatonDefinition'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_explicitAutomatonDefinition : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_explicitAutomatonDefinition (void) ;
//--- Copy constructor
  public : GGS_C_explicitAutomatonDefinition (const GGS_C_explicitAutomatonDefinition &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_explicitAutomatonDefinition (void) ;
//--- 'new' constructor
  public : static GGS_C_explicitAutomatonDefinition constructor_new (C_Lexique & inLexique,
                                const GGS_M_stateMap & argument_0,
                                const GGS_L_statesDefinitionList & argument_1,
                                const GGS_L_statesDefinitionList & argument_2,
                                const GGS_L_stateDefinition & argument_3,
                                const GGS_location & argument_4 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_explicitAutomatonDefinition &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_explicitAutomatonDefinition & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_explicitAutomatonDefinition & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_M_stateMap  reader_mStatesMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_statesDefinitionList  reader_mInitialStatesDefinitionList (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_statesDefinitionList  reader_mTerminalStatesDefinitionList (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_stateDefinition  reader_mStateDefinitionList (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOfDefinition (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_explicitAutomatonDefinition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_explicitAutomatonDefinition * operator () (LOCATION_ARGS) const {
      return (cPtr_C_explicitAutomatonDefinition *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_boolToSeqExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_boolToSeqExpression : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_boolToSeqExpression (void) ;
//--- Copy constructor
  public : GGS_C_boolToSeqExpression (const GGS_C_boolToSeqExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_boolToSeqExpression (void) ;
//--- 'new' constructor
  public : static GGS_C_boolToSeqExpression constructor_new (C_Lexique & inLexique,
                                const GGS_AC_boolExpression & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_boolToSeqExpression &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_boolToSeqExpression & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_boolToSeqExpression & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_boolExpression  reader_mExpression (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_boolToSeqExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_boolToSeqExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_C_boolToSeqExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_existsDefinition'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_existsDefinition : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_existsDefinition (void) ;
//--- Copy constructor
  public : GGS_C_existsDefinition (const GGS_C_existsDefinition &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_existsDefinition (void) ;
//--- 'new' constructor
  public : static GGS_C_existsDefinition constructor_new (C_Lexique & inLexique,
                                const GGS_uint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_existsDefinition &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_existsDefinition & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_existsDefinition & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_uint  reader_mPreviousVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mTotalVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_machineDefinition  reader_mOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_existsDefinition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_existsDefinition * operator () (LOCATION_ARGS) const {
      return (cPtr_C_existsDefinition *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_forallDefinition'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_forallDefinition : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_forallDefinition (void) ;
//--- Copy constructor
  public : GGS_C_forallDefinition (const GGS_C_forallDefinition &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_forallDefinition (void) ;
//--- 'new' constructor
  public : static GGS_C_forallDefinition constructor_new (C_Lexique & inLexique,
                                const GGS_uint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_forallDefinition &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_forallDefinition & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_forallDefinition & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_uint  reader_mPreviousVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mTotalVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_machineDefinition  reader_mOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_forallDefinition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_forallDefinition * operator () (LOCATION_ARGS) const {
      return (cPtr_C_forallDefinition *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_parallelComposition'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_parallelComposition : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_parallelComposition (void) ;
//--- Copy constructor
  public : GGS_C_parallelComposition (const GGS_C_parallelComposition &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_parallelComposition (void) ;
//--- 'new' constructor
  public : static GGS_C_parallelComposition constructor_new (C_Lexique & inLexique,
                                const GGS_AC_machineDefinition & argument_0,
                                const GGS_AC_machineDefinition & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_parallelComposition &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_parallelComposition & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_parallelComposition & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_machineDefinition  reader_mLeftOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_machineDefinition  reader_mRightOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_parallelComposition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_parallelComposition * operator () (LOCATION_ARGS) const {
      return (cPtr_C_parallelComposition *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_orComposition'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_orComposition : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_orComposition (void) ;
//--- Copy constructor
  public : GGS_C_orComposition (const GGS_C_orComposition &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_orComposition (void) ;
//--- 'new' constructor
  public : static GGS_C_orComposition constructor_new (C_Lexique & inLexique,
                                const GGS_AC_machineDefinition & argument_0,
                                const GGS_AC_machineDefinition & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_orComposition &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_orComposition & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_orComposition & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_machineDefinition  reader_mLeftOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_machineDefinition  reader_mRightOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_orComposition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_orComposition * operator () (LOCATION_ARGS) const {
      return (cPtr_C_orComposition *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_C_strongModalComposition'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_strongModalComposition : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_strongModalComposition (void) ;
//--- Copy constructor
  public : GGS_C_strongModalComposition (const GGS_C_strongModalComposition &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_strongModalComposition (void) ;
//--- 'new' constructor
  public : static GGS_C_strongModalComposition constructor_new (C_Lexique & inLexique,
                                const GGS_AC_machineDefinition & argument_0,
                                const GGS_location & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_strongModalComposition &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_strongModalComposition & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_strongModalComposition & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_machineDefinition  reader_mLeftOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mErrorLocation (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_machineDefinition  reader_mRightOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_strongModalComposition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_strongModalComposition * operator () (LOCATION_ARGS) const {
      return (cPtr_C_strongModalComposition *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_C_weakModalComposition'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_weakModalComposition : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_weakModalComposition (void) ;
//--- Copy constructor
  public : GGS_C_weakModalComposition (const GGS_C_weakModalComposition &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_weakModalComposition (void) ;
//--- 'new' constructor
  public : static GGS_C_weakModalComposition constructor_new (C_Lexique & inLexique,
                                const GGS_AC_machineDefinition & argument_0,
                                const GGS_location & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_weakModalComposition &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_weakModalComposition & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_weakModalComposition & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_machineDefinition  reader_mLeftOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mErrorLocation (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_machineDefinition  reader_mRightOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_weakModalComposition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_weakModalComposition * operator () (LOCATION_ARGS) const {
      return (cPtr_C_weakModalComposition *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_C_fullSaturationOperation'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_fullSaturationOperation : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_fullSaturationOperation (void) ;
//--- Copy constructor
  public : GGS_C_fullSaturationOperation (const GGS_C_fullSaturationOperation &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_fullSaturationOperation (void) ;
//--- 'new' constructor
  public : static GGS_C_fullSaturationOperation constructor_new (C_Lexique & inLexique,
                                const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_fullSaturationOperation &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_fullSaturationOperation & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_fullSaturationOperation & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_machineDefinition  reader_mOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_fullSaturationOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_fullSaturationOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_C_fullSaturationOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_C_complementationOperation'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_complementationOperation : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_complementationOperation (void) ;
//--- Copy constructor
  public : GGS_C_complementationOperation (const GGS_C_complementationOperation &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_complementationOperation (void) ;
//--- 'new' constructor
  public : static GGS_C_complementationOperation constructor_new (C_Lexique & inLexique,
                                const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_complementationOperation &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_complementationOperation & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_complementationOperation & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_machineDefinition  reader_mOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_complementationOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_complementationOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_C_complementationOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_C_suppressTerminalStatesOperation'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_suppressTerminalStatesOperation : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_suppressTerminalStatesOperation (void) ;
//--- Copy constructor
  public : GGS_C_suppressTerminalStatesOperation (const GGS_C_suppressTerminalStatesOperation &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_suppressTerminalStatesOperation (void) ;
//--- 'new' constructor
  public : static GGS_C_suppressTerminalStatesOperation constructor_new (C_Lexique & inLexique,
                                const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_suppressTerminalStatesOperation &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_suppressTerminalStatesOperation & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_suppressTerminalStatesOperation & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_machineDefinition  reader_mOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_suppressTerminalStatesOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_suppressTerminalStatesOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_C_suppressTerminalStatesOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_C_suppressInitialStatesOperation'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_suppressInitialStatesOperation : public GGS_AC_machineDefinition {
//--- Default constructor
  public : GGS_C_suppressInitialStatesOperation (void) ;
//--- Copy constructor
  public : GGS_C_suppressInitialStatesOperation (const GGS_C_suppressInitialStatesOperation &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_suppressInitialStatesOperation (void) ;
//--- 'new' constructor
  public : static GGS_C_suppressInitialStatesOperation constructor_new (C_Lexique & inLexique,
                                const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_suppressInitialStatesOperation &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_suppressInitialStatesOperation & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_suppressInitialStatesOperation & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_AC_machineDefinition  reader_mOperand (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_suppressInitialStatesOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_suppressInitialStatesOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_C_suppressInitialStatesOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        GALGAS class 'GGS_AC_job'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_job {
//--- Pointer to actual instance
  protected : cPtr_AC_job * mPointer ;
//--- Default constructor
  public : GGS_AC_job (void) ;
//--- Copy constructor
  public : GGS_AC_job (const GGS_AC_job &) ;
//--- Virtual destructor
  public : virtual ~GGS_AC_job (void) ;
//--- Assignment operator
  public : void operator = (const GGS_AC_job &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_AC_job & inOperand) const ;
  public : GGS_bool operator != (const GGS_AC_job & inOperand) const ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_AC_job & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_AC_job * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_AC_job * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_job * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_machineCheck'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_machineCheck : public GGS_AC_job {
//--- Default constructor
  public : GGS_C_machineCheck (void) ;
//--- Copy constructor
  public : GGS_C_machineCheck (const GGS_C_machineCheck &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_machineCheck (void) ;
//--- 'new' constructor
  public : static GGS_C_machineCheck constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_bool& argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_machineCheck &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_machineCheck & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_machineCheck & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mMachineIndex (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mCheckMachineIsBoolean (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_machineCheck * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_machineCheck * operator () (LOCATION_ARGS) const {
      return (cPtr_C_machineCheck *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_C_machineCheckIdentical'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_machineCheckIdentical : public GGS_AC_job {
//--- Default constructor
  public : GGS_C_machineCheckIdentical (void) ;
//--- Copy constructor
  public : GGS_C_machineCheckIdentical (const GGS_C_machineCheckIdentical &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_machineCheckIdentical (void) ;
//--- 'new' constructor
  public : static GGS_C_machineCheckIdentical constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_machineCheckIdentical &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_machineCheckIdentical & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_machineCheckIdentical & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mMachineIndex1 (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mMachineIndex2 (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_machineCheckIdentical * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_machineCheckIdentical * operator () (LOCATION_ARGS) const {
      return (cPtr_C_machineCheckIdentical *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_machineComponent'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_machineComponent : public GGS_AC_job {
//--- Default constructor
  public : GGS_C_machineComponent (void) ;
//--- Copy constructor
  public : GGS_C_machineComponent (const GGS_C_machineComponent &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_machineComponent (void) ;
//--- 'new' constructor
  public : static GGS_C_machineComponent constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3,
                                const GGS_M_variablesMap & argument_4,
                                const GGS_AC_machineDefinition & argument_5 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_machineComponent &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_machineComponent & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_machineComponent & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_lstring  reader_mMachineName (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mMachineIndex (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mInputVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mInputAndInternalVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_M_variablesMap  reader_mVariablesMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_machineDefinition  reader_mDefinition (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_machineComponent * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_machineComponent * operator () (LOCATION_ARGS) const {
      return (cPtr_C_machineComponent *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_C_machineDefinedByAdditiveModalComp'           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_machineDefinedByAdditiveModalComp : public GGS_AC_job {
//--- Default constructor
  public : GGS_C_machineDefinedByAdditiveModalComp (void) ;
//--- Copy constructor
  public : GGS_C_machineDefinedByAdditiveModalComp (const GGS_C_machineDefinedByAdditiveModalComp &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_machineDefinedByAdditiveModalComp (void) ;
//--- 'new' constructor
  public : static GGS_C_machineDefinedByAdditiveModalComp constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3,
                                const GGS_M_variablesMap & argument_4,
                                const GGS_M_modesMap & argument_5,
                                const GGS_ListForModes & argument_6 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_machineDefinedByAdditiveModalComp &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_machineDefinedByAdditiveModalComp & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_machineDefinedByAdditiveModalComp & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_lstring  reader_mMachineName (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mMachineIndex (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mInputVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mInputAndInternalVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_M_variablesMap  reader_mVariablesMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_M_modesMap  reader_mModeMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ListForModes  reader_mInclusionList (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_machineDefinedByAdditiveModalComp * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_machineDefinedByAdditiveModalComp * operator () (LOCATION_ARGS) const {
      return (cPtr_C_machineDefinedByAdditiveModalComp *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_C_machineDefinedBySubstractiveModalComp'         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_machineDefinedBySubstractiveModalComp : public GGS_AC_job {
//--- Default constructor
  public : GGS_C_machineDefinedBySubstractiveModalComp (void) ;
//--- Copy constructor
  public : GGS_C_machineDefinedBySubstractiveModalComp (const GGS_C_machineDefinedBySubstractiveModalComp &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_machineDefinedBySubstractiveModalComp (void) ;
//--- 'new' constructor
  public : static GGS_C_machineDefinedBySubstractiveModalComp constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3,
                                const GGS_M_variablesMap & argument_4,
                                const GGS_M_modesMap & argument_5,
                                const GGS_ListForModes & argument_6 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_machineDefinedBySubstractiveModalComp &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_machineDefinedBySubstractiveModalComp & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_machineDefinedBySubstractiveModalComp & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_lstring  reader_mMachineName (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_luint  reader_mMachineIndex (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mInputVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mInputAndInternalVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_M_variablesMap  reader_mVariablesMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_M_modesMap  reader_mModeMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ListForModes  reader_mExclusionList (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_machineDefinedBySubstractiveModalComp * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_machineDefinedBySubstractiveModalComp * operator () (LOCATION_ARGS) const {
      return (cPtr_C_machineDefinedBySubstractiveModalComp *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 list '@L_inputConfigurationForScenario'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_inputConfigurationForScenario ;

class GGS_L_inputConfigurationForScenario : public AC_galgas_list {
  public : typedef elementOf_GGS_L_inputConfigurationForScenario element_type ;
//--- Default Constructor
  public : GGS_L_inputConfigurationForScenario (void) ;
//--- Copy Constructor
  public : GGS_L_inputConfigurationForScenario (const GGS_L_inputConfigurationForScenario & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator == (const GGS_L_inputConfigurationForScenario & inOperand) const ;
  public : GGS_bool operator != (const GGS_L_inputConfigurationForScenario & inOperand) const ;
//--- Constructor 'emptyList'
  public : static GGS_L_inputConfigurationForScenario constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_inputConfigurationForScenario constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_inputConfigurationForScenario * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_luint & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_luint & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Lexique & _inLexique,
                                GGS_luint & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Lexique & _inLexique,
                                 GGS_luint & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_inputConfigurationForScenario operator + (const GGS_L_inputConfigurationForScenario & inOperand) const ;
  public : void modifier_prependValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint & argument_0) ;
  protected : void _internalPrependValues (const GGS_luint & argument_0) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@L_inputScenario'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_inputScenario ;

class GGS_L_inputScenario : public AC_galgas_list {
  public : typedef elementOf_GGS_L_inputScenario element_type ;
//--- Default Constructor
  public : GGS_L_inputScenario (void) ;
//--- Copy Constructor
  public : GGS_L_inputScenario (const GGS_L_inputScenario & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator == (const GGS_L_inputScenario & inOperand) const ;
  public : GGS_bool operator != (const GGS_L_inputScenario & inOperand) const ;
//--- Constructor 'emptyList'
  public : static GGS_L_inputScenario constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_inputScenario constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_L_inputConfigurationForScenario & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_inputScenario * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_L_inputConfigurationForScenario & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_L_inputConfigurationForScenario & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Lexique & _inLexique,
                                GGS_L_inputConfigurationForScenario & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Lexique & _inLexique,
                                 GGS_L_inputConfigurationForScenario & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_L_inputConfigurationForScenario & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_inputScenario operator + (const GGS_L_inputScenario & inOperand) const ;
  public : void modifier_prependValue (C_Lexique & _inLexique,
                                const GGS_L_inputConfigurationForScenario & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_L_inputConfigurationForScenario & argument_0) ;
  protected : void _internalPrependValues (const GGS_L_inputConfigurationForScenario & argument_0) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@L_scenarioList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_scenarioList ;

class GGS_L_scenarioList : public AC_galgas_list {
  public : typedef elementOf_GGS_L_scenarioList element_type ;
//--- Default Constructor
  public : GGS_L_scenarioList (void) ;
//--- Copy Constructor
  public : GGS_L_scenarioList (const GGS_L_scenarioList & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator == (const GGS_L_scenarioList & inOperand) const ;
  public : GGS_bool operator != (const GGS_L_scenarioList & inOperand) const ;
//--- Constructor 'emptyList'
  public : static GGS_L_scenarioList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_scenarioList constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_L_inputScenario & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_scenarioList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_L_inputScenario & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_L_inputScenario & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Lexique & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_L_inputScenario & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Lexique & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_L_inputScenario & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_L_inputScenario & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_scenarioList operator + (const GGS_L_scenarioList & inOperand) const ;
  public : void modifier_prependValue (C_Lexique & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_L_inputScenario & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_L_inputScenario & argument_1) ;
  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_L_inputScenario & argument_1) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_scenarioComponent'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_scenarioComponent : public GGS_AC_job {
//--- Default constructor
  public : GGS_C_scenarioComponent (void) ;
//--- Copy constructor
  public : GGS_C_scenarioComponent (const GGS_C_scenarioComponent &) ;
//--- Virtual destructor
  public : virtual ~GGS_C_scenarioComponent (void) ;
//--- 'new' constructor
  public : static GGS_C_scenarioComponent constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_M_variablesMap & argument_3,
                                const GGS_L_scenarioList & argument_4 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_C_scenarioComponent &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_C_scenarioComponent & inOperand) const ;
  public : GGS_bool operator != (const GGS_C_scenarioComponent & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mMachineIndex (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mInputVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mInputAndInternalVariableCount (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_M_variablesMap  reader_mVariablesMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_scenarioList  reader_mScenarioList (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_scenarioComponent * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_scenarioComponent * operator () (LOCATION_ARGS) const {
      return (cPtr_C_scenarioComponent *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeUse_AND'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_AND : public GGS_AC_job {
//--- Default constructor
  public : GGS_typeUse_AND (void) ;
//--- Copy constructor
  public : GGS_typeUse_AND (const GGS_typeUse_AND &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeUse_AND (void) ;
//--- 'new' constructor
  public : static GGS_typeUse_AND constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_typeUse_AND &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_typeUse_AND & inOperand) const ;
  public : GGS_bool operator != (const GGS_typeUse_AND & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeUse_AND * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeUse_AND * operator () (LOCATION_ARGS) const {
      return (cPtr_typeUse_AND *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeUse_ITE'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_ITE : public GGS_AC_job {
//--- Default constructor
  public : GGS_typeUse_ITE (void) ;
//--- Copy constructor
  public : GGS_typeUse_ITE (const GGS_typeUse_ITE &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeUse_ITE (void) ;
//--- 'new' constructor
  public : static GGS_typeUse_ITE constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_typeUse_ITE &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_typeUse_ITE & inOperand) const ;
  public : GGS_bool operator != (const GGS_typeUse_ITE & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeUse_ITE * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeUse_ITE * operator () (LOCATION_ARGS) const {
      return (cPtr_typeUse_ITE *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeUse_AND_ITE'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_AND_ITE : public GGS_AC_job {
//--- Default constructor
  public : GGS_typeUse_AND_ITE (void) ;
//--- Copy constructor
  public : GGS_typeUse_AND_ITE (const GGS_typeUse_AND_ITE &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeUse_AND_ITE (void) ;
//--- 'new' constructor
  public : static GGS_typeUse_AND_ITE constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_typeUse_AND_ITE &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_typeUse_AND_ITE & inOperand) const ;
  public : GGS_bool operator != (const GGS_typeUse_AND_ITE & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeUse_AND_ITE * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeUse_AND_ITE * operator () (LOCATION_ARGS) const {
      return (cPtr_typeUse_AND_ITE *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeResize_AND_cache'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeResize_AND_cache : public GGS_AC_job {
//--- Default constructor
  public : GGS_typeResize_AND_cache (void) ;
//--- Copy constructor
  public : GGS_typeResize_AND_cache (const GGS_typeResize_AND_cache &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeResize_AND_cache (void) ;
//--- 'new' constructor
  public : static GGS_typeResize_AND_cache constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_typeResize_AND_cache &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_typeResize_AND_cache & inOperand) const ;
  public : GGS_bool operator != (const GGS_typeResize_AND_cache & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mNewSize (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeResize_AND_cache * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeResize_AND_cache * operator () (LOCATION_ARGS) const {
      return (cPtr_typeResize_AND_cache *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeResize_ITE_cache'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeResize_ITE_cache : public GGS_AC_job {
//--- Default constructor
  public : GGS_typeResize_ITE_cache (void) ;
//--- Copy constructor
  public : GGS_typeResize_ITE_cache (const GGS_typeResize_ITE_cache &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeResize_ITE_cache (void) ;
//--- 'new' constructor
  public : static GGS_typeResize_ITE_cache constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_typeResize_ITE_cache &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_typeResize_ITE_cache & inOperand) const ;
  public : GGS_bool operator != (const GGS_typeResize_ITE_cache & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mNewSize (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeResize_ITE_cache * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeResize_ITE_cache * operator () (LOCATION_ARGS) const {
      return (cPtr_typeResize_ITE_cache *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeResizeMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeResizeMap : public GGS_AC_job {
//--- Default constructor
  public : GGS_typeResizeMap (void) ;
//--- Copy constructor
  public : GGS_typeResizeMap (const GGS_typeResizeMap &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeResizeMap (void) ;
//--- 'new' constructor
  public : static GGS_typeResizeMap constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_typeResizeMap &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_typeResizeMap & inOperand) const ;
  public : GGS_bool operator != (const GGS_typeResizeMap & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  public : GGS_luint  reader_mNewSize (C_Lexique & inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeResizeMap * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeResizeMap * operator () (LOCATION_ARGS) const {
      return (cPtr_typeResizeMap *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeDisplayBDDstats'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDisplayBDDstats : public GGS_AC_job {
//--- Default constructor
  public : GGS_typeDisplayBDDstats (void) ;
//--- Copy constructor
  public : GGS_typeDisplayBDDstats (const GGS_typeDisplayBDDstats &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeDisplayBDDstats (void) ;
//--- 'new' constructor
  public : static GGS_typeDisplayBDDstats constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_typeDisplayBDDstats &) ;
//--- Comparison methods
  public : GGS_bool operator == (const GGS_typeDisplayBDDstats & inOperand) const ;
  public : GGS_bool operator != (const GGS_typeDisplayBDDstats & inOperand) const ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
//--- Readers
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDisplayBDDstats * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDisplayBDDstats * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDisplayBDDstats *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            list '@L_jobList'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_jobList ;

class GGS_L_jobList : public AC_galgas_list {
  public : typedef elementOf_GGS_L_jobList element_type ;
//--- Default Constructor
  public : GGS_L_jobList (void) ;
//--- Copy Constructor
  public : GGS_L_jobList (const GGS_L_jobList & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator == (const GGS_L_jobList & inOperand) const ;
  public : GGS_bool operator != (const GGS_L_jobList & inOperand) const ;
//--- Constructor 'emptyList'
  public : static GGS_L_jobList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_jobList constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_AC_job & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_jobList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_AC_job & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_AC_job & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Lexique & _inLexique,
                                GGS_AC_job & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Lexique & _inLexique,
                                 GGS_AC_job & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_AC_job & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_jobList operator + (const GGS_L_jobList & inOperand) const ;
  public : void modifier_prependValue (C_Lexique & _inLexique,
                                const GGS_AC_job & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_AC_job & argument_0) ;
  protected : void _internalPrependValues (const GGS_AC_job & argument_0) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Map '@M_machinesMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_machinesMap ;

class GGS_M_machinesMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_machinesMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Comparison methods
  public : GGS_bool operator == (const GGS_M_machinesMap & inOperand) const ;
  public : GGS_bool operator != (const GGS_M_machinesMap & inOperand) const ;
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_machinesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_M_machinesMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_M_machinesMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'removeKey' Remove Modifier
  public : void modifier_removeKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint & outParameter0,
                                GGS_uint & outParameter1,
                                GGS_M_variablesMap & outParameter2 COMMA_LOCATION_ARGS) ;
//--- 'removeKeyGetIndex' Remove Modifier
  public : void modifier_removeKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_uint & outParameter0,
                                GGS_uint & outParameter1,
                                GGS_M_variablesMap & outParameter2 COMMA_LOCATION_ARGS) ;
//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1,
                                const GGS_M_variablesMap &  inParameter2 COMMA_LOCATION_ARGS) ;
//--- 'insertKeyGetIndex' Insert Modifier
  public : void modifier_insertKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1,
                                const GGS_M_variablesMap &  inParameter2 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1,
                                GGS_M_variablesMap   & outParameter2 COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyGetIndex' Search Method
  public : void method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1,
                                GGS_M_variablesMap   & outParameter2 COMMA_LOCATION_ARGS) const ;
//--- Internal method for removing an element
  protected : void _removeElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_M_variablesMap & outParameter2,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   const GGS_uint & inParameter1,
                                   const GGS_M_variablesMap & inParameter2,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Lexique & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_uint & outParameter1,
                                   GGS_M_variablesMap & outParameter2,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_M_machinesMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_M_machinesMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_M_machinesMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@M_variablesMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_variablesMap {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_variablesMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_variablesMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_M_variablesMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_variablesMap * nextObject (void) const { return (elementOf_GGS_M_variablesMap *) mNextItem ; }
  public : inline elementOf_GGS_M_variablesMap * infObject (void) const { return (elementOf_GGS_M_variablesMap *) mInfPtr ; }
  public : inline elementOf_GGS_M_variablesMap * supObject (void) const { return (elementOf_GGS_M_variablesMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_M_variablesMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@M_stateMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_stateMap {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_stateMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_stateMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_M_stateMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_stateMap * nextObject (void) const { return (elementOf_GGS_M_stateMap *) mNextItem ; }
  public : inline elementOf_GGS_M_stateMap * infObject (void) const { return (elementOf_GGS_M_stateMap *) mInfPtr ; }
  public : inline elementOf_GGS_M_stateMap * supObject (void) const { return (elementOf_GGS_M_stateMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_M_stateMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@L_translationVector'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_translationVector : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_luint  mTargetSlot ;
//--- Constructor
  public : elementOf_GGS_L_translationVector (const GGS_luint & ) ;

//--- Access to next
  public : inline elementOf_GGS_L_translationVector * nextObject (void) const { return (elementOf_GGS_L_translationVector *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_L_translationVector * previousObject (void) const { return (elementOf_GGS_L_translationVector *) internalPreviousItem () ; }
//--- Element comparison
  protected : bool isEqualToElement (const cListElement * inOperand) const ;
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_translationVector ;
} ;

//---------------------------------------------------------------------------*

#include "include_AC_boolExpression.h"

//---------------------------------------------------------------------------*

#include "include_C_importBoolMachine.h"

//---------------------------------------------------------------------------*

#include "include_C_andExpression.h"

//---------------------------------------------------------------------------*

#include "include_C_orExpression.h"

//---------------------------------------------------------------------------*

#include "include_C_xorExpression.h"

//---------------------------------------------------------------------------*

#include "include_C_impliesExpression.h"

//---------------------------------------------------------------------------*

#include "include_C_equalExpression.h"

//---------------------------------------------------------------------------*

#include "include_C_notExpression.h"

//---------------------------------------------------------------------------*

#include "include_C_VariableExpression.h"

//---------------------------------------------------------------------------*

#include "include_C_trueExpression.h"

//---------------------------------------------------------------------------*

#include "include_C_falseExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@L_transitionDefinition'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_transitionDefinition : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_AC_boolExpression  mActionExpression ;
  public : GGS_location  mEndOfExpression ;
  public : GGS_luint  mTargetStateIndex ;
//--- Constructor
  public : elementOf_GGS_L_transitionDefinition (const GGS_AC_boolExpression & ,
                                const GGS_location & ,
                                const GGS_luint & ) ;

//--- Access to next
  public : inline elementOf_GGS_L_transitionDefinition * nextObject (void) const { return (elementOf_GGS_L_transitionDefinition *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_L_transitionDefinition * previousObject (void) const { return (elementOf_GGS_L_transitionDefinition *) internalPreviousItem () ; }
//--- Element comparison
  protected : bool isEqualToElement (const cListElement * inOperand) const ;
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_transitionDefinition ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@L_stateDefinition'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_stateDefinition : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_luint  mStateIndex ;
  public : GGS_AC_boolExpression  mStateExpression ;
  public : GGS_location  mEndOfStateExpression ;
  public : GGS_L_transitionDefinition  mTransitionsList ;
//--- Constructor
  public : elementOf_GGS_L_stateDefinition (const GGS_luint & ,
                                const GGS_AC_boolExpression & ,
                                const GGS_location & ,
                                const GGS_L_transitionDefinition & ) ;

//--- Access to next
  public : inline elementOf_GGS_L_stateDefinition * nextObject (void) const { return (elementOf_GGS_L_stateDefinition *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_L_stateDefinition * previousObject (void) const { return (elementOf_GGS_L_stateDefinition *) internalPreviousItem () ; }
//--- Element comparison
  protected : bool isEqualToElement (const cListElement * inOperand) const ;
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_stateDefinition ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@L_statesDefinitionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_statesDefinitionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_luint  mStateIndex ;
  public : GGS_location  mStateLocation ;
//--- Constructor
  public : elementOf_GGS_L_statesDefinitionList (const GGS_luint & ,
                                const GGS_location & ) ;

//--- Access to next
  public : inline elementOf_GGS_L_statesDefinitionList * nextObject (void) const { return (elementOf_GGS_L_statesDefinitionList *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_L_statesDefinitionList * previousObject (void) const { return (elementOf_GGS_L_statesDefinitionList *) internalPreviousItem () ; }
//--- Element comparison
  protected : bool isEqualToElement (const cListElement * inOperand) const ;
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_statesDefinitionList ;
} ;

//---------------------------------------------------------------------------*

#include "include_AC_machineDefinition.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@M_modesMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_modesMap {
  public : GGS_AC_machineDefinition  mModeDefinition ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_modesMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_modesMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_M_modesMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_modesMap * nextObject (void) const { return (elementOf_GGS_M_modesMap *) mNextItem ; }
  public : inline elementOf_GGS_M_modesMap * infObject (void) const { return (elementOf_GGS_M_modesMap *) mInfPtr ; }
  public : inline elementOf_GGS_M_modesMap * supObject (void) const { return (elementOf_GGS_M_modesMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_M_modesMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@ListForModes'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ListForModes : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_luint  mSourceMode ;
  public : GGS_luint  mTargetMode ;
//--- Constructor
  public : elementOf_GGS_ListForModes (const GGS_luint & ,
                                const GGS_luint & ) ;

//--- Access to next
  public : inline elementOf_GGS_ListForModes * nextObject (void) const { return (elementOf_GGS_ListForModes *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_ListForModes * previousObject (void) const { return (elementOf_GGS_ListForModes *) internalPreviousItem () ; }
//--- Element comparison
  protected : bool isEqualToElement (const cListElement * inOperand) const ;
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_ListForModes ;
} ;

//---------------------------------------------------------------------------*

#include "include_C_substractiveModalCompositionComponent.h"

//---------------------------------------------------------------------------*

#include "include_C_additiveModalCompositionComponent.h"

//---------------------------------------------------------------------------*

#include "include_C_trans.h"

//---------------------------------------------------------------------------*

#include "include_C_importMachine.h"

//---------------------------------------------------------------------------*

#include "include_C_explicitAutomatonDefinition.h"

//---------------------------------------------------------------------------*

#include "include_C_boolToSeqExpression.h"

//---------------------------------------------------------------------------*

#include "include_C_existsDefinition.h"

//---------------------------------------------------------------------------*

#include "include_C_forallDefinition.h"

//---------------------------------------------------------------------------*

#include "include_C_parallelComposition.h"

//---------------------------------------------------------------------------*

#include "include_C_orComposition.h"

//---------------------------------------------------------------------------*

#include "include_C_strongModalComposition.h"

//---------------------------------------------------------------------------*

#include "include_C_weakModalComposition.h"

//---------------------------------------------------------------------------*

#include "include_C_fullSaturationOperation.h"

//---------------------------------------------------------------------------*

#include "include_C_complementationOperation.h"

//---------------------------------------------------------------------------*

#include "include_C_suppressTerminalStatesOperation.h"

//---------------------------------------------------------------------------*

#include "include_C_suppressInitialStatesOperation.h"

//---------------------------------------------------------------------------*

#include "include_AC_job.h"

//---------------------------------------------------------------------------*

#include "include_C_machineCheck.h"

//---------------------------------------------------------------------------*

#include "include_C_machineCheckIdentical.h"

//---------------------------------------------------------------------------*

#include "include_C_machineComponent.h"

//---------------------------------------------------------------------------*

#include "include_C_machineDefinedByAdditiveModalComp.h"

//---------------------------------------------------------------------------*

#include "include_C_machineDefinedBySubstractiveModalComp.h"

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@L_inputConfigurationForScenario'             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_inputConfigurationForScenario : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_luint  mInputValue ;
//--- Constructor
  public : elementOf_GGS_L_inputConfigurationForScenario (const GGS_luint & ) ;

//--- Access to next
  public : inline elementOf_GGS_L_inputConfigurationForScenario * nextObject (void) const { return (elementOf_GGS_L_inputConfigurationForScenario *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_L_inputConfigurationForScenario * previousObject (void) const { return (elementOf_GGS_L_inputConfigurationForScenario *) internalPreviousItem () ; }
//--- Element comparison
  protected : bool isEqualToElement (const cListElement * inOperand) const ;
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_inputConfigurationForScenario ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@L_inputScenario'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_inputScenario : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_L_inputConfigurationForScenario  mInputConfiguration ;
//--- Constructor
  public : elementOf_GGS_L_inputScenario (const GGS_L_inputConfigurationForScenario & ) ;

//--- Access to next
  public : inline elementOf_GGS_L_inputScenario * nextObject (void) const { return (elementOf_GGS_L_inputScenario *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_L_inputScenario * previousObject (void) const { return (elementOf_GGS_L_inputScenario *) internalPreviousItem () ; }
//--- Element comparison
  protected : bool isEqualToElement (const cListElement * inOperand) const ;
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_inputScenario ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@L_scenarioList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_scenarioList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mScenarioTitle ;
  public : GGS_L_inputScenario  mInputScenario ;
//--- Constructor
  public : elementOf_GGS_L_scenarioList (const GGS_lstring & ,
                                const GGS_L_inputScenario & ) ;

//--- Access to next
  public : inline elementOf_GGS_L_scenarioList * nextObject (void) const { return (elementOf_GGS_L_scenarioList *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_L_scenarioList * previousObject (void) const { return (elementOf_GGS_L_scenarioList *) internalPreviousItem () ; }
//--- Element comparison
  protected : bool isEqualToElement (const cListElement * inOperand) const ;
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_scenarioList ;
} ;

//---------------------------------------------------------------------------*

#include "include_C_scenarioComponent.h"

//---------------------------------------------------------------------------*

#include "include_typeUse_AND.h"

//---------------------------------------------------------------------------*

#include "include_typeUse_ITE.h"

//---------------------------------------------------------------------------*

#include "include_typeUse_AND_ITE.h"

//---------------------------------------------------------------------------*

#include "include_typeResize_AND_cache.h"

//---------------------------------------------------------------------------*

#include "include_typeResize_ITE_cache.h"

//---------------------------------------------------------------------------*

#include "include_typeResizeMap.h"

//---------------------------------------------------------------------------*

#include "include_typeDisplayBDDstats.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of list '@L_jobList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_jobList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_AC_job  mComponent ;
//--- Constructor
  public : elementOf_GGS_L_jobList (const GGS_AC_job & ) ;

//--- Access to next
  public : inline elementOf_GGS_L_jobList * nextObject (void) const { return (elementOf_GGS_L_jobList *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_L_jobList * previousObject (void) const { return (elementOf_GGS_L_jobList *) internalPreviousItem () ; }
//--- Element comparison
  protected : bool isEqualToElement (const cListElement * inOperand) const ;
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_jobList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@M_machinesMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_machinesMap {
  public : GGS_uint  mInputVariableCount ;
  public : GGS_uint  mInputAndInternalVariableCount ;
  public : GGS_M_variablesMap  mVariablesMap ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_machinesMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_machinesMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_M_machinesMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_machinesMap * nextObject (void) const { return (elementOf_GGS_M_machinesMap *) mNextItem ; }
  public : inline elementOf_GGS_M_machinesMap * infObject (void) const { return (elementOf_GGS_M_machinesMap *) mInfPtr ; }
  public : inline elementOf_GGS_M_machinesMap * supObject (void) const { return (elementOf_GGS_M_machinesMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_M_machinesMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
