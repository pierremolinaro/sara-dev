//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'sara_semantics.h'                           *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 27th, 2006, at 18h53'24"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef sara_semantics_DEFINED
#define sara_semantics_DEFINED

#include <string.h>

#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_stringset.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_M_variablesMap ;
class GGS_M_stateMap ;
class GGS_L_translationVector ;
class GGS_AC_boolExpression ;
class GGS_C_importBoolMachine ;
class GGS_C_andExpression ;
class GGS_C_orExpression ;
class GGS_C_xorExpression ;
class GGS_C_impliesExpression ;
class GGS_C_equalExpression ;
class GGS_C_notExpression ;
class GGS_C_VariableExpression ;
class GGS_C_trueExpression ;
class GGS_C_falseExpression ;
class GGS_L_transitionDefinition ;
class GGS_L_stateDefinition ;
class GGS_L_statesDefinitionList ;
class GGS_AC_machineDefinition ;
class GGS_M_modesMap ;
class GGS_ListForModes ;
class GGS_C_substractiveModalCompositionComponent ;
class GGS_C_additiveModalCompositionComponent ;
class GGS_C_trans ;
class GGS_C_importMachine ;
class GGS_C_explicitAutomatonDefinition ;
class GGS_C_boolToSeqExpression ;
class GGS_C_existsDefinition ;
class GGS_C_forallDefinition ;
class GGS_C_parallelComposition ;
class GGS_C_orComposition ;
class GGS_C_strongModalComposition ;
class GGS_C_weakModalComposition ;
class GGS_C_fullSaturationOperation ;
class GGS_C_complementationOperation ;
class GGS_C_suppressTerminalStatesOperation ;
class GGS_C_suppressInitialStatesOperation ;
class GGS_AC_job ;
class GGS_C_machineCheck ;
class GGS_C_machineCheckIdentical ;
class GGS_C_machineComponent ;
class GGS_C_machineDefinedByAdditiveModalComp ;
class GGS_C_machineDefinedBySubstractiveModalComp ;
class GGS_L_inputConfigurationForScenario ;
class GGS_L_inputScenario ;
class GGS_L_scenarioList ;
class GGS_C_scenarioComponent ;
class GGS_typeUse_AND ;
class GGS_typeUse_ITE ;
class GGS_typeUse_AND_ITE ;
class GGS_typeResize_AND_cache ;
class GGS_typeResize_ITE_cache ;
class GGS_typeResizeMap ;
class GGS_typeDisplayBDDstats ;
class GGS_L_jobList ;
class GGS_M_machinesMap ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Map '@M_variablesMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_variablesMap ;

class GGS_M_variablesMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_variablesMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_variablesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_variablesMap constructor_empty (LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'searchKeyGetIndex' Search Method
  public : void methode_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
  public : GGS_string reader_description (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@M_stateMap'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_stateMap ;

class GGS_M_stateMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_stateMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_stateMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_stateMap constructor_empty (LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'defineState' Insert Method
  public : void methode_defineState (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'searchKeyGetIndex' Search Method
  public : void methode_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
  public : GGS_string reader_description (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@L_translationVector'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_translationVector ;

class GGS_L_translationVector {
  public : typedef elementOf_GGS_L_translationVector element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_translationVector (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_L_translationVector (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_L_translationVector (const GGS_L_translationVector &) ; // Copy constructor
  public : void operator = (const GGS_L_translationVector &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_translationVector (void) ;

//--- Constructor 'empty'
  public : static GGS_L_translationVector constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_luint & argument_0) ;
  protected : void internalAppendItem (const GGS_luint & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

class cPtr_AC_boolExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_AC_boolExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_boolExpression {
  protected : cPtr_AC_boolExpression * mPointer ;
  public : GGS_AC_boolExpression (void) ;
  public : GGS_AC_boolExpression (const GGS_AC_boolExpression &) ;
  public : virtual ~GGS_AC_boolExpression (void) ;
  public : void operator = (const GGS_AC_boolExpression &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_AC_boolExpression & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_AC_boolExpression * inSource) ;
  public : GGS_AC_boolExpression (cPtr_AC_boolExpression * inSource) ;
  public : inline cPtr_AC_boolExpression * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : GGS_string reader_description (void) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_AC_boolExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_boolExpression * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@L_transitionDefinition'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_transitionDefinition ;

class GGS_L_transitionDefinition {
  public : typedef elementOf_GGS_L_transitionDefinition element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_transitionDefinition (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_L_transitionDefinition (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_L_transitionDefinition (const GGS_L_transitionDefinition &) ; // Copy constructor
  public : void operator = (const GGS_L_transitionDefinition &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_transitionDefinition (void) ;

//--- Constructor 'empty'
  public : static GGS_L_transitionDefinition constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_AC_boolExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_luint & argument_2) ;
  protected : void internalAppendItem (const GGS_AC_boolExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_luint & argument_2) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@L_stateDefinition'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_stateDefinition ;

class GGS_L_stateDefinition {
  public : typedef elementOf_GGS_L_stateDefinition element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_stateDefinition (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_L_stateDefinition (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_L_stateDefinition (const GGS_L_stateDefinition &) ; // Copy constructor
  public : void operator = (const GGS_L_stateDefinition &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_stateDefinition (void) ;

//--- Constructor 'empty'
  public : static GGS_L_stateDefinition constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_luint & argument_0,
                                const GGS_AC_boolExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_L_transitionDefinition & argument_3) ;
  protected : void internalAppendItem (const GGS_luint & argument_0,
                                const GGS_AC_boolExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_L_transitionDefinition & argument_3) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@L_statesDefinitionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_statesDefinitionList ;

class GGS_L_statesDefinitionList {
  public : typedef elementOf_GGS_L_statesDefinitionList element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_statesDefinitionList (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_L_statesDefinitionList (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_L_statesDefinitionList (const GGS_L_statesDefinitionList &) ; // Copy constructor
  public : void operator = (const GGS_L_statesDefinitionList &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_statesDefinitionList (void) ;

//--- Constructor 'empty'
  public : static GGS_L_statesDefinitionList constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_luint & argument_0,
                                const GGS_location & argument_1) ;
  protected : void internalAppendItem (const GGS_luint & argument_0,
                                const GGS_location & argument_1) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

class cPtr_AC_machineDefinition ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_AC_machineDefinition'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_machineDefinition {
  protected : cPtr_AC_machineDefinition * mPointer ;
  public : GGS_AC_machineDefinition (void) ;
  public : GGS_AC_machineDefinition (const GGS_AC_machineDefinition &) ;
  public : virtual ~GGS_AC_machineDefinition (void) ;
  public : void operator = (const GGS_AC_machineDefinition &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_AC_machineDefinition & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_AC_machineDefinition * inSource) ;
  public : GGS_AC_machineDefinition (cPtr_AC_machineDefinition * inSource) ;
  public : inline cPtr_AC_machineDefinition * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : GGS_string reader_description (void) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_AC_machineDefinition * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_machineDefinition * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@M_modesMap'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_modesMap ;

class GGS_M_modesMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_modesMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_modesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_modesMap constructor_empty (LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_machineDefinition &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_machineDefinition   & outParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKeyGetIndex' Search Method
  public : void methode_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_AC_machineDefinition   & outParameter0 COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_AC_machineDefinition & inParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_AC_machineDefinition & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
  public : GGS_string reader_description (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           list '@ListForModes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ListForModes ;

class GGS_ListForModes {
  public : typedef elementOf_GGS_ListForModes element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_ListForModes (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_ListForModes (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_ListForModes (const GGS_ListForModes &) ; // Copy constructor
  public : void operator = (const GGS_ListForModes &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_ListForModes (void) ;

//--- Constructor 'empty'
  public : static GGS_ListForModes constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) ;
  protected : void internalAppendItem (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

class cPtr_AC_job ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        GALGAS class 'GGS_AC_job'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_job {
  protected : cPtr_AC_job * mPointer ;
  public : GGS_AC_job (void) ;
  public : GGS_AC_job (const GGS_AC_job &) ;
  public : virtual ~GGS_AC_job (void) ;
  public : void operator = (const GGS_AC_job &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_AC_job & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_AC_job * inSource) ;
  public : GGS_AC_job (cPtr_AC_job * inSource) ;
  public : inline cPtr_AC_job * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : GGS_string reader_description (void) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_AC_job * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_job * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 list '@L_inputConfigurationForScenario'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_inputConfigurationForScenario ;

class GGS_L_inputConfigurationForScenario {
  public : typedef elementOf_GGS_L_inputConfigurationForScenario element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_inputConfigurationForScenario (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_L_inputConfigurationForScenario (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_L_inputConfigurationForScenario (const GGS_L_inputConfigurationForScenario &) ; // Copy constructor
  public : void operator = (const GGS_L_inputConfigurationForScenario &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_inputConfigurationForScenario (void) ;

//--- Constructor 'empty'
  public : static GGS_L_inputConfigurationForScenario constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_luint & argument_0) ;
  protected : void internalAppendItem (const GGS_luint & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@L_inputScenario'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_inputScenario ;

class GGS_L_inputScenario {
  public : typedef elementOf_GGS_L_inputScenario element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_inputScenario (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_L_inputScenario (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_L_inputScenario (const GGS_L_inputScenario &) ; // Copy constructor
  public : void operator = (const GGS_L_inputScenario &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_inputScenario (void) ;

//--- Constructor 'empty'
  public : static GGS_L_inputScenario constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_L_inputConfigurationForScenario & argument_0) ;
  protected : void internalAppendItem (const GGS_L_inputConfigurationForScenario & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@L_scenarioList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_scenarioList ;

class GGS_L_scenarioList {
  public : typedef elementOf_GGS_L_scenarioList element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_scenarioList (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_L_scenarioList (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_L_scenarioList (const GGS_L_scenarioList &) ; // Copy constructor
  public : void operator = (const GGS_L_scenarioList &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_scenarioList (void) ;

//--- Constructor 'empty'
  public : static GGS_L_scenarioList constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_L_inputScenario & argument_1) ;
  protected : void internalAppendItem (const GGS_lstring & argument_0,
                                const GGS_L_inputScenario & argument_1) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            list '@L_jobList'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_jobList ;

class GGS_L_jobList {
  public : typedef elementOf_GGS_L_jobList element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_jobList (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_L_jobList (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_L_jobList (const GGS_L_jobList &) ; // Copy constructor
  public : void operator = (const GGS_L_jobList &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_jobList (void) ;

//--- Constructor 'empty'
  public : static GGS_L_jobList constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_AC_job & argument_0) ;
  protected : void internalAppendItem (const GGS_AC_job & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Map '@M_machinesMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_machinesMap ;

class GGS_M_machinesMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_machinesMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_machinesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_machinesMap constructor_empty (LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1,
                                const GGS_M_variablesMap &  inParameter2 COMMA_LOCATION_ARGS) ;
//--- 'insertKeyGetIndex' Insert Method
  public : void methode_insertKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_uint &  inParameter0,
                                const GGS_uint &  inParameter1,
                                const GGS_M_variablesMap &  inParameter2 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1,
                                GGS_M_variablesMap   & outParameter2 COMMA_LOCATION_ARGS) ;
//--- 'searchKeyGetIndex' Search Method
  public : void methode_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1,
                                GGS_M_variablesMap   & outParameter2 COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_uint & inParameter0,
                                  const GGS_uint & inParameter1,
                                  const GGS_M_variablesMap & inParameter2,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_uint & outParameter0,
                                  GGS_uint & outParameter1,
                                  GGS_M_variablesMap & outParameter2,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
  public : GGS_string reader_description (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@M_variablesMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_variablesMap {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_variablesMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_variablesMap (const GGS_lstring & inKey,
                                    const sint32 inIndex,
                                     const e_M_variablesMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_variablesMap * nextObject (void) const { return (elementOf_GGS_M_variablesMap *) mNextItem ; }
  public : inline elementOf_GGS_M_variablesMap * infObject (void) const { return (elementOf_GGS_M_variablesMap *) mInfPtr ; }
  public : inline elementOf_GGS_M_variablesMap * supObject (void) const { return (elementOf_GGS_M_variablesMap *) mSupPtr ; }
//--- Data member
  public : e_M_variablesMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_String & ioString) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@M_stateMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_stateMap {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_stateMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_stateMap (const GGS_lstring & inKey,
                                    const sint32 inIndex,
                                     const e_M_stateMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_stateMap * nextObject (void) const { return (elementOf_GGS_M_stateMap *) mNextItem ; }
  public : inline elementOf_GGS_M_stateMap * infObject (void) const { return (elementOf_GGS_M_stateMap *) mInfPtr ; }
  public : inline elementOf_GGS_M_stateMap * supObject (void) const { return (elementOf_GGS_M_stateMap *) mSupPtr ; }
//--- Data member
  public : e_M_stateMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_String & ioString) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@L_translationVector'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_translationVector {
  private : elementOf_GGS_L_translationVector * mNextItem ;
    public : GGS_luint  mTargetSlot ;
  public : elementOf_GGS_L_translationVector (const GGS_luint & ) ;

  public : inline elementOf_GGS_L_translationVector * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_translationVector (const elementOf_GGS_L_translationVector &) ;
  private : void operator = (const elementOf_GGS_L_translationVector &) ;
  public : inline ~elementOf_GGS_L_translationVector (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_L_translationVector ;
} ;

//---------------------------------------------------------------------------*


#include "include_AC_boolExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_importBoolMachine'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_importBoolMachine.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_importBoolMachine'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_importBoolMachine {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_importBoolMachine * constructor_new (const GGS_uint & argument_0,
                                const GGS_location & argument_1,
                                const GGS_L_translationVector & argument_2 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_importBoolMachine * constructor_new (const GGS_uint & argument_0,
                                const GGS_location & argument_1,
                                const GGS_L_translationVector & argument_2 COMMA_LOCATION_ARGS) {
      return new cPtr_C_importBoolMachine(argument_0,
                                argument_1,
                                argument_2 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_andExpression'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_andExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_andExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_andExpression {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_andExpression * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_andExpression * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_andExpression(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'C_orExpression'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_orExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_orExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_orExpression {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_orExpression * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_orExpression * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_orExpression(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_xorExpression'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_xorExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_xorExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_xorExpression {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_xorExpression * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_xorExpression * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_xorExpression(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_impliesExpression'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_impliesExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_impliesExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_impliesExpression {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_impliesExpression * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_impliesExpression * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_impliesExpression(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'C_equalExpression'                          *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_equalExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_equalExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_equalExpression {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_equalExpression * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_equalExpression * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_equalExpression(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_notExpression'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_notExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_notExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_notExpression {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_notExpression * constructor_new (const GGS_AC_boolExpression & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_notExpression * constructor_new (const GGS_AC_boolExpression & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_C_notExpression(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_VariableExpression'                        *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_VariableExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_VariableExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_VariableExpression {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_VariableExpression * constructor_new (const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_VariableExpression * constructor_new (const GGS_luint & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_C_VariableExpression(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_trueExpression'                          *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_trueExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_trueExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_trueExpression {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_trueExpression * constructor_new (LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_trueExpression * constructor_new (LOCATION_ARGS) {
      return new cPtr_C_trueExpression(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'C_falseExpression'                          *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_falseExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_falseExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_falseExpression {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_falseExpression * constructor_new (LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_falseExpression * constructor_new (LOCATION_ARGS) {
      return new cPtr_C_falseExpression(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@L_transitionDefinition'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_transitionDefinition {
  private : elementOf_GGS_L_transitionDefinition * mNextItem ;
    public : GGS_AC_boolExpression  mActionExpression ;
    public : GGS_location  mEndOfExpression ;
    public : GGS_luint  mTargetStateIndex ;
  public : elementOf_GGS_L_transitionDefinition (const GGS_AC_boolExpression & ,
                                const GGS_location & ,
                                const GGS_luint & ) ;

  public : inline elementOf_GGS_L_transitionDefinition * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_transitionDefinition (const elementOf_GGS_L_transitionDefinition &) ;
  private : void operator = (const elementOf_GGS_L_transitionDefinition &) ;
  public : inline ~elementOf_GGS_L_transitionDefinition (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_L_transitionDefinition ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@L_stateDefinition'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_stateDefinition {
  private : elementOf_GGS_L_stateDefinition * mNextItem ;
    public : GGS_luint  mStateIndex ;
    public : GGS_AC_boolExpression  mStateExpression ;
    public : GGS_location  mEndOfStateExpression ;
    public : GGS_L_transitionDefinition  mTransitionsList ;
  public : elementOf_GGS_L_stateDefinition (const GGS_luint & ,
                                const GGS_AC_boolExpression & ,
                                const GGS_location & ,
                                const GGS_L_transitionDefinition & ) ;

  public : inline elementOf_GGS_L_stateDefinition * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_stateDefinition (const elementOf_GGS_L_stateDefinition &) ;
  private : void operator = (const elementOf_GGS_L_stateDefinition &) ;
  public : inline ~elementOf_GGS_L_stateDefinition (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_L_stateDefinition ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@L_statesDefinitionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_statesDefinitionList {
  private : elementOf_GGS_L_statesDefinitionList * mNextItem ;
    public : GGS_luint  mStateIndex ;
    public : GGS_location  mStateLocation ;
  public : elementOf_GGS_L_statesDefinitionList (const GGS_luint & ,
                                const GGS_location & ) ;

  public : inline elementOf_GGS_L_statesDefinitionList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_statesDefinitionList (const elementOf_GGS_L_statesDefinitionList &) ;
  private : void operator = (const elementOf_GGS_L_statesDefinitionList &) ;
  public : inline ~elementOf_GGS_L_statesDefinitionList (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_L_statesDefinitionList ;
} ;

//---------------------------------------------------------------------------*


#include "include_AC_machineDefinition.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@M_modesMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_modesMap {
  public : GGS_AC_machineDefinition  mModeDefinition ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_modesMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_modesMap (const GGS_lstring & inKey,
                                    const sint32 inIndex,
                                     const e_M_modesMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_modesMap * nextObject (void) const { return (elementOf_GGS_M_modesMap *) mNextItem ; }
  public : inline elementOf_GGS_M_modesMap * infObject (void) const { return (elementOf_GGS_M_modesMap *) mInfPtr ; }
  public : inline elementOf_GGS_M_modesMap * supObject (void) const { return (elementOf_GGS_M_modesMap *) mSupPtr ; }
//--- Data member
  public : e_M_modesMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_String & ioString) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@ListForModes'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ListForModes {
  private : elementOf_GGS_ListForModes * mNextItem ;
    public : GGS_luint  mSourceMode ;
    public : GGS_luint  mTargetMode ;
  public : elementOf_GGS_ListForModes (const GGS_luint & ,
                                const GGS_luint & ) ;

  public : inline elementOf_GGS_ListForModes * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_ListForModes (const elementOf_GGS_ListForModes &) ;
  private : void operator = (const elementOf_GGS_ListForModes &) ;
  public : inline ~elementOf_GGS_ListForModes (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_ListForModes ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             class 'C_substractiveModalCompositionComponent'               *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_substractiveModalCompositionComponent.h"

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_C_substractiveModalCompositionComponent'         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_substractiveModalCompositionComponent {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_substractiveModalCompositionComponent * constructor_new (const GGS_M_modesMap & argument_0,
                                const GGS_ListForModes & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_substractiveModalCompositionComponent * constructor_new (const GGS_M_modesMap & argument_0,
                                const GGS_ListForModes & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_substractiveModalCompositionComponent(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'C_additiveModalCompositionComponent'                 *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_additiveModalCompositionComponent.h"

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_C_additiveModalCompositionComponent'           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_additiveModalCompositionComponent {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_additiveModalCompositionComponent * constructor_new (const GGS_M_modesMap & argument_0,
                                const GGS_ListForModes & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_additiveModalCompositionComponent * constructor_new (const GGS_M_modesMap & argument_0,
                                const GGS_ListForModes & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_additiveModalCompositionComponent(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                             class 'C_trans'                               *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_trans.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        GALGAS class 'GGS_C_trans'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_trans {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_trans * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_trans * constructor_new (const GGS_AC_boolExpression & argument_0,
                                const GGS_AC_boolExpression & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_trans(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_importMachine'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_importMachine.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_importMachine'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_importMachine {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_importMachine * constructor_new (const GGS_uint & argument_0,
                                const GGS_L_translationVector & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_importMachine * constructor_new (const GGS_uint & argument_0,
                                const GGS_L_translationVector & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_importMachine(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'C_explicitAutomatonDefinition'                    *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_explicitAutomatonDefinition.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_C_explicitAutomatonDefinition'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_explicitAutomatonDefinition {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_explicitAutomatonDefinition * constructor_new (const GGS_M_stateMap & argument_0,
                                const GGS_L_statesDefinitionList & argument_1,
                                const GGS_L_statesDefinitionList & argument_2,
                                const GGS_L_stateDefinition & argument_3,
                                const GGS_location & argument_4 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_explicitAutomatonDefinition * constructor_new (const GGS_M_stateMap & argument_0,
                                const GGS_L_statesDefinitionList & argument_1,
                                const GGS_L_statesDefinitionList & argument_2,
                                const GGS_L_stateDefinition & argument_3,
                                const GGS_location & argument_4 COMMA_LOCATION_ARGS) {
      return new cPtr_C_explicitAutomatonDefinition(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'C_boolToSeqExpression'                        *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_boolToSeqExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_boolToSeqExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_boolToSeqExpression {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_boolToSeqExpression * constructor_new (const GGS_AC_boolExpression & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_boolToSeqExpression * constructor_new (const GGS_AC_boolExpression & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_C_boolToSeqExpression(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'C_existsDefinition'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_existsDefinition.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_existsDefinition'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_existsDefinition {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_existsDefinition * constructor_new (const GGS_uint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_existsDefinition * constructor_new (const GGS_uint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) {
      return new cPtr_C_existsDefinition(argument_0,
                                argument_1,
                                argument_2 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'C_forallDefinition'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_forallDefinition.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_forallDefinition'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_forallDefinition {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_forallDefinition * constructor_new (const GGS_uint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_forallDefinition * constructor_new (const GGS_uint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) {
      return new cPtr_C_forallDefinition(argument_0,
                                argument_1,
                                argument_2 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'C_parallelComposition'                        *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_parallelComposition.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_parallelComposition'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_parallelComposition {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_parallelComposition * constructor_new (const GGS_AC_machineDefinition & argument_0,
                                const GGS_AC_machineDefinition & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_parallelComposition * constructor_new (const GGS_AC_machineDefinition & argument_0,
                                const GGS_AC_machineDefinition & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_parallelComposition(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_orComposition'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_orComposition.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_orComposition'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_orComposition {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_orComposition * constructor_new (const GGS_AC_machineDefinition & argument_0,
                                const GGS_AC_machineDefinition & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_orComposition * constructor_new (const GGS_AC_machineDefinition & argument_0,
                                const GGS_AC_machineDefinition & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_orComposition(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'C_strongModalComposition'                      *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_strongModalComposition.h"

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_C_strongModalComposition'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_strongModalComposition {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_strongModalComposition * constructor_new (const GGS_AC_machineDefinition & argument_0,
                                const GGS_location & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_strongModalComposition * constructor_new (const GGS_AC_machineDefinition & argument_0,
                                const GGS_location & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) {
      return new cPtr_C_strongModalComposition(argument_0,
                                argument_1,
                                argument_2 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'C_weakModalComposition'                       *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_weakModalComposition.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_C_weakModalComposition'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_weakModalComposition {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_weakModalComposition * constructor_new (const GGS_AC_machineDefinition & argument_0,
                                const GGS_location & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_weakModalComposition * constructor_new (const GGS_AC_machineDefinition & argument_0,
                                const GGS_location & argument_1,
                                const GGS_AC_machineDefinition & argument_2 COMMA_LOCATION_ARGS) {
      return new cPtr_C_weakModalComposition(argument_0,
                                argument_1,
                                argument_2 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'C_fullSaturationOperation'                      *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_fullSaturationOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_C_fullSaturationOperation'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_fullSaturationOperation {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_fullSaturationOperation * constructor_new (const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_fullSaturationOperation * constructor_new (const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_C_fullSaturationOperation(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'C_complementationOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_complementationOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_C_complementationOperation'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_complementationOperation {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_complementationOperation * constructor_new (const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_complementationOperation * constructor_new (const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_C_complementationOperation(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                class 'C_suppressTerminalStatesOperation'                  *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_suppressTerminalStatesOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_C_suppressTerminalStatesOperation'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_suppressTerminalStatesOperation {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_suppressTerminalStatesOperation * constructor_new (const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_suppressTerminalStatesOperation * constructor_new (const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_C_suppressTerminalStatesOperation(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'C_suppressInitialStatesOperation'                  *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_suppressInitialStatesOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_C_suppressInitialStatesOperation'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_suppressInitialStatesOperation {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_suppressInitialStatesOperation * constructor_new (const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_suppressInitialStatesOperation * constructor_new (const GGS_AC_machineDefinition & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_C_suppressInitialStatesOperation(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*


#include "include_AC_job.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'C_machineCheck'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_machineCheck.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_machineCheck'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_machineCheck {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_machineCheck * constructor_new (const GGS_luint & argument_0,
                                const GGS_bool& argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_machineCheck * constructor_new (const GGS_luint & argument_0,
                                const GGS_bool& argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_machineCheck(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'C_machineCheckIdentical'                       *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_machineCheckIdentical.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_C_machineCheckIdentical'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_machineCheckIdentical {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_machineCheckIdentical * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_machineCheckIdentical * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_machineCheckIdentical(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'C_machineComponent'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_machineComponent.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_machineComponent'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_machineComponent {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_machineComponent * constructor_new (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3,
                                const GGS_M_variablesMap & argument_4,
                                const GGS_AC_machineDefinition & argument_5 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_machineComponent * constructor_new (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3,
                                const GGS_M_variablesMap & argument_4,
                                const GGS_AC_machineDefinition & argument_5 COMMA_LOCATION_ARGS) {
      return new cPtr_C_machineComponent(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'C_machineDefinedByAdditiveModalComp'                 *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_machineDefinedByAdditiveModalComp.h"

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_C_machineDefinedByAdditiveModalComp'           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_machineDefinedByAdditiveModalComp {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_machineDefinedByAdditiveModalComp * constructor_new (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3,
                                const GGS_M_variablesMap & argument_4,
                                const GGS_M_modesMap & argument_5,
                                const GGS_ListForModes & argument_6 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_machineDefinedByAdditiveModalComp * constructor_new (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3,
                                const GGS_M_variablesMap & argument_4,
                                const GGS_M_modesMap & argument_5,
                                const GGS_ListForModes & argument_6 COMMA_LOCATION_ARGS) {
      return new cPtr_C_machineDefinedByAdditiveModalComp(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             class 'C_machineDefinedBySubstractiveModalComp'               *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_machineDefinedBySubstractiveModalComp.h"

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_C_machineDefinedBySubstractiveModalComp'         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_machineDefinedBySubstractiveModalComp {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_machineDefinedBySubstractiveModalComp * constructor_new (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3,
                                const GGS_M_variablesMap & argument_4,
                                const GGS_M_modesMap & argument_5,
                                const GGS_ListForModes & argument_6 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_machineDefinedBySubstractiveModalComp * constructor_new (const GGS_lstring & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3,
                                const GGS_M_variablesMap & argument_4,
                                const GGS_M_modesMap & argument_5,
                                const GGS_ListForModes & argument_6 COMMA_LOCATION_ARGS) {
      return new cPtr_C_machineDefinedBySubstractiveModalComp(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@L_inputConfigurationForScenario'             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_inputConfigurationForScenario {
  private : elementOf_GGS_L_inputConfigurationForScenario * mNextItem ;
    public : GGS_luint  mInputValue ;
  public : elementOf_GGS_L_inputConfigurationForScenario (const GGS_luint & ) ;

  public : inline elementOf_GGS_L_inputConfigurationForScenario * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_inputConfigurationForScenario (const elementOf_GGS_L_inputConfigurationForScenario &) ;
  private : void operator = (const elementOf_GGS_L_inputConfigurationForScenario &) ;
  public : inline ~elementOf_GGS_L_inputConfigurationForScenario (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_L_inputConfigurationForScenario ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@L_inputScenario'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_inputScenario {
  private : elementOf_GGS_L_inputScenario * mNextItem ;
    public : GGS_L_inputConfigurationForScenario  mInputConfiguration ;
  public : elementOf_GGS_L_inputScenario (const GGS_L_inputConfigurationForScenario & ) ;

  public : inline elementOf_GGS_L_inputScenario * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_inputScenario (const elementOf_GGS_L_inputScenario &) ;
  private : void operator = (const elementOf_GGS_L_inputScenario &) ;
  public : inline ~elementOf_GGS_L_inputScenario (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_L_inputScenario ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@L_scenarioList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_scenarioList {
  private : elementOf_GGS_L_scenarioList * mNextItem ;
    public : GGS_lstring  mScenarioTitle ;
    public : GGS_L_inputScenario  mInputScenario ;
  public : elementOf_GGS_L_scenarioList (const GGS_lstring & ,
                                const GGS_L_inputScenario & ) ;

  public : inline elementOf_GGS_L_scenarioList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_scenarioList (const elementOf_GGS_L_scenarioList &) ;
  private : void operator = (const elementOf_GGS_L_scenarioList &) ;
  public : inline ~elementOf_GGS_L_scenarioList (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_L_scenarioList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_scenarioComponent'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_scenarioComponent.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_scenarioComponent'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_scenarioComponent {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_scenarioComponent * constructor_new (const GGS_luint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_M_variablesMap & argument_3,
                                const GGS_L_scenarioList & argument_4 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_scenarioComponent * constructor_new (const GGS_luint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_uint & argument_2,
                                const GGS_M_variablesMap & argument_3,
                                const GGS_L_scenarioList & argument_4 COMMA_LOCATION_ARGS) {
      return new cPtr_C_scenarioComponent(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeUse_AND'                             *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeUse_AND.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeUse_AND'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_AND {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeUse_AND * constructor_new (LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeUse_AND * constructor_new (LOCATION_ARGS) {
      return new cPtr_typeUse_AND(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeUse_ITE'                             *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeUse_ITE.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeUse_ITE'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_ITE {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeUse_ITE * constructor_new (LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeUse_ITE * constructor_new (LOCATION_ARGS) {
      return new cPtr_typeUse_ITE(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeUse_AND_ITE'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeUse_AND_ITE.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeUse_AND_ITE'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_AND_ITE {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeUse_AND_ITE * constructor_new (LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeUse_AND_ITE * constructor_new (LOCATION_ARGS) {
      return new cPtr_typeUse_AND_ITE(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeResize_AND_cache'                        *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeResize_AND_cache.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeResize_AND_cache'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeResize_AND_cache {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeResize_AND_cache * constructor_new (const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeResize_AND_cache * constructor_new (const GGS_luint & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_typeResize_AND_cache(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeResize_ITE_cache'                        *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeResize_ITE_cache.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeResize_ITE_cache'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeResize_ITE_cache {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeResize_ITE_cache * constructor_new (const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeResize_ITE_cache * constructor_new (const GGS_luint & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_typeResize_ITE_cache(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeResizeMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeResizeMap.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeResizeMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeResizeMap {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeResizeMap * constructor_new (const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeResizeMap * constructor_new (const GGS_luint & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_typeResizeMap(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeDisplayBDDstats'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeDisplayBDDstats.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeDisplayBDDstats'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDisplayBDDstats {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeDisplayBDDstats * constructor_new (LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeDisplayBDDstats * constructor_new (LOCATION_ARGS) {
      return new cPtr_typeDisplayBDDstats(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of list '@L_jobList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_jobList {
  private : elementOf_GGS_L_jobList * mNextItem ;
    public : GGS_AC_job  mComponent ;
  public : elementOf_GGS_L_jobList (const GGS_AC_job & ) ;

  public : inline elementOf_GGS_L_jobList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_jobList (const elementOf_GGS_L_jobList &) ;
  private : void operator = (const elementOf_GGS_L_jobList &) ;
  public : inline ~elementOf_GGS_L_jobList (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_L_jobList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@M_machinesMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_machinesMap {
  public : GGS_uint  mInputVariableCount ;
  public : GGS_uint  mInputAndInternalVariableCount ;
  public : GGS_M_variablesMap  mVariablesMap ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_machinesMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_machinesMap (const GGS_lstring & inKey,
                                    const sint32 inIndex,
                                     const e_M_machinesMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_machinesMap * nextObject (void) const { return (elementOf_GGS_M_machinesMap *) mNextItem ; }
  public : inline elementOf_GGS_M_machinesMap * infObject (void) const { return (elementOf_GGS_M_machinesMap *) mInfPtr ; }
  public : inline elementOf_GGS_M_machinesMap * supObject (void) const { return (elementOf_GGS_M_machinesMap *) mSupPtr ; }
//--- Data member
  public : e_M_machinesMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_String & ioString) const ;
} ;

//---------------------------------------------------------------------------*

#endif
