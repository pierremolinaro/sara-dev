//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'sara_parser.cpp'                           *
//               Generated by version 0.14.0 (LL(1) grammar)                 *
//                     january 31th, 2005, at 14h2'40"                       *
//                                                                           *
// This program is free software; you can redistribute it and/or modify it   *
// under the terms of the GNU General Public License as published by the     *
// Free Software Foundation.                                                 *
//                                                                           *
// This program is distributed in the hope it will be useful, but WITHOUT    *
// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *
// more details.                                                             *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "files/C_text_file_write.h"
#include "sara_parser.h"


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_start_symbol_sara_parser_209_20_ (sara_scanner & lexique_var_) {
  GGS_M_componentMap  var_cas_componentsMap ;
  var_cas_componentsMap = GGS_M_componentMap::constructor_empty () ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_component_ (lexique_var_, var_cas_componentsMap) ;
      switch (select_repeat_sara_parser_0 (lexique_var_)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  if (var_cas_componentsMap.isBuilt ()) {
    ::performComputations (lexique_var_,  var_cas_componentsMap) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_221_17_ (sara_scanner & lexique_var_,
                                GGS_M_componentMap  &var_cas_ioComponentsMap) {
  GGS_M_inputVarMap  var_cas_inputVariableMap ;
  var_cas_inputVariableMap = GGS_M_inputVarMap::constructor_empty () ;
  GGS_M_outputVarMap  var_cas_outputVariableMap ;
  var_cas_outputVariableMap = GGS_M_outputVarMap::constructor_empty () ;
  GGS_M_stateMap  var_cas_statesMap ;
  var_cas_statesMap = GGS_M_stateMap::constructor_empty () ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList ;
  var_cas_stateDefinitionList = GGS_L_stateDefinition::constructor_empty () ;
  GGS_lstring  var_cas_componentName ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
  var_cas_componentName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3A_3D) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_inputVarName ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_inputVarName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        insertKey_M_inputVarMap (lexique_var_,
                                        var_cas_inputVariableMap,
                                        var_cas_inputVarName,
                                        NULL) ;
      switch (select_repeat_sara_parser_1 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2D_3E) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_outputVarName ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_outputVarName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        insertKey_M_outputVarMap (lexique_var_,
                                        var_cas_outputVariableMap,
                                        var_cas_outputVarName,
                                        NULL) ;
      switch (select_repeat_sara_parser_2 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_auto) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7B) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_state) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_stateName ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_stateName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        insertKey_M_stateMap (lexique_var_,
                                        var_cas_statesMap,
                                        var_cas_stateName,
                                        NULL) ;
      switch (select_repeat_sara_parser_3 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3B) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_first) ;
  GGS_lstring  var_cas_initialState ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
  var_cas_initialState.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3B) ;
  GGS_luint  var_cas_initialStateIndex ;
  searchKey_M_stateMap (lexique_var_,
                                  var_cas_statesMap,
                                  var_cas_initialState,
                                  & var_cas_initialStateIndex) ;
  GGS_M_stateMap  var_cas_stateDefinitionMap ;
  var_cas_stateDefinitionMap = GGS_M_stateMap::constructor_empty () ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_stateName ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_stateName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        GGS_luint  var_cas_stateIndex ;
        searchKey_M_stateMap (lexique_var_,
                                        var_cas_statesMap,
                                        var_cas_stateName,
                                        & var_cas_stateIndex) ;
        defineState_M_stateMap (lexique_var_,
                                        var_cas_stateDefinitionMap,
                                        var_cas_stateName,
                                        NULL) ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3A) ;
        GGS_AC_inputExpression  var_cas_expression ;
        nt_input_expression_ (lexique_var_, var_cas_inputVariableMap, var_cas_expression) ;
        GGS_location  var_cas_endExpression ;
        var_cas_endExpression = GGS_location (lexique_var_) ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_out) ;
        GGS_M_outputVarMap  var_cas_outVarDefinition ;
        var_cas_outVarDefinition = GGS_M_outputVarMap::constructor_empty () ;
        GGS_L_outputValues  var_cas_outputValuesList ;
        var_cas_outputValuesList = GGS_L_outputValues::constructor_empty () ;
        { bool syntaxRepeat = true ;
          while (syntaxRepeat) {
              GGS_lstring  var_cas_outputVarName ;
              lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
              var_cas_outputVarName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
              GGS_luint  var_cas_outputVarIndex ;
              searchKey_M_outputVarMap (lexique_var_,
                                              var_cas_outputVariableMap,
                                              var_cas_outputVarName,
                                              & var_cas_outputVarIndex) ;
              insertForDefinition_M_outputVarMap (lexique_var_,
                                              var_cas_outVarDefinition,
                                              var_cas_outputVarName,
                                              NULL) ;
              lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3A) ;
              GGS_luint  var_cas_outputValue ;
              lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_literal_5Finteger) ;
              var_cas_outputValue.defineAttribute (lexique_var_.ulongValue, lexique_var_) ;
              if (((var_cas_outputValue.reader_value ()) > (GGS_uint (true, 1UL))).isBuiltAndTrue ()) {
                  var_cas_outputValue.reader_location ().signalGGSSemanticError (lexique_var_, GGS_string (true, "Value must be <= 1")) ;
              }
              var_cas_outputValuesList.addAssign_operation (var_cas_outputVarIndex, var_cas_outputValue) ;
            switch (select_repeat_sara_parser_5 (lexique_var_)) {
              case 2 : {
                lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
                } break ;
              default :
                syntaxRepeat = false ;
                break ;
            }
          }
        }
        GGS_M_outputVarMap::element_type * operand_9372 = var_cas_outputVariableMap.getFirstItem () ;
        while (operand_9372 != NULL) {
          macroValidPointer (operand_9372) ;
          if (((! var_cas_outVarDefinition.reader_hasKey (operand_9372->mKey))).isBuiltAndTrue ()) {
              GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((GGS_string (true, "'")) + (operand_9372->mKey.reader_value ()))) + (GGS_string (true, "' output variable is not defined for current state")))) ;
          }
          operand_9372 = operand_9372->getNextItem () ;
        }
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7B) ;
        GGS_L_transitionDefinition  var_cas_transitionsList ;
        var_cas_transitionsList = GGS_L_transitionDefinition::constructor_empty () ;
        { bool syntaxRepeat = true ;
          while (syntaxRepeat) {
            switch (select_repeat_sara_parser_6 (lexique_var_)) {
              case 2 : {
                GGS_AC_inputExpression  var_cas_expression ;
                nt_input_expression_ (lexique_var_, var_cas_inputVariableMap, var_cas_expression) ;
                GGS_location  var_cas_endOfExpression ;
                var_cas_endOfExpression = GGS_location (lexique_var_) ;
                lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_goto) ;
                GGS_lstring  var_cas_targetStateName ;
                lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
                var_cas_targetStateName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
                GGS_luint  var_cas_targetStateIndex ;
                searchKey_M_stateMap (lexique_var_,
                                                var_cas_statesMap,
                                                var_cas_targetStateName,
                                                & var_cas_targetStateIndex) ;
                var_cas_transitionsList.addAssign_operation (var_cas_expression, var_cas_endOfExpression, var_cas_targetStateIndex) ;
                lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3B) ;
                } break ;
              default :
                syntaxRepeat = false ;
                break ;
            }
          }
        }
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7D) ;
        var_cas_stateDefinitionList.addAssign_operation (var_cas_stateIndex, var_cas_expression, var_cas_endExpression, var_cas_transitionsList, var_cas_outputValuesList) ;
      switch (select_repeat_sara_parser_4 (lexique_var_)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_M_stateMap::element_type * operand_10332 = var_cas_statesMap.getFirstItem () ;
  while (operand_10332 != NULL) {
    macroValidPointer (operand_10332) ;
    if (((! var_cas_stateDefinitionMap.reader_hasKey (operand_10332->mKey))).isBuiltAndTrue ()) {
        GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((GGS_string (true, "'")) + (operand_10332->mKey.reader_value ()))) + (GGS_string (true, "' state is not described")))) ;
    }
    operand_10332 = operand_10332->getNextItem () ;
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7D) ;
  GGS_AC_component  var_cas_component ;
  var_cas_component = GGS_C_automatonComponent::constructor_new (var_cas_inputVariableMap, var_cas_outputVariableMap, var_cas_statesMap, var_cas_initialStateIndex, var_cas_stateDefinitionList, GGS_location (lexique_var_)) ;
  insertKey_M_componentMap (lexique_var_,
                                  var_cas_ioComponentsMap,
                                  var_cas_componentName,
                                  var_cas_component,
                                  NULL) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'input_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_input_expression_sara_parser_343_24_ (sara_scanner & lexique_var_,
                                GGS_M_inputVarMap  &var_cas_ioInputVarMap,
                                GGS_AC_inputExpression  &var_cas_outExpression) {
  nt_input_and_expression_ (lexique_var_, var_cas_ioInputVarMap, var_cas_outExpression) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_sara_parser_7 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7C) ;
          GGS_AC_inputExpression  var_cas_rightExpression ;
          nt_input_and_expression_ (lexique_var_, var_cas_ioInputVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_orExpression::constructor_new (var_cas_outExpression, var_cas_rightExpression) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'input_and_expression'          *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_input_and_expression_sara_parser_359_28_ (sara_scanner & lexique_var_,
                                GGS_M_inputVarMap  &var_cas_ioInputVarMap,
                                GGS_AC_inputExpression  &var_cas_outExpression) {
  nt_input_primary_ (lexique_var_, var_cas_ioInputVarMap, var_cas_outExpression) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_sara_parser_8 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__26) ;
          GGS_AC_inputExpression  var_cas_rightExpression ;
          nt_input_primary_ (lexique_var_, var_cas_ioInputVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_andExpression::constructor_new (var_cas_outExpression, var_cas_rightExpression) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'input_primary'              *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_input_primary_sara_parser_375_21_ (sara_scanner & lexique_var_,
                                GGS_M_inputVarMap  &var_cas_ioInputVarMap,
                                GGS_AC_inputExpression  &var_cas_outExpression) {
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__28) ;
  nt_input_expression_ (lexique_var_, var_cas_ioInputVarMap, var_cas_outExpression) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__29) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'input_primary'              *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_input_primary_sara_parser_386_21_ (sara_scanner & lexique_var_,
                                GGS_M_inputVarMap  &var_cas_ioInputVarMap,
                                GGS_AC_inputExpression  &var_cas_outExpression) {
  GGS_lstring  var_cas_inputVarName ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
  var_cas_inputVarName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
  GGS_luint  var_cas_inputVarIndex ;
  searchKey_M_inputVarMap (lexique_var_,
                                  var_cas_ioInputVarMap,
                                  var_cas_inputVarName,
                                  & var_cas_inputVarIndex) ;
  var_cas_outExpression = GGS_C_VariableExpression::constructor_new (var_cas_inputVarIndex) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'input_primary'              *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_input_primary_sara_parser_399_21_ (sara_scanner & lexique_var_,
                                GGS_M_inputVarMap  &var_cas_ioInputVarMap,
                                GGS_AC_inputExpression  &var_cas_outExpression) {
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__21) ;
  GGS_AC_inputExpression  var_cas_expression ;
  nt_input_primary_ (lexique_var_, var_cas_ioInputVarMap, var_cas_expression) ;
  var_cas_outExpression = GGS_C_notExpression::constructor_new (var_cas_expression) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'input_primary'              *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_input_primary_sara_parser_411_21_ (sara_scanner & lexique_var_,
                                GGS_M_inputVarMap  &/* var_cas_ioInputVarMap */,
                                GGS_AC_inputExpression  &var_cas_outExpression) {
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_false) ;
  var_cas_outExpression = GGS_C_falseExpression::constructor_new () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'input_primary'              *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_input_primary_sara_parser_421_21_ (sara_scanner & lexique_var_,
                                GGS_M_inputVarMap  &/* var_cas_ioInputVarMap */,
                                GGS_AC_inputExpression  &var_cas_outExpression) {
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_true) ;
  var_cas_outExpression = GGS_C_trueExpression::constructor_new () ;
}

//---------------------------------------------------------------------------*

