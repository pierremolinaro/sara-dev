//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'sara_parser.cpp'                           *
//               Generated by version 0.14.1 (LL(1) grammar)                 *
//                    february 14th, 2005, at 21h19'46"                      *
//                                                                           *
// This program is free software; you can redistribute it and/or modify it   *
// under the terms of the GNU General Public License as published by the     *
// Free Software Foundation.                                                 *
//                                                                           *
// This program is distributed in the hope it will be useful, but WITHOUT    *
// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *
// more details.                                                             *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "files/C_text_file_write.h"
#include "sara_parser.h"


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_start_symbol_sara_parser_313_20_ (sara_scanner & lexique_var_) {
  GGS_L_jobList  var_cas_componentsMap ;
  var_cas_componentsMap = GGS_L_jobList::constructor_empty () ;
  GGS_M_machinesMap  var_cas_machinesMap ;
  var_cas_machinesMap = GGS_M_machinesMap::constructor_empty () ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_component_ (lexique_var_, var_cas_machinesMap, var_cas_componentsMap) ;
      switch (select_repeat_sara_parser_0 (lexique_var_)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  if (var_cas_componentsMap.isBuilt ()) {
    ::performComputations (lexique_var_,  var_cas_componentsMap) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_325_17_ (sara_scanner & lexique_var_,
                                GGS_M_machinesMap  &var_cas_ioMachinesMap,
                                GGS_L_jobList  &var_cas_ioJobList) {
  GGS_M_variablesMap  var_cas_variablesMap ;
  var_cas_variablesMap = GGS_M_variablesMap::constructor_empty () ;
  GGS_M_stateMap  var_cas_statesMap ;
  var_cas_statesMap = GGS_M_stateMap::constructor_empty () ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList ;
  var_cas_stateDefinitionList = GGS_L_stateDefinition::constructor_empty () ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_check) ;
  GGS_lstring  var_cas_machineName ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_machineIdf) ;
  var_cas_machineName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3B) ;
  GGS_luint  var_cas_machineIndex ;
  searchKey_M_machinesMap (lexique_var_,
                                  var_cas_ioMachinesMap,
                                  var_cas_machineName,
                                  NULL,
                                  NULL,
                                  NULL,
                                  & var_cas_machineIndex) ;
  GGS_AC_job  var_cas_job ;
  var_cas_job = GGS_C_machineCheck::constructor_new (var_cas_machineIndex) ;
  var_cas_ioJobList.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_345_17_ (sara_scanner & lexique_var_,
                                GGS_M_machinesMap  &var_cas_ioMachinesMap,
                                GGS_L_jobList  &var_cas_ioJobList) {
  GGS_M_variablesMap  var_cas_variablesMap ;
  var_cas_variablesMap = GGS_M_variablesMap::constructor_empty () ;
  GGS_M_stateMap  var_cas_statesMap ;
  var_cas_statesMap = GGS_M_stateMap::constructor_empty () ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList ;
  var_cas_stateDefinitionList = GGS_L_stateDefinition::constructor_empty () ;
  GGS_lstring  var_cas_machineName ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_machineIdf) ;
  var_cas_machineName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__28) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_inputVarName ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_inputVarName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        insertKey_M_variablesMap (lexique_var_,
                                        var_cas_variablesMap,
                                        var_cas_inputVarName,
                                        NULL) ;
      switch (select_repeat_sara_parser_1 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_uint  var_cas_inputVariablesCount ;
  var_cas_inputVariablesCount = var_cas_variablesMap.reader_length () ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__29) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__28) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_outputVarName ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_outputVarName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        insertKey_M_variablesMap (lexique_var_,
                                        var_cas_variablesMap,
                                        var_cas_outputVarName,
                                        NULL) ;
      switch (select_repeat_sara_parser_2 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__29) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3A_3D) ;
  GGS_AC_machineDefinition  var_cas_definition ;
  nt_definition_expression_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_definition) ;
  GGS_luint  var_cas_machineIndex ;
  insertKey_M_machinesMap (lexique_var_,
                                  var_cas_ioMachinesMap,
                                  var_cas_machineName,
                                  var_cas_inputVariablesCount,
                                  var_cas_variablesMap,
                                  var_cas_definition,
                                  & var_cas_machineIndex) ;
  GGS_AC_job  var_cas_machine ;
  var_cas_machine = GGS_C_machineComponent::constructor_new (var_cas_machineName, var_cas_machineIndex, var_cas_inputVariablesCount, var_cas_variablesMap, var_cas_definition) ;
  var_cas_ioJobList.addAssign_operation (var_cas_machine) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'io_expression'              *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_expression_sara_parser_389_21_ (sara_scanner & lexique_var_,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_expression  &var_cas_outExpression) {
  nt_io_and_expression_ (lexique_var_, var_cas_ioVarMap, var_cas_outExpression) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_sara_parser_3 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7C) ;
          GGS_AC_expression  var_cas_rightExpression ;
          nt_io_and_expression_ (lexique_var_, var_cas_ioVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_orExpression::constructor_new (var_cas_outExpression, var_cas_rightExpression) ;
          } break ;
        case 3 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__5E) ;
          GGS_AC_expression  var_cas_rightExpression ;
          nt_io_and_expression_ (lexique_var_, var_cas_ioVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_xorExpression::constructor_new (var_cas_outExpression, var_cas_rightExpression) ;
          } break ;
        case 4 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2D_3E) ;
          GGS_AC_expression  var_cas_rightExpression ;
          nt_io_and_expression_ (lexique_var_, var_cas_ioVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_impliesExpression::constructor_new (var_cas_outExpression, var_cas_rightExpression) ;
          } break ;
        case 5 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3D) ;
          GGS_AC_expression  var_cas_rightExpression ;
          nt_io_and_expression_ (lexique_var_, var_cas_ioVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_equalExpression::constructor_new (var_cas_outExpression, var_cas_rightExpression) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'io_and_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_and_expression_sara_parser_418_25_ (sara_scanner & lexique_var_,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_expression  &var_cas_outExpression) {
  nt_io_primary_ (lexique_var_, var_cas_ioVarMap, var_cas_outExpression) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_sara_parser_4 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__26) ;
          GGS_AC_expression  var_cas_rightExpression ;
          nt_io_primary_ (lexique_var_, var_cas_ioVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_andExpression::constructor_new (var_cas_outExpression, var_cas_rightExpression) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_432_18_ (sara_scanner & lexique_var_,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_expression  &var_cas_outExpression) {
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__28) ;
  nt_io_expression_ (lexique_var_, var_cas_ioVarMap, var_cas_outExpression) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__29) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_441_18_ (sara_scanner & lexique_var_,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_expression  &var_cas_outExpression) {
  GGS_lstring  var_cas_inputVarName ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
  var_cas_inputVarName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
  GGS_luint  var_cas_inputVarIndex ;
  searchKey_M_variablesMap (lexique_var_,
                                  var_cas_ioVarMap,
                                  var_cas_inputVarName,
                                  & var_cas_inputVarIndex) ;
  var_cas_outExpression = GGS_C_VariableExpression::constructor_new (var_cas_inputVarIndex) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_452_18_ (sara_scanner & lexique_var_,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_expression  &var_cas_outExpression) {
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__21) ;
  GGS_AC_expression  var_cas_expression ;
  nt_io_primary_ (lexique_var_, var_cas_ioVarMap, var_cas_expression) ;
  var_cas_outExpression = GGS_C_notExpression::constructor_new (var_cas_expression) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_462_18_ (sara_scanner & lexique_var_,
                                GGS_M_variablesMap  &/* var_cas_ioVarMap */,
                                GGS_AC_expression  &var_cas_outExpression) {
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_none) ;
  var_cas_outExpression = GGS_C_falseExpression::constructor_new () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_470_18_ (sara_scanner & lexique_var_,
                                GGS_M_variablesMap  &/* var_cas_ioVarMap */,
                                GGS_AC_expression  &var_cas_outExpression) {
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_all) ;
  var_cas_outExpression = GGS_C_trueExpression::constructor_new () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'definition_expression'          *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_definition_expression_sara_parser_480_29_ (sara_scanner & lexique_var_,
                                GGS_M_machinesMap  &var_cas_ioMachinesMap,
                                GGS_M_variablesMap  &var_cas_variablesMap,
                                GGS_AC_machineDefinition  &var_cas_outDefinition) {
  nt_definition_expression_term_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_outDefinition) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_sara_parser_5 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7C) ;
          GGS_AC_machineDefinition  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outDefinition ;
          GGS_AC_machineDefinition  var_cas_rightOperand ;
          nt_definition_expression_term_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_rightOperand) ;
          var_cas_outDefinition = GGS_C_orComposition::constructor_new (var_cas_leftOperand, var_cas_rightOperand) ;
          } break ;
        case 3 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__5E) ;
          GGS_AC_machineDefinition  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outDefinition ;
          GGS_AC_machineDefinition  var_cas_rightOperand ;
          nt_definition_expression_term_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_rightOperand) ;
          var_cas_outDefinition = GGS_C_xorComposition::constructor_new (var_cas_leftOperand, var_cas_rightOperand) ;
          } break ;
        case 4 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2D_3E) ;
          GGS_AC_machineDefinition  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outDefinition ;
          GGS_AC_machineDefinition  var_cas_rightOperand ;
          nt_definition_expression_term_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_rightOperand) ;
          var_cas_outDefinition = GGS_C_impliesComposition::constructor_new (var_cas_leftOperand, var_cas_rightOperand) ;
          } break ;
        case 5 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3D) ;
          GGS_AC_machineDefinition  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outDefinition ;
          GGS_AC_machineDefinition  var_cas_rightOperand ;
          nt_definition_expression_term_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_rightOperand) ;
          var_cas_outDefinition = GGS_C_equalComposition::constructor_new (var_cas_leftOperand, var_cas_rightOperand) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'definition_expression_term'       *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_definition_expression_term_sara_parser_514_34_ (sara_scanner & lexique_var_,
                                GGS_M_machinesMap  &var_cas_ioMachinesMap,
                                GGS_M_variablesMap  &var_cas_variablesMap,
                                GGS_AC_machineDefinition  &var_cas_outDefinition) {
  nt_definition_expression_factor_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_outDefinition) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_sara_parser_6 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2A) ;
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (lexique_var_) ;
          GGS_AC_machineDefinition  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outDefinition ;
          GGS_AC_machineDefinition  var_cas_rightOperand ;
          nt_definition_expression_factor_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_rightOperand) ;
          var_cas_outDefinition = GGS_C_modalComposition::constructor_new (var_cas_leftOperand, var_cas_errorLocation, var_cas_rightOperand) ;
          } break ;
        case 3 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__26) ;
          GGS_AC_machineDefinition  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outDefinition ;
          GGS_AC_machineDefinition  var_cas_rightOperand ;
          nt_definition_expression_factor_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_rightOperand) ;
          var_cas_outDefinition = GGS_C_andComposition::constructor_new (var_cas_leftOperand, var_cas_rightOperand) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'definition_expression_factor'      *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_definition_expression_factor_sara_parser_537_36_ (sara_scanner & lexique_var_,
                                GGS_M_machinesMap  &var_cas_ioMachinesMap,
                                GGS_M_variablesMap  &var_cas_variablesMap,
                                GGS_AC_machineDefinition  &var_cas_outDefinition) {
  switch (select_sara_parser_7 (lexique_var_)) {
    case 1 : {
      nt_explicit_automaton_ (lexique_var_, var_cas_variablesMap, var_cas_outDefinition) ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__28) ;
      nt_definition_expression_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_outDefinition) ;
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__29) ;
      } break ;
    case 3 : {
      GGS_M_variablesMap  var_cas_extendedVariablesMap ;
      var_cas_extendedVariablesMap = var_cas_variablesMap ;
      GGS_uint  var_cas_previousVariableCount ;
      var_cas_previousVariableCount = var_cas_extendedVariablesMap.reader_length () ;
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3F) ;
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            GGS_lstring  var_cas_variableName ;
            lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
            var_cas_variableName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
            insertKey_M_variablesMap (lexique_var_,
                                            var_cas_extendedVariablesMap,
                                            var_cas_variableName,
                                            NULL) ;
          switch (select_repeat_sara_parser_8 (lexique_var_)) {
            case 2 : {
              lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      GGS_uint  var_cas_actualVariableCount ;
      var_cas_actualVariableCount = var_cas_extendedVariablesMap.reader_length () ;
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__28) ;
      GGS_AC_machineDefinition  var_cas_def ;
      nt_definition_expression_ (lexique_var_, var_cas_ioMachinesMap, var_cas_extendedVariablesMap, var_cas_def) ;
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__29) ;
      var_cas_outDefinition = GGS_C_existsDefinition::constructor_new (var_cas_previousVariableCount, var_cas_actualVariableCount, var_cas_def) ;
      } break ;
    case 4 : {
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__21) ;
      GGS_AC_machineDefinition  var_cas_def ;
      nt_definition_expression_factor_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_def) ;
      var_cas_outDefinition = GGS_C_notComposition::constructor_new (var_cas_def) ;
      } break ;
    case 5 : {
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__40) ;
      GGS_AC_machineDefinition  var_cas_def ;
      nt_definition_expression_factor_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_def) ;
      var_cas_outDefinition = GGS_C_fullSaturationOperation::constructor_new (var_cas_def) ;
      } break ;
    case 6 : {
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__25) ;
      GGS_AC_machineDefinition  var_cas_def ;
      nt_definition_expression_factor_ (lexique_var_, var_cas_ioMachinesMap, var_cas_variablesMap, var_cas_def) ;
      var_cas_outDefinition = GGS_C_saturationOperation::constructor_new (var_cas_def) ;
      } break ;
    case 7 : {
      GGS_lstring  var_cas_variableName ;
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
      var_cas_variableName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
      GGS_luint  var_cas_varIndex ;
      searchKey_M_variablesMap (lexique_var_,
                                      var_cas_variablesMap,
                                      var_cas_variableName,
                                      & var_cas_varIndex) ;
      var_cas_outDefinition = GGS_C_variableDefinition::constructor_new (var_cas_varIndex) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'definition_expression_factor'      *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_definition_expression_factor_sara_parser_590_36_ (sara_scanner & lexique_var_,
                                GGS_M_machinesMap  &var_cas_ioMachinesMap,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_machineDefinition  &var_cas_outDefinition) {
  GGS_lstring  var_cas_machineIdentifier ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_machineIdf) ;
  var_cas_machineIdentifier.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
  GGS_uint  var_cas_machineInputVariableCount ;
  GGS_M_variablesMap  var_cas_machineVariablesMap ;
  GGS_luint  var_cas_indexOfImportedMachine ;
  searchKey_M_machinesMap (lexique_var_,
                                  var_cas_ioMachinesMap,
                                  var_cas_machineIdentifier,
                                  & var_cas_machineInputVariableCount,
                                  & var_cas_machineVariablesMap,
                                  NULL,
                                  & var_cas_indexOfImportedMachine) ;
  GGS_L_translationVector  var_cas_translationVector ;
  var_cas_translationVector = GGS_L_translationVector::constructor_empty () ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__28) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_inputVar ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_inputVar.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        GGS_luint  var_cas_inputVarIndex ;
        searchKey_M_variablesMap (lexique_var_,
                                        var_cas_ioVarMap,
                                        var_cas_inputVar,
                                        & var_cas_inputVarIndex) ;
        var_cas_translationVector.addAssign_operation (var_cas_inputVarIndex) ;
      switch (select_repeat_sara_parser_9 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__29) ;
  GGS_uint  var_cas_inputVariablesCount ;
  var_cas_inputVariablesCount = var_cas_translationVector.reader_length () ;
  if (((var_cas_inputVariablesCount) != (var_cas_machineInputVariableCount)).isBuiltAndTrue ()) {
      GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((((((((((GGS_string (true, "The '$")) + (var_cas_machineIdentifier.reader_value ()))) + (GGS_string (true, "' machine defines ")))) + (var_cas_machineInputVariableCount.reader_string ()))) + (GGS_string (true, " input variable(s), but this operand defines ")))) + (var_cas_inputVariablesCount.reader_string ()))) + (GGS_string (true, " input variable(s)")))) ;
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__28) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_outputVar ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_outputVar.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        GGS_luint  var_cas_outputVarIndex ;
        searchKey_M_variablesMap (lexique_var_,
                                        var_cas_ioVarMap,
                                        var_cas_outputVar,
                                        & var_cas_outputVarIndex) ;
        var_cas_translationVector.addAssign_operation (var_cas_outputVarIndex) ;
      switch (select_repeat_sara_parser_10 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__29) ;
  GGS_uint  var_cas_allVariablesCount ;
  var_cas_allVariablesCount = var_cas_translationVector.reader_length () ;
  GGS_uint  var_cas_machineAllVariablesCount ;
  var_cas_machineAllVariablesCount = var_cas_machineVariablesMap.reader_length () ;
  if (((var_cas_allVariablesCount) != (var_cas_machineAllVariablesCount)).isBuiltAndTrue ()) {
      GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((((((((((GGS_string (true, "The '$")) + (var_cas_machineIdentifier.reader_value ()))) + (GGS_string (true, "' machine defines ")))) + (var_cas_machineAllVariablesCount.reader_string ()))) + (GGS_string (true, " variables, but this operand defines ")))) + (var_cas_allVariablesCount.reader_string ()))) + (GGS_string (true, " variables")))) ;
  }
  var_cas_outDefinition = GGS_C_importMachine::constructor_new (var_cas_indexOfImportedMachine.reader_value (), var_cas_translationVector) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'explicit_automaton'           *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_explicit_automaton_sara_parser_640_26_ (sara_scanner & lexique_var_,
                                GGS_M_variablesMap  &var_cas_variablesMap,
                                GGS_AC_machineDefinition  &var_cas_outDefinition) {
  GGS_M_stateMap  var_cas_statesMap ;
  var_cas_statesMap = GGS_M_stateMap::constructor_empty () ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList ;
  var_cas_stateDefinitionList = GGS_L_stateDefinition::constructor_empty () ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_auto) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7B) ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_state) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_stateName ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_stateName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        insertKey_M_stateMap (lexique_var_,
                                        var_cas_statesMap,
                                        var_cas_stateName,
                                        NULL) ;
      switch (select_repeat_sara_parser_11 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3B) ;
  GGS_L_statesDefinitionList  var_cas_initialStatesDefinitionList ;
  var_cas_initialStatesDefinitionList = GGS_L_statesDefinitionList::constructor_empty () ;
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_first) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_initialState ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_initialState.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        GGS_luint  var_cas_initialStateIndex ;
        searchKey_M_stateMap (lexique_var_,
                                        var_cas_statesMap,
                                        var_cas_initialState,
                                        & var_cas_initialStateIndex) ;
        var_cas_initialStatesDefinitionList.addAssign_operation (var_cas_initialStateIndex, GGS_location (lexique_var_)) ;
      switch (select_repeat_sara_parser_12 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3B) ;
  GGS_L_statesDefinitionList  var_cas_terminalStatesDefinitionList ;
  var_cas_terminalStatesDefinitionList = GGS_L_statesDefinitionList::constructor_empty () ;
  switch (select_sara_parser_13 (lexique_var_)) {
    case 1 : {
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_last) ;
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            GGS_lstring  var_cas_terminalState ;
            lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
            var_cas_terminalState.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
            GGS_luint  var_cas_terminalStateIndex ;
            searchKey_M_stateMap (lexique_var_,
                                            var_cas_statesMap,
                                            var_cas_terminalState,
                                            & var_cas_terminalStateIndex) ;
            var_cas_terminalStatesDefinitionList.addAssign_operation (var_cas_terminalStateIndex, GGS_location (lexique_var_)) ;
          switch (select_repeat_sara_parser_14 (lexique_var_)) {
            case 2 : {
              lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__2C) ;
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3B) ;
      } break ;
    default :
      break ;
  }
  GGS_M_stateMap  var_cas_stateDefinitionMap ;
  var_cas_stateDefinitionMap = GGS_M_stateMap::constructor_empty () ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_stateName ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
        var_cas_stateName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
        GGS_luint  var_cas_stateIndex ;
        searchKey_M_stateMap (lexique_var_,
                                        var_cas_statesMap,
                                        var_cas_stateName,
                                        & var_cas_stateIndex) ;
        defineState_M_stateMap (lexique_var_,
                                        var_cas_stateDefinitionMap,
                                        var_cas_stateName,
                                        NULL) ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3A) ;
        GGS_AC_expression  var_cas_stateExpression ;
        nt_io_expression_ (lexique_var_, var_cas_variablesMap, var_cas_stateExpression) ;
        GGS_location  var_cas_endOfStateExpression ;
        var_cas_endOfStateExpression = GGS_location (lexique_var_) ;
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7B) ;
        GGS_L_transitionDefinition  var_cas_transitionsList ;
        var_cas_transitionsList = GGS_L_transitionDefinition::constructor_empty () ;
        { bool syntaxRepeat = true ;
          while (syntaxRepeat) {
            switch (select_repeat_sara_parser_16 (lexique_var_)) {
              case 2 : {
                GGS_AC_expression  var_cas_transitionInputExpression ;
                nt_io_expression_ (lexique_var_, var_cas_variablesMap, var_cas_transitionInputExpression) ;
                GGS_location  var_cas_endOfExpression ;
                var_cas_endOfExpression = GGS_location (lexique_var_) ;
                lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_goto) ;
                GGS_lstring  var_cas_targetStateName ;
                lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1_identifier) ;
                var_cas_targetStateName.defineAttribute (lexique_var_.identifierString, lexique_var_) ;
                GGS_luint  var_cas_targetStateIndex ;
                searchKey_M_stateMap (lexique_var_,
                                                var_cas_statesMap,
                                                var_cas_targetStateName,
                                                & var_cas_targetStateIndex) ;
                var_cas_transitionsList.addAssign_operation (var_cas_transitionInputExpression, var_cas_endOfExpression, var_cas_targetStateIndex) ;
                lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__3B) ;
                } break ;
              default :
                syntaxRepeat = false ;
                break ;
            }
          }
        }
        lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7D) ;
        var_cas_stateDefinitionList.addAssign_operation (var_cas_stateIndex, var_cas_stateExpression, var_cas_endOfStateExpression, var_cas_transitionsList) ;
      switch (select_repeat_sara_parser_15 (lexique_var_)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_M_stateMap::element_type * operand_24354 = var_cas_statesMap.getFirstItem () ;
  while (operand_24354 != NULL) {
    macroValidPointer (operand_24354) ;
    if (((! var_cas_stateDefinitionMap.reader_hasKey (operand_24354->mKey))).isBuiltAndTrue ()) {
        GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((GGS_string (true, "'")) + (operand_24354->mKey.reader_value ()))) + (GGS_string (true, "' state is not described")))) ;
    }
    operand_24354 = operand_24354->getNextItem () ;
  }
  lexique_var_.acceptTerminal (sara_scanner::sara_scanner_1__7D) ;
  var_cas_outDefinition = GGS_C_explicitAutomatonDefinition::constructor_new (var_cas_statesMap, var_cas_initialStatesDefinitionList, var_cas_terminalStatesDefinitionList, var_cas_stateDefinitionList, GGS_location (lexique_var_)) ;
}

//---------------------------------------------------------------------------*

