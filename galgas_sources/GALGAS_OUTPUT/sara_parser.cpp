//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'sara_parser.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 7th, 2009, at 14h55'16"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "sara_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "sara_parser.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_start_symbol_sara_parser_72_19_ (sara_scanner & inLexique) {
  GGS_semanticContext var_cas_semanticContext = GGS_semanticContext::constructor_new (GGS_L_jobList ::constructor_emptyList (), GGS_M_machinesMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        nt_component_ (inLexique, var_cas_semanticContext) ;
      switch (select_repeat_sara_parser_0 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  if (var_cas_semanticContext.reader_componentsMap (inLexique COMMA_SOURCE_FILE_AT_LINE (82)).isBuilt ()) {
    ::routine_performComputations (inLexique,  var_cas_semanticContext.reader_componentsMap (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) COMMA_SOURCE_FILE_AT_LINE (82)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_87_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  GGS_M_variablesMap  var_cas_variablesMap = GGS_M_variablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_stateMap  var_cas_statesMap = GGS_M_stateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList = GGS_L_stateDefinition ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_check) COMMA_HERE) ;
  GGS_lstring  var_cas_machineName ;
  inLexique.assignFromAttribute_identifierString (var_cas_machineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_machineIdf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_luint  var_cas_machineIndex ;
  GGS_uint  automatic_var_0 ;
  GGS_uint  automatic_var_1 ;
  GGS_M_variablesMap  automatic_var_2 ;
  const GGS_M_machinesMap  temp_2901 = var_cas_ioSemanticContext.reader_machinesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (100)) ;
  if (temp_2901.isBuilt ()) {
    temp_2901 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_machineName, var_cas_machineIndex, automatic_var_0, automatic_var_1, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (100)) ;
  }
  GGS_AC_job  var_cas_job = GGS_C_machineCheck ::constructor_new (inLexique, var_cas_machineIndex, GGS_bool (false) COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_108_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  GGS_M_variablesMap  var_cas_variablesMap = GGS_M_variablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_stateMap  var_cas_statesMap = GGS_M_stateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList = GGS_L_stateDefinition ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_checkidentical) COMMA_HERE) ;
  GGS_lstring  var_cas_machineName1 ;
  inLexique.assignFromAttribute_identifierString (var_cas_machineName1) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_machineIdf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
  GGS_lstring  var_cas_machineName2 ;
  inLexique.assignFromAttribute_identifierString (var_cas_machineName2) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_machineIdf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_luint  var_cas_machineIndex1 ;
  GGS_uint  automatic_var_3 ;
  GGS_uint  automatic_var_4 ;
  GGS_M_variablesMap  automatic_var_5 ;
  const GGS_M_machinesMap  temp_3648 = var_cas_ioSemanticContext.reader_machinesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (124)) ;
  if (temp_3648.isBuilt ()) {
    temp_3648 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_machineName1, var_cas_machineIndex1, automatic_var_3, automatic_var_4, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (124)) ;
  }
  GGS_luint  var_cas_machineIndex2 ;
  GGS_uint  automatic_var_6 ;
  GGS_uint  automatic_var_7 ;
  GGS_M_variablesMap  automatic_var_8 ;
  const GGS_M_machinesMap  temp_3804 = var_cas_ioSemanticContext.reader_machinesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ;
  if (temp_3804.isBuilt ()) {
    temp_3804 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_machineName2, var_cas_machineIndex2, automatic_var_6, automatic_var_7, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (127)) ;
  }
  GGS_AC_job  var_cas_job = GGS_C_machineCheckIdentical ::constructor_new (inLexique, var_cas_machineIndex1, var_cas_machineIndex2 COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_135_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  GGS_M_variablesMap  var_cas_variablesMap = GGS_M_variablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_stateMap  var_cas_statesMap = GGS_M_stateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList = GGS_L_stateDefinition ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_checkbool) COMMA_HERE) ;
  GGS_lstring  var_cas_machineName ;
  inLexique.assignFromAttribute_identifierString (var_cas_machineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_machineIdf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_luint  var_cas_machineIndex ;
  GGS_uint  automatic_var_9 ;
  GGS_uint  automatic_var_10 ;
  GGS_M_variablesMap  automatic_var_11 ;
  const GGS_M_machinesMap  temp_4497 = var_cas_ioSemanticContext.reader_machinesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ;
  if (temp_4497.isBuilt ()) {
    temp_4497 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_machineName, var_cas_machineIndex, automatic_var_9, automatic_var_10, automatic_var_11 COMMA_SOURCE_FILE_AT_LINE (148)) ;
  }
  GGS_AC_job  var_cas_job = GGS_C_machineCheck ::constructor_new (inLexique, var_cas_machineIndex, GGS_bool (true) COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_156_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_use_5F_and) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_job  var_cas_job = GGS_typeUse_AND ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_167_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_use_5F_ite) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_job  var_cas_job = GGS_typeUse_ITE ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_178_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_use_5F_and_5F_ite) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_job  var_cas_job = GGS_typeUse_AND_ITE ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_189_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_and_5F_cache) COMMA_HERE) ;
  GGS_luint  var_cas_size ;
  inLexique.assignFromAttribute_ulongValue (var_cas_size) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_literal_5F_integer) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_job  var_cas_job = GGS_typeResize_AND_cache ::constructor_new (inLexique, var_cas_size COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_201_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_ite_5F_cache) COMMA_HERE) ;
  GGS_luint  var_cas_size ;
  inLexique.assignFromAttribute_ulongValue (var_cas_size) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_literal_5F_integer) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_job  var_cas_job = GGS_typeResize_ITE_cache ::constructor_new (inLexique, var_cas_size COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_214_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_map) COMMA_HERE) ;
  GGS_luint  var_cas_size ;
  inLexique.assignFromAttribute_ulongValue (var_cas_size) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_literal_5F_integer) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_job  var_cas_job = GGS_typeResizeMap ::constructor_new (inLexique, var_cas_size COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_227_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_bdd) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_job  var_cas_job = GGS_typeDisplayBDDstats ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_job) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_238_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  GGS_M_variablesMap  var_cas_variablesMap = GGS_M_variablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_stateMap  var_cas_statesMap = GGS_M_stateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList = GGS_L_stateDefinition ::constructor_emptyList () ;
  GGS_lstring  var_cas_machineName ;
  inLexique.assignFromAttribute_identifierString (var_cas_machineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_machineIdf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        GGS_lstring  var_cas_inputVarName ;
        inLexique.assignFromAttribute_identifierString (var_cas_inputVarName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_inputVarName COMMA_SOURCE_FILE_AT_LINE (252)) ;
      switch (select_repeat_sara_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  GGS_uint  var_cas_inputVariablesCount = var_cas_variablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  switch (select_sara_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_3 = true ;
        while (syntaxRepeat_3) {
            GGS_lstring  var_cas_outputVarName ;
            inLexique.assignFromAttribute_identifierString (var_cas_outputVarName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
            var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_outputVarName COMMA_SOURCE_FILE_AT_LINE (265)) ;
          switch (select_repeat_sara_parser_3 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_3 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_inputAndInternalVariablesCount = var_cas_variablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (271)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        GGS_lstring  var_cas_outputVarName ;
        inLexique.assignFromAttribute_identifierString (var_cas_outputVarName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_outputVarName COMMA_SOURCE_FILE_AT_LINE (277)) ;
      switch (select_repeat_sara_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_AC_machineDefinition  var_cas_definition ;
  nt_definition_expression_ (inLexique, var_cas_ioSemanticContext, var_cas_variablesMap, var_cas_definition) ;
  GGS_luint  var_cas_machineIndex ;
  var_cas_ioSemanticContext.machinesMap.modifier_insertKeyGetIndex (inLexique, var_cas_machineName, var_cas_machineIndex, var_cas_inputVariablesCount, var_cas_inputAndInternalVariablesCount, var_cas_variablesMap COMMA_SOURCE_FILE_AT_LINE (288)) ;
  GGS_AC_job  var_cas_machine = GGS_C_machineComponent ::constructor_new (inLexique, var_cas_machineName, var_cas_machineIndex, var_cas_inputVariablesCount, var_cas_inputAndInternalVariablesCount, var_cas_variablesMap, var_cas_definition COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_machine) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_297_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  GGS_M_variablesMap  var_cas_variablesMap = GGS_M_variablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_stateMap  var_cas_statesMap = GGS_M_stateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList = GGS_L_stateDefinition ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_modalcompadd) COMMA_HERE) ;
  GGS_lstring  var_cas_machineName ;
  inLexique.assignFromAttribute_identifierString (var_cas_machineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_machineIdf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        GGS_lstring  var_cas_inputVarName ;
        inLexique.assignFromAttribute_identifierString (var_cas_inputVarName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_inputVarName COMMA_SOURCE_FILE_AT_LINE (312)) ;
      switch (select_repeat_sara_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  GGS_uint  var_cas_inputVariablesCount = var_cas_variablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (316)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  switch (select_sara_parser_6 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_7 = true ;
        while (syntaxRepeat_7) {
            GGS_lstring  var_cas_outputVarName ;
            inLexique.assignFromAttribute_identifierString (var_cas_outputVarName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
            var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_outputVarName COMMA_SOURCE_FILE_AT_LINE (325)) ;
          switch (select_repeat_sara_parser_7 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_7 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_inputAndInternalVariablesCount = var_cas_variablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (331)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        GGS_lstring  var_cas_outputVarName ;
        inLexique.assignFromAttribute_identifierString (var_cas_outputVarName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_outputVarName COMMA_SOURCE_FILE_AT_LINE (337)) ;
      switch (select_repeat_sara_parser_8 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_M_modesMap  var_cas_modeMap ;
  GGS_ListForModes  var_cas_inclusionList ;
  nt_modalcompadd_definition_ (inLexique, var_cas_ioSemanticContext, var_cas_variablesMap, var_cas_modeMap, var_cas_inclusionList) ;
  GGS_luint  var_cas_machineIndex ;
  var_cas_ioSemanticContext.machinesMap.modifier_insertKeyGetIndex (inLexique, var_cas_machineName, var_cas_machineIndex, var_cas_inputVariablesCount, var_cas_inputAndInternalVariablesCount, var_cas_variablesMap COMMA_SOURCE_FILE_AT_LINE (354)) ;
  GGS_AC_job  var_cas_machine = GGS_C_machineDefinedByAdditiveModalComp ::constructor_new (inLexique, var_cas_machineName, var_cas_machineIndex, var_cas_inputVariablesCount, var_cas_inputAndInternalVariablesCount, var_cas_variablesMap, var_cas_modeMap, var_cas_inclusionList COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_machine) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_371_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  GGS_M_variablesMap  var_cas_variablesMap = GGS_M_variablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_stateMap  var_cas_statesMap = GGS_M_stateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList = GGS_L_stateDefinition ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_modalcompsub) COMMA_HERE) ;
  GGS_lstring  var_cas_machineName ;
  inLexique.assignFromAttribute_identifierString (var_cas_machineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_machineIdf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        GGS_lstring  var_cas_inputVarName ;
        inLexique.assignFromAttribute_identifierString (var_cas_inputVarName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_inputVarName COMMA_SOURCE_FILE_AT_LINE (386)) ;
      switch (select_repeat_sara_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  GGS_uint  var_cas_inputVariablesCount = var_cas_variablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (390)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  switch (select_sara_parser_10 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_11 = true ;
        while (syntaxRepeat_11) {
            GGS_lstring  var_cas_outputVarName ;
            inLexique.assignFromAttribute_identifierString (var_cas_outputVarName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
            var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_outputVarName COMMA_SOURCE_FILE_AT_LINE (399)) ;
          switch (select_repeat_sara_parser_11 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_11 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_inputAndInternalVariablesCount = var_cas_variablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (405)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
        GGS_lstring  var_cas_outputVarName ;
        inLexique.assignFromAttribute_identifierString (var_cas_outputVarName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_outputVarName COMMA_SOURCE_FILE_AT_LINE (411)) ;
      switch (select_repeat_sara_parser_12 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_M_modesMap  var_cas_modeMap ;
  GGS_ListForModes  var_cas_exclusionList ;
  nt_modalcompsub_definition_ (inLexique, var_cas_ioSemanticContext, var_cas_variablesMap, var_cas_modeMap, var_cas_exclusionList) ;
  GGS_luint  var_cas_machineIndex ;
  var_cas_ioSemanticContext.machinesMap.modifier_insertKeyGetIndex (inLexique, var_cas_machineName, var_cas_machineIndex, var_cas_inputVariablesCount, var_cas_inputAndInternalVariablesCount, var_cas_variablesMap COMMA_SOURCE_FILE_AT_LINE (428)) ;
  GGS_AC_job  var_cas_machine = GGS_C_machineDefinedBySubstractiveModalComp ::constructor_new (inLexique, var_cas_machineName, var_cas_machineIndex, var_cas_inputVariablesCount, var_cas_inputAndInternalVariablesCount, var_cas_variablesMap, var_cas_modeMap, var_cas_exclusionList COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_machine) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'component'                *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_component_sara_parser_443_16_ (sara_scanner & inLexique,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_scenario) COMMA_HERE) ;
  GGS_M_variablesMap  var_cas_variablesMap = GGS_M_variablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_stateMap  var_cas_statesMap = GGS_M_stateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList = GGS_L_stateDefinition ::constructor_emptyList () ;
  GGS_lstring  var_cas_machineName ;
  inLexique.assignFromAttribute_identifierString (var_cas_machineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_machineIdf) COMMA_HERE) ;
  GGS_luint  var_cas_machineIndex ;
  GGS_uint  var_cas_inputVariablesCountFromDefinition ;
  GGS_uint  var_cas_inputAndInternalVariablesCountFromDefinition ;
  GGS_M_variablesMap  var_cas_variablesMapFromDefinition ;
  const GGS_M_machinesMap  temp_12639 = var_cas_ioSemanticContext.reader_machinesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (458)) ;
  if (temp_12639.isBuilt ()) {
    temp_12639 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_machineName, var_cas_machineIndex, var_cas_inputVariablesCountFromDefinition, var_cas_inputAndInternalVariablesCountFromDefinition, var_cas_variablesMapFromDefinition COMMA_SOURCE_FILE_AT_LINE (458)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
        GGS_lstring  var_cas_inputVarName ;
        inLexique.assignFromAttribute_identifierString (var_cas_inputVarName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_inputVarName COMMA_SOURCE_FILE_AT_LINE (464)) ;
      switch (select_repeat_sara_parser_13 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  GGS_uint  var_cas_inputVariablesCount = var_cas_variablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (468)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  const GGS_bool cond_13348 = (var_cas_inputVariablesCountFromDefinition).operator_isNotEqual (var_cas_inputVariablesCount) ;
  if (cond_13348.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("This declaration names ")).operator_concat (var_cas_inputVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (472)))).operator_concat (GGS_string (" input variable(s), but machine definition names "))).operator_concat (var_cas_inputVariablesCountFromDefinition.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (473)))).operator_concat (GGS_string (" input variable(s)")) COMMA_SOURCE_FILE_AT_LINE (474)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  switch (select_sara_parser_14 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_15 = true ;
        while (syntaxRepeat_15) {
            GGS_lstring  var_cas_outputVarName ;
            inLexique.assignFromAttribute_identifierString (var_cas_outputVarName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
            var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_outputVarName COMMA_SOURCE_FILE_AT_LINE (482)) ;
          switch (select_repeat_sara_parser_15 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_15 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_inputAndInternalVariablesCount = var_cas_variablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (489)) ;
  const GGS_bool cond_14056 = (var_cas_inputAndInternalVariablesCountFromDefinition).operator_isNotEqual (var_cas_inputAndInternalVariablesCount) ;
  if (cond_14056.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("This declaration names ")).operator_concat (var_cas_inputAndInternalVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (491)))).operator_concat (GGS_string (" input and internal variable(s), but machine definition names "))).operator_concat (var_cas_inputAndInternalVariablesCountFromDefinition.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (492)))).operator_concat (GGS_string (" input and internal variable(s)")) COMMA_SOURCE_FILE_AT_LINE (493)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_16 = true ;
    while (syntaxRepeat_16) {
        GGS_lstring  var_cas_outputVarName ;
        inLexique.assignFromAttribute_identifierString (var_cas_outputVarName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        var_cas_variablesMap.modifier_insertKey (inLexique, var_cas_outputVarName COMMA_SOURCE_FILE_AT_LINE (499)) ;
      switch (select_repeat_sara_parser_16 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_16 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_outputVariablesCount = var_cas_variablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (505)) ;
  GGS_uint  var_cas_outputVariablesCountFromDefinition = var_cas_variablesMapFromDefinition.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (506)) ;
  const GGS_bool cond_14710 = (var_cas_outputVariablesCountFromDefinition).operator_isNotEqual (var_cas_outputVariablesCount) ;
  if (cond_14710.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("This declaration names ")).operator_concat (var_cas_outputVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (508)))).operator_concat (GGS_string (" variables, but machine definition names "))).operator_concat (var_cas_outputVariablesCountFromDefinition.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (509)))).operator_concat (GGS_string (" variables")) COMMA_SOURCE_FILE_AT_LINE (510)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7B_) COMMA_HERE) ;
  GGS_L_scenarioList  var_cas_scenarioList = GGS_L_scenarioList ::constructor_emptyList () ;
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        GGS_lstring  var_cas_scenarioTitle ;
        inLexique.assignFromAttribute_identifierString (var_cas_scenarioTitle) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_literal_5F_string) COMMA_HERE) ;
        GGS_L_inputScenario  var_cas_inputScenario = GGS_L_inputScenario ::constructor_emptyList () ;
        { bool syntaxRepeat_18 = true ;
          while (syntaxRepeat_18) {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_inputConfigurationForScenario  var_cas_inputConfigurationForScenario = GGS_L_inputConfigurationForScenario ::constructor_emptyList () ;
              { bool syntaxRepeat_19 = true ;
                while (syntaxRepeat_19) {
                    GGS_luint  var_cas_v ;
                    inLexique.assignFromAttribute_ulongValue (var_cas_v) ;
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_literal_5F_integer) COMMA_HERE) ;
                    const GGS_bool cond_15159 = (var_cas_v.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (523))).operator_strictSup (GGS_uint (1U)) ;
                    if (cond_15159.isBuiltAndTrue ()) {
                      var_cas_v.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this value is not a  binary digit") COMMA_SOURCE_FILE_AT_LINE (525)) ;
                    }
                    var_cas_inputConfigurationForScenario.addAssign_operation (var_cas_v) ;
                  switch (select_repeat_sara_parser_19 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_19 = false ;
                      break ;
                  }
                }
              }
              const GGS_bool cond_15513 = (var_cas_inputVariablesCount).operator_isNotEqual (var_cas_inputConfigurationForScenario.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (530))) ;
              if (cond_15513.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this input configuration names ")).operator_concat (var_cas_inputConfigurationForScenario.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (531)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (531)))).operator_concat (GGS_string (" input variable(s), instead of "))).operator_concat (var_cas_inputVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (531))) COMMA_SOURCE_FILE_AT_LINE (532)) ;
              }
              var_cas_inputScenario.addAssign_operation (var_cas_inputConfigurationForScenario) ;
            switch (select_repeat_sara_parser_18 (inLexique)) {
              case 2 : {
                } break ;
              default :
                syntaxRepeat_18 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
        var_cas_scenarioList.addAssign_operation (var_cas_scenarioTitle, var_cas_inputScenario) ;
      switch (select_repeat_sara_parser_17 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7D_) COMMA_HERE) ;
  GGS_AC_job  var_cas_machine = GGS_C_scenarioComponent ::constructor_new (inLexique, var_cas_machineIndex, var_cas_inputVariablesCount, var_cas_inputAndInternalVariablesCount, var_cas_variablesMap, var_cas_scenarioList COMMA_HERE) ;
  var_cas_ioSemanticContext.componentsMap.addAssign_operation (var_cas_machine) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'io_bool_expression'           *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_bool_expression_sara_parser_548_25_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_boolExpression  &var_cas_outExpression) {
  nt_io_and_expression_ (inLexique, var_cas_inSemanticContext, var_cas_ioVarMap, var_cas_outExpression) ;
  { bool syntaxRepeat_20 = true ;
    while (syntaxRepeat_20) {
      switch (select_repeat_sara_parser_20 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7C_) COMMA_HERE) ;
          GGS_AC_boolExpression  var_cas_rightExpression ;
          nt_io_and_expression_ (inLexique, var_cas_inSemanticContext, var_cas_ioVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_orExpression ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__5E_) COMMA_HERE) ;
          GGS_AC_boolExpression  var_cas_rightExpression ;
          nt_io_and_expression_ (inLexique, var_cas_inSemanticContext, var_cas_ioVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_xorExpression ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2D__3E_) COMMA_HERE) ;
          GGS_AC_boolExpression  var_cas_rightExpression ;
          nt_io_and_expression_ (inLexique, var_cas_inSemanticContext, var_cas_ioVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_impliesExpression ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3D_) COMMA_HERE) ;
          GGS_AC_boolExpression  var_cas_rightExpression ;
          nt_io_and_expression_ (inLexique, var_cas_inSemanticContext, var_cas_ioVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_equalExpression ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_20 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'io_and_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_and_expression_sara_parser_580_24_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_boolExpression  &var_cas_outExpression) {
  nt_io_primary_ (inLexique, var_cas_inSemanticContext, var_cas_ioVarMap, var_cas_outExpression) ;
  { bool syntaxRepeat_21 = true ;
    while (syntaxRepeat_21) {
      switch (select_repeat_sara_parser_21 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__26_) COMMA_HERE) ;
          GGS_AC_boolExpression  var_cas_rightExpression ;
          nt_io_primary_ (inLexique, var_cas_inSemanticContext, var_cas_ioVarMap, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_C_andExpression ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_21 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_597_17_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_boolExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  nt_io_bool_expression_ (inLexique, var_cas_inSemanticContext, var_cas_ioVarMap, var_cas_outExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_609_17_ (sara_scanner & inLexique,
                                const GGS_semanticContext /* var_cas_inSemanticContext */,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_boolExpression  &var_cas_outExpression) {
  GGS_lstring  var_cas_inputVarName ;
  inLexique.assignFromAttribute_identifierString (var_cas_inputVarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_inputVarIndex ;
  const GGS_M_variablesMap  temp_18238 = var_cas_ioVarMap ;
  if (temp_18238.isBuilt ()) {
    temp_18238 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_inputVarName, var_cas_inputVarIndex COMMA_SOURCE_FILE_AT_LINE (617)) ;
  }
  var_cas_outExpression = GGS_C_VariableExpression ::constructor_new (inLexique, var_cas_inputVarIndex COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_623_17_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_boolExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7E_) COMMA_HERE) ;
  GGS_AC_boolExpression  var_cas_expression ;
  nt_io_primary_ (inLexique, var_cas_inSemanticContext, var_cas_ioVarMap, var_cas_expression) ;
  var_cas_outExpression = GGS_C_notExpression ::constructor_new (inLexique, var_cas_expression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_636_17_ (sara_scanner & inLexique,
                                const GGS_semanticContext /* var_cas_inSemanticContext */,
                                GGS_M_variablesMap  &/* var_cas_ioVarMap */,
                                GGS_AC_boolExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_C_falseExpression ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_647_17_ (sara_scanner & inLexique,
                                const GGS_semanticContext /* var_cas_inSemanticContext */,
                                GGS_M_variablesMap  &/* var_cas_ioVarMap */,
                                GGS_AC_boolExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_C_trueExpression ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'io_primary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_io_primary_sara_parser_658_17_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_boolExpression  &var_cas_outExpression) {
  GGS_lstring  var_cas_machineIdentifier ;
  inLexique.assignFromAttribute_identifierString (var_cas_machineIdentifier) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_machineIdf) COMMA_HERE) ;
  GGS_uint  var_cas_machineInputVariableCount ;
  GGS_uint  var_cas_machineInputAndInternalVariableCount ;
  GGS_M_variablesMap  var_cas_machineVariablesMap ;
  GGS_luint  var_cas_indexOfImportedMachine ;
  const GGS_M_machinesMap  temp_19777 = var_cas_inSemanticContext.reader_machinesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (669)) ;
  if (temp_19777.isBuilt ()) {
    temp_19777 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_machineIdentifier, var_cas_indexOfImportedMachine, var_cas_machineInputVariableCount, var_cas_machineInputAndInternalVariableCount, var_cas_machineVariablesMap COMMA_SOURCE_FILE_AT_LINE (669)) ;
  }
  GGS_L_translationVector  var_cas_translationVector = GGS_L_translationVector ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
        GGS_lstring  var_cas_inputVar ;
        inLexique.assignFromAttribute_identifierString (var_cas_inputVar) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        GGS_luint  var_cas_inputVarIndex ;
        const GGS_M_variablesMap  temp_20121 = var_cas_ioVarMap ;
        if (temp_20121.isBuilt ()) {
          temp_20121 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_inputVar, var_cas_inputVarIndex COMMA_SOURCE_FILE_AT_LINE (677)) ;
        }
        var_cas_translationVector.addAssign_operation (var_cas_inputVarIndex) ;
      switch (select_repeat_sara_parser_22 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_inputVariablesCount = var_cas_translationVector.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (683)) ;
  const GGS_bool cond_20573 = (var_cas_inputVariablesCount).operator_isNotEqual (var_cas_machineInputVariableCount) ;
  if (cond_20573.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("The '$")).operator_concat (var_cas_machineIdentifier)).operator_concat (GGS_string ("' machine defines "))).operator_concat (var_cas_machineInputVariableCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (685)))).operator_concat (GGS_string (" input variable(s), but this operand defines "))).operator_concat (var_cas_inputVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (686)))).operator_concat (GGS_string (" input variable(s)")) COMMA_SOURCE_FILE_AT_LINE (687)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  switch (select_sara_parser_23 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_24 = true ;
        while (syntaxRepeat_24) {
            GGS_lstring  var_cas_internalVar ;
            inLexique.assignFromAttribute_identifierString (var_cas_internalVar) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
            GGS_luint  var_cas_internalVarIndex ;
            const GGS_M_variablesMap  temp_20771 = var_cas_ioVarMap ;
            if (temp_20771.isBuilt ()) {
              temp_20771 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_internalVar, var_cas_internalVarIndex COMMA_SOURCE_FILE_AT_LINE (696)) ;
            }
            var_cas_translationVector.addAssign_operation (var_cas_internalVarIndex) ;
          switch (select_repeat_sara_parser_24 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_24 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_inputAndInternalVariablesCount = var_cas_translationVector.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (703)) ;
  const GGS_bool cond_21346 = (var_cas_inputAndInternalVariablesCount).operator_isNotEqual (var_cas_machineInputAndInternalVariableCount) ;
  if (cond_21346.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("The '$")).operator_concat (var_cas_machineIdentifier.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (705)))).operator_concat (GGS_string ("' machine defines "))).operator_concat (var_cas_machineInputAndInternalVariableCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (705)))).operator_concat (GGS_string (" input and internal variable(s), but this operand defines "))).operator_concat (var_cas_inputAndInternalVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (706)))).operator_concat (GGS_string (" input and internal variable(s)")) COMMA_SOURCE_FILE_AT_LINE (707)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
        GGS_lstring  var_cas_outputVar ;
        inLexique.assignFromAttribute_identifierString (var_cas_outputVar) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        GGS_luint  var_cas_outputVarIndex ;
        const GGS_M_variablesMap  temp_21512 = var_cas_ioVarMap ;
        if (temp_21512.isBuilt ()) {
          temp_21512 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_outputVar, var_cas_outputVarIndex COMMA_SOURCE_FILE_AT_LINE (714)) ;
        }
        var_cas_translationVector.addAssign_operation (var_cas_outputVarIndex) ;
      switch (select_repeat_sara_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_allVariablesCount = var_cas_translationVector.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (720)) ;
  GGS_uint  var_cas_machineAllVariablesCount = var_cas_machineVariablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (721)) ;
  const GGS_bool cond_22018 = (var_cas_allVariablesCount).operator_isNotEqual (var_cas_machineAllVariablesCount) ;
  if (cond_22018.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("The '$")).operator_concat (var_cas_machineIdentifier.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (723)))).operator_concat (GGS_string ("' machine defines "))).operator_concat (var_cas_machineAllVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (723)))).operator_concat (GGS_string (" variables, but this operand defines "))).operator_concat (var_cas_allVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (724)))).operator_concat (GGS_string (" variables")) COMMA_SOURCE_FILE_AT_LINE (725)) ;
  }
  var_cas_outExpression = GGS_C_importBoolMachine ::constructor_new (inLexique, var_cas_indexOfImportedMachine.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (727)), var_cas_machineIdentifier.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (728)), var_cas_translationVector COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'definition_expression'          *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_definition_expression_sara_parser_737_28_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_variablesMap,
                                GGS_AC_machineDefinition  &var_cas_outDefinition) {
  nt_definition_expression_term_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_outDefinition) ;
  { bool syntaxRepeat_26 = true ;
    while (syntaxRepeat_26) {
      switch (select_repeat_sara_parser_26 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2B_) COMMA_HERE) ;
          GGS_AC_machineDefinition  var_cas_leftOperand = var_cas_outDefinition ;
          GGS_AC_machineDefinition  var_cas_rightOperand ;
          nt_definition_expression_term_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_rightOperand) ;
          var_cas_outDefinition = GGS_C_orComposition ::constructor_new (inLexique, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_26 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'definition_expression_term'       *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_definition_expression_term_sara_parser_755_33_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_variablesMap,
                                GGS_AC_machineDefinition  &var_cas_outDefinition) {
  nt_definition_expression_factor_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_outDefinition) ;
  { bool syntaxRepeat_27 = true ;
    while (syntaxRepeat_27) {
      switch (select_repeat_sara_parser_27 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2A_) COMMA_HERE) ;
          GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
          GGS_AC_machineDefinition  var_cas_leftOperand = var_cas_outDefinition ;
          GGS_AC_machineDefinition  var_cas_rightOperand ;
          nt_definition_expression_factor_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_rightOperand) ;
          var_cas_outDefinition = GGS_C_strongModalComposition ::constructor_new (inLexique, var_cas_leftOperand, var_cas_errorLocation, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2A__2A_) COMMA_HERE) ;
          GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
          GGS_AC_machineDefinition  var_cas_leftOperand = var_cas_outDefinition ;
          GGS_AC_machineDefinition  var_cas_rightOperand ;
          nt_definition_expression_factor_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_rightOperand) ;
          var_cas_outDefinition = GGS_C_weakModalComposition ::constructor_new (inLexique, var_cas_leftOperand, var_cas_errorLocation, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7C__7C_) COMMA_HERE) ;
          GGS_AC_machineDefinition  var_cas_leftOperand = var_cas_outDefinition ;
          GGS_AC_machineDefinition  var_cas_rightOperand ;
          nt_definition_expression_factor_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_rightOperand) ;
          var_cas_outDefinition = GGS_C_parallelComposition ::constructor_new (inLexique, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_27 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'modalcompadd_definition'         *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_modalcompadd_definition_sara_parser_787_30_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_variablesMap,
                                GGS_M_modesMap  &var_cas_outModeMap,
                                GGS_ListForModes  &var_cas_outInclusionList) {
  var_cas_outModeMap = GGS_M_modesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outInclusionList = GGS_ListForModes ::constructor_emptyList () ;
  { bool syntaxRepeat_28 = true ;
    while (syntaxRepeat_28) {
        GGS_lstring  var_cas_modeName ;
        inLexique.assignFromAttribute_identifierString (var_cas_modeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3A_) COMMA_HERE) ;
        GGS_AC_machineDefinition  var_cas_def ;
        nt_definition_expression_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_def) ;
        var_cas_outModeMap.modifier_insertKey (inLexique, var_cas_modeName, var_cas_def COMMA_SOURCE_FILE_AT_LINE (801)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_sara_parser_28 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_28 = false ;
          break ;
      }
    }
  }
  { bool syntaxRepeat_29 = true ;
    while (syntaxRepeat_29) {
      switch (select_repeat_sara_parser_29 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_include) COMMA_HERE) ;
          GGS_lstring  var_cas_sourceModeName ;
          inLexique.assignFromAttribute_identifierString (var_cas_sourceModeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
          GGS_luint  var_cas_sourceModeIndex ;
          GGS_AC_machineDefinition  automatic_var_12 ;
          const GGS_M_modesMap  temp_24997 = var_cas_outModeMap ;
          if (temp_24997.isBuilt ()) {
            temp_24997 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_sourceModeName, var_cas_sourceModeIndex, automatic_var_12 COMMA_SOURCE_FILE_AT_LINE (811)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_to) COMMA_HERE) ;
          GGS_lstring  var_cas_targetModeName ;
          inLexique.assignFromAttribute_identifierString (var_cas_targetModeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
          GGS_luint  var_cas_targetModeIndex ;
          GGS_AC_machineDefinition  automatic_var_13 ;
          const GGS_M_modesMap  temp_25176 = var_cas_outModeMap ;
          if (temp_25176.isBuilt ()) {
            temp_25176 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_targetModeName, var_cas_targetModeIndex, automatic_var_13 COMMA_SOURCE_FILE_AT_LINE (816)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
          const GGS_bool cond_25452 = (var_cas_sourceModeIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (818))).operator_isEqual (var_cas_targetModeIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (818))) ;
          if (cond_25452.isBuiltAndTrue ()) {
            var_cas_targetModeIndex.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("unuseful include: 'modalcompadd' operator never adds transitions from terminal states to initial states of the same mode") COMMA_SOURCE_FILE_AT_LINE (819)) ;
          }else if (cond_25452.isBuiltAndFalse ()) {
            var_cas_outInclusionList.addAssign_operation (var_cas_sourceModeIndex, var_cas_targetModeIndex) ;
          }
          } break ;
        default :
          syntaxRepeat_29 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'modalcompsub_definition'         *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_modalcompsub_definition_sara_parser_828_30_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_variablesMap,
                                GGS_M_modesMap  &var_cas_outModeMap,
                                GGS_ListForModes  &var_cas_outExclusionList) {
  var_cas_outModeMap = GGS_M_modesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outExclusionList = GGS_ListForModes ::constructor_emptyList () ;
  { bool syntaxRepeat_30 = true ;
    while (syntaxRepeat_30) {
        GGS_lstring  var_cas_modeName ;
        inLexique.assignFromAttribute_identifierString (var_cas_modeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3A_) COMMA_HERE) ;
        GGS_AC_machineDefinition  var_cas_def ;
        nt_definition_expression_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_def) ;
        var_cas_outModeMap.modifier_insertKey (inLexique, var_cas_modeName, var_cas_def COMMA_SOURCE_FILE_AT_LINE (842)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_sara_parser_30 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_30 = false ;
          break ;
      }
    }
  }
  { bool syntaxRepeat_31 = true ;
    while (syntaxRepeat_31) {
      switch (select_repeat_sara_parser_31 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_exclude) COMMA_HERE) ;
          GGS_lstring  var_cas_sourceModeName ;
          inLexique.assignFromAttribute_identifierString (var_cas_sourceModeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
          GGS_luint  var_cas_sourceModeIndex ;
          GGS_AC_machineDefinition  automatic_var_14 ;
          const GGS_M_modesMap  temp_26304 = var_cas_outModeMap ;
          if (temp_26304.isBuilt ()) {
            temp_26304 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_sourceModeName, var_cas_sourceModeIndex, automatic_var_14 COMMA_SOURCE_FILE_AT_LINE (852)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_to) COMMA_HERE) ;
          GGS_lstring  var_cas_targetModeName ;
          inLexique.assignFromAttribute_identifierString (var_cas_targetModeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
          GGS_luint  var_cas_targetModeIndex ;
          GGS_AC_machineDefinition  automatic_var_15 ;
          const GGS_M_modesMap  temp_26483 = var_cas_outModeMap ;
          if (temp_26483.isBuilt ()) {
            temp_26483 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_targetModeName, var_cas_targetModeIndex, automatic_var_15 COMMA_SOURCE_FILE_AT_LINE (857)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
          const GGS_bool cond_26759 = (var_cas_sourceModeIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (859))).operator_isEqual (var_cas_targetModeIndex.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (859))) ;
          if (cond_26759.isBuiltAndTrue ()) {
            var_cas_targetModeIndex.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("unuseful include: 'modalcompadd' operator never adds transitions from terminal states to initial states of the same mode") COMMA_SOURCE_FILE_AT_LINE (860)) ;
          }else if (cond_26759.isBuiltAndFalse ()) {
            var_cas_outExclusionList.addAssign_operation (var_cas_sourceModeIndex, var_cas_targetModeIndex) ;
          }
          } break ;
        default :
          syntaxRepeat_31 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'definition_expression_factor'      *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_definition_expression_factor_sara_parser_869_35_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_variablesMap,
                                GGS_AC_machineDefinition  &var_cas_outDefinition) {
  switch (select_sara_parser_32 (inLexique)) {
    case 1 : {
      nt_explicit_automaton_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_outDefinition) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
      nt_definition_expression_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_outDefinition) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_M_variablesMap  var_cas_extendedVariablesMap = var_cas_variablesMap ;
      GGS_uint  var_cas_previousVariableCount = var_cas_extendedVariablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (882)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3F_) COMMA_HERE) ;
      { bool syntaxRepeat_33 = true ;
        while (syntaxRepeat_33) {
            GGS_lstring  var_cas_variableName ;
            inLexique.assignFromAttribute_identifierString (var_cas_variableName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
            var_cas_extendedVariablesMap.modifier_insertKey (inLexique, var_cas_variableName COMMA_SOURCE_FILE_AT_LINE (887)) ;
          switch (select_repeat_sara_parser_33 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_33 = false ;
              break ;
          }
        }
      }
      GGS_uint  var_cas_actualVariableCount = var_cas_extendedVariablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (891)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
      GGS_AC_machineDefinition  var_cas_def ;
      nt_definition_expression_ (inLexique, var_cas_inSemanticContext, var_cas_extendedVariablesMap, var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
      var_cas_outDefinition = GGS_C_existsDefinition ::constructor_new (inLexique, var_cas_previousVariableCount, var_cas_actualVariableCount, var_cas_def COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_M_variablesMap  var_cas_extendedVariablesMap = var_cas_variablesMap ;
      GGS_uint  var_cas_previousVariableCount = var_cas_extendedVariablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (899)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__21_) COMMA_HERE) ;
      { bool syntaxRepeat_34 = true ;
        while (syntaxRepeat_34) {
            GGS_lstring  var_cas_variableName ;
            inLexique.assignFromAttribute_identifierString (var_cas_variableName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
            var_cas_extendedVariablesMap.modifier_insertKey (inLexique, var_cas_variableName COMMA_SOURCE_FILE_AT_LINE (904)) ;
          switch (select_repeat_sara_parser_34 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_34 = false ;
              break ;
          }
        }
      }
      GGS_uint  var_cas_actualVariableCount = var_cas_extendedVariablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (908)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
      GGS_AC_machineDefinition  var_cas_def ;
      nt_definition_expression_ (inLexique, var_cas_inSemanticContext, var_cas_extendedVariablesMap, var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
      var_cas_outDefinition = GGS_C_forallDefinition ::constructor_new (inLexique, var_cas_previousVariableCount, var_cas_actualVariableCount, var_cas_def COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_bool) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7B_) COMMA_HERE) ;
      GGS_AC_boolExpression  var_cas_def ;
      nt_io_bool_expression_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_def) ;
      var_cas_outDefinition = GGS_C_boolToSeqExpression ::constructor_new (inLexique, var_cas_def COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__40_) COMMA_HERE) ;
      GGS_AC_machineDefinition  var_cas_def ;
      nt_definition_expression_factor_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_def) ;
      var_cas_outDefinition = GGS_C_fullSaturationOperation ::constructor_new (inLexique, var_cas_def COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7E_) COMMA_HERE) ;
      GGS_AC_machineDefinition  var_cas_def ;
      nt_definition_expression_factor_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_def) ;
      var_cas_outDefinition = GGS_C_complementationOperation ::constructor_new (inLexique, var_cas_def COMMA_HERE) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_nofirst) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
      GGS_AC_machineDefinition  var_cas_def ;
      nt_definition_expression_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_def) ;
      var_cas_outDefinition = GGS_C_suppressInitialStatesOperation ::constructor_new (inLexique, var_cas_def COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_nolast) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
      GGS_AC_machineDefinition  var_cas_def ;
      nt_definition_expression_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_def) ;
      var_cas_outDefinition = GGS_C_suppressTerminalStatesOperation ::constructor_new (inLexique, var_cas_def COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
      } break ;
    case 10 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_modalcompadd) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7B_) COMMA_HERE) ;
      GGS_M_modesMap  var_cas_modeMap ;
      GGS_ListForModes  var_cas_inclusionList ;
      nt_modalcompadd_definition_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_modeMap, var_cas_inclusionList) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7D_) COMMA_HERE) ;
      var_cas_outDefinition = GGS_C_additiveModalCompositionComponent ::constructor_new (inLexique, var_cas_modeMap, var_cas_inclusionList COMMA_HERE) ;
      } break ;
    case 11 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_modalcompsub) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7B_) COMMA_HERE) ;
      GGS_M_modesMap  var_cas_modeMap ;
      GGS_ListForModes  var_cas_exclusionList ;
      nt_modalcompsub_definition_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_modeMap, var_cas_exclusionList) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7D_) COMMA_HERE) ;
      var_cas_outDefinition = GGS_C_substractiveModalCompositionComponent ::constructor_new (inLexique, var_cas_modeMap, var_cas_exclusionList COMMA_HERE) ;
      } break ;
    case 12 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_trans) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7B_) COMMA_HERE) ;
      GGS_AC_boolExpression  var_cas_sourceExpression ;
      nt_io_bool_expression_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_sourceExpression) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_to) COMMA_HERE) ;
      GGS_AC_boolExpression  var_cas_targetExpression ;
      nt_io_bool_expression_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_targetExpression) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7D_) COMMA_HERE) ;
      var_cas_outDefinition = GGS_C_trans ::constructor_new (inLexique, var_cas_sourceExpression, var_cas_targetExpression COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'definition_expression_factor'      *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_definition_expression_factor_sara_parser_986_35_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_ioVarMap,
                                GGS_AC_machineDefinition  &var_cas_outDefinition) {
  GGS_lstring  var_cas_machineIdentifier ;
  inLexique.assignFromAttribute_identifierString (var_cas_machineIdentifier) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_machineIdf) COMMA_HERE) ;
  GGS_uint  var_cas_machineInputVariableCount ;
  GGS_uint  var_cas_machineInputAndInternalVariableCount ;
  GGS_M_variablesMap  var_cas_machineVariablesMap ;
  GGS_luint  var_cas_indexOfImportedMachine ;
  const GGS_M_machinesMap  temp_30997 = var_cas_inSemanticContext.reader_machinesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (997)) ;
  if (temp_30997.isBuilt ()) {
    temp_30997 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_machineIdentifier, var_cas_indexOfImportedMachine, var_cas_machineInputVariableCount, var_cas_machineInputAndInternalVariableCount, var_cas_machineVariablesMap COMMA_SOURCE_FILE_AT_LINE (997)) ;
  }
  GGS_L_translationVector  var_cas_translationVector = GGS_L_translationVector ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_35 = true ;
    while (syntaxRepeat_35) {
        GGS_lstring  var_cas_inputVar ;
        inLexique.assignFromAttribute_identifierString (var_cas_inputVar) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        GGS_luint  var_cas_inputVarIndex ;
        const GGS_M_variablesMap  temp_31341 = var_cas_ioVarMap ;
        if (temp_31341.isBuilt ()) {
          temp_31341 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_inputVar, var_cas_inputVarIndex COMMA_SOURCE_FILE_AT_LINE (1005)) ;
        }
        var_cas_translationVector.addAssign_operation (var_cas_inputVarIndex) ;
      switch (select_repeat_sara_parser_35 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_35 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_inputVariablesCount = var_cas_translationVector.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1011)) ;
  const GGS_bool cond_31802 = (var_cas_inputVariablesCount).operator_isNotEqual (var_cas_machineInputVariableCount) ;
  if (cond_31802.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("The '$")).operator_concat (var_cas_machineIdentifier.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1013)))).operator_concat (GGS_string ("' machine defines "))).operator_concat (var_cas_machineInputVariableCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1013)))).operator_concat (GGS_string (" input variable(s), but this operand defines "))).operator_concat (var_cas_inputVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1014)))).operator_concat (GGS_string (" input variable(s)")) COMMA_SOURCE_FILE_AT_LINE (1015)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  switch (select_sara_parser_36 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_37 = true ;
        while (syntaxRepeat_37) {
            GGS_lstring  var_cas_internalVar ;
            inLexique.assignFromAttribute_identifierString (var_cas_internalVar) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
            GGS_luint  var_cas_internalVarIndex ;
            const GGS_M_variablesMap  temp_32000 = var_cas_ioVarMap ;
            if (temp_32000.isBuilt ()) {
              temp_32000 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_internalVar, var_cas_internalVarIndex COMMA_SOURCE_FILE_AT_LINE (1024)) ;
            }
            var_cas_translationVector.addAssign_operation (var_cas_internalVarIndex) ;
          switch (select_repeat_sara_parser_37 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_37 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_inputAndInternalVariablesCount = var_cas_translationVector.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1031)) ;
  const GGS_bool cond_32575 = (var_cas_inputAndInternalVariablesCount).operator_isNotEqual (var_cas_machineInputAndInternalVariableCount) ;
  if (cond_32575.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("The '$")).operator_concat (var_cas_machineIdentifier.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1033)))).operator_concat (GGS_string ("' machine defines "))).operator_concat (var_cas_machineInputAndInternalVariableCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1033)))).operator_concat (GGS_string (" input and internal variable(s), but this operand defines "))).operator_concat (var_cas_inputAndInternalVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1034)))).operator_concat (GGS_string (" input and internal variable(s)")) COMMA_SOURCE_FILE_AT_LINE (1035)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_38 = true ;
    while (syntaxRepeat_38) {
        GGS_lstring  var_cas_outputVar ;
        inLexique.assignFromAttribute_identifierString (var_cas_outputVar) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        GGS_luint  var_cas_outputVarIndex ;
        const GGS_M_variablesMap  temp_32741 = var_cas_ioVarMap ;
        if (temp_32741.isBuilt ()) {
          temp_32741 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_outputVar, var_cas_outputVarIndex COMMA_SOURCE_FILE_AT_LINE (1042)) ;
        }
        var_cas_translationVector.addAssign_operation (var_cas_outputVarIndex) ;
      switch (select_repeat_sara_parser_38 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_38 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__29_) COMMA_HERE) ;
  GGS_uint  var_cas_allVariablesCount = var_cas_translationVector.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1048)) ;
  GGS_uint  var_cas_machineAllVariablesCount = var_cas_machineVariablesMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1049)) ;
  const GGS_bool cond_33247 = (var_cas_allVariablesCount).operator_isNotEqual (var_cas_machineAllVariablesCount) ;
  if (cond_33247.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("The '$")).operator_concat (var_cas_machineIdentifier.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)))).operator_concat (GGS_string ("' machine defines "))).operator_concat (var_cas_machineAllVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)))).operator_concat (GGS_string (" variables, but this operand defines "))).operator_concat (var_cas_allVariablesCount.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)))).operator_concat (GGS_string (" variables")) COMMA_SOURCE_FILE_AT_LINE (1053)) ;
  }
  var_cas_outDefinition = GGS_C_importMachine ::constructor_new (inLexique, var_cas_indexOfImportedMachine.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1054)), var_cas_translationVector COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'explicit_automaton'           *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_parser::
pr_explicit_automaton_sara_parser_1061_25_ (sara_scanner & inLexique,
                                const GGS_semanticContext var_cas_inSemanticContext,
                                GGS_M_variablesMap  &var_cas_variablesMap,
                                GGS_AC_machineDefinition  &var_cas_outDefinition) {
  GGS_M_stateMap  var_cas_statesMap = GGS_M_stateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_stateDefinition  var_cas_stateDefinitionList = GGS_L_stateDefinition ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_auto) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_state) COMMA_HERE) ;
  { bool syntaxRepeat_39 = true ;
    while (syntaxRepeat_39) {
        GGS_lstring  var_cas_stateName ;
        inLexique.assignFromAttribute_identifierString (var_cas_stateName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        var_cas_statesMap.modifier_insertKey (inLexique, var_cas_stateName COMMA_SOURCE_FILE_AT_LINE (1075)) ;
      switch (select_repeat_sara_parser_39 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_39 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_L_statesDefinitionList  var_cas_initialStatesDefinitionList = GGS_L_statesDefinitionList ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_first) COMMA_HERE) ;
  { bool syntaxRepeat_40 = true ;
    while (syntaxRepeat_40) {
        GGS_lstring  var_cas_initialState ;
        inLexique.assignFromAttribute_identifierString (var_cas_initialState) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        GGS_luint  var_cas_initialStateIndex ;
        const GGS_M_stateMap  temp_34261 = var_cas_statesMap ;
        if (temp_34261.isBuilt ()) {
          temp_34261 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_initialState, var_cas_initialStateIndex COMMA_SOURCE_FILE_AT_LINE (1087)) ;
        }
        var_cas_initialStatesDefinitionList.addAssign_operation (var_cas_initialStateIndex, GGS_location (inLexique)) ;
      switch (select_repeat_sara_parser_40 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_40 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
  GGS_L_statesDefinitionList  var_cas_terminalStatesDefinitionList = GGS_L_statesDefinitionList ::constructor_emptyList () ;
  switch (select_sara_parser_41 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_last) COMMA_HERE) ;
      { bool syntaxRepeat_42 = true ;
        while (syntaxRepeat_42) {
            GGS_lstring  var_cas_terminalState ;
            inLexique.assignFromAttribute_identifierString (var_cas_terminalState) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
            GGS_luint  var_cas_terminalStateIndex ;
            const GGS_M_stateMap  temp_34665 = var_cas_statesMap ;
            if (temp_34665.isBuilt ()) {
              temp_34665 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_terminalState, var_cas_terminalStateIndex COMMA_SOURCE_FILE_AT_LINE (1102)) ;
            }
            var_cas_terminalStatesDefinitionList.addAssign_operation (var_cas_terminalStateIndex, GGS_location (inLexique)) ;
          switch (select_repeat_sara_parser_42 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_42 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_M_stateMap  var_cas_stateDefinitionMap = GGS_M_stateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_43 = true ;
    while (syntaxRepeat_43) {
        GGS_lstring  var_cas_stateName ;
        inLexique.assignFromAttribute_identifierString (var_cas_stateName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
        GGS_luint  var_cas_stateIndex ;
        const GGS_M_stateMap  temp_35052 = var_cas_statesMap ;
        if (temp_35052.isBuilt ()) {
          temp_35052 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_stateName, var_cas_stateIndex COMMA_SOURCE_FILE_AT_LINE (1116)) ;
        }
        var_cas_stateDefinitionMap.modifier_defineState (inLexique, var_cas_stateName COMMA_SOURCE_FILE_AT_LINE (1117)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3A_) COMMA_HERE) ;
        GGS_AC_boolExpression  var_cas_stateExpression ;
        nt_io_bool_expression_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_stateExpression) ;
        GGS_location  var_cas_endOfStateExpression = GGS_location (inLexique) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7B_) COMMA_HERE) ;
        GGS_L_transitionDefinition  var_cas_transitionsList = GGS_L_transitionDefinition ::constructor_emptyList () ;
        { bool syntaxRepeat_44 = true ;
          while (syntaxRepeat_44) {
            switch (select_repeat_sara_parser_44 (inLexique)) {
              case 2 : {
                GGS_AC_boolExpression  var_cas_transitionInputExpression ;
                nt_io_bool_expression_ (inLexique, var_cas_inSemanticContext, var_cas_variablesMap, var_cas_transitionInputExpression) ;
                GGS_location  var_cas_endOfExpression = GGS_location (inLexique) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_goto) COMMA_HERE) ;
                GGS_lstring  var_cas_targetStateName ;
                inLexique.assignFromAttribute_identifierString (var_cas_targetStateName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_targetStateIndex ;
                const GGS_M_stateMap  temp_35792 = var_cas_statesMap ;
                if (temp_35792.isBuilt ()) {
                  temp_35792 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_targetStateName, var_cas_targetStateIndex COMMA_SOURCE_FILE_AT_LINE (1135)) ;
                }
                var_cas_transitionsList.addAssign_operation (var_cas_transitionInputExpression, var_cas_endOfExpression, var_cas_targetStateIndex) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__3B_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_44 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7D_) COMMA_HERE) ;
        var_cas_stateDefinitionList.addAssign_operation (var_cas_stateIndex, var_cas_stateExpression, var_cas_endOfStateExpression, var_cas_transitionsList) ;
      switch (select_repeat_sara_parser_43 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_43 = false ;
          break ;
      }
    }
  }
  {
    GGS_M_stateMap::cEnumerator enumerator_36159 (var_cas_statesMap, true) ;
    const GGS_M_stateMap::cElement * operand_36159 = NULL ;
    while (((operand_36159 = enumerator_36159.nextObject ()))) {
      macroValidPointer (operand_36159) ;
      const GGS_bool cond_36297 = (var_cas_stateDefinitionMap.reader_hasKey (inLexique, operand_36159->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1146)) COMMA_SOURCE_FILE_AT_LINE (1146))).operator_not () ;
      if (cond_36297.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (operand_36159->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1147)))).operator_concat (GGS_string ("' state is not described")) COMMA_SOURCE_FILE_AT_LINE (1148)) ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (sara_scanner::sara_scanner_1__7D_) COMMA_HERE) ;
  var_cas_outDefinition = GGS_C_explicitAutomatonDefinition ::constructor_new (inLexique, var_cas_statesMap, var_cas_initialStatesDefinitionList, var_cas_terminalStatesDefinitionList, var_cas_stateDefinitionList, GGS_location (inLexique) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

