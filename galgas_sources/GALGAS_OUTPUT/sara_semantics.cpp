//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'sara_semantics.cpp'                          *
//               Generated by version 0.14.0 (LL(1) grammar)                 *
//                     february 2nd, 2005, at 10h52'32"                      *
//                                                                           *
// This program is free software; you can redistribute it and/or modify it   *
// under the terms of the GNU General Public License as published by the     *
// Free Software Foundation.                                                 *
//                                                                           *
// This program is distributed in the hope it will be useful, but WITHOUT    *
// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *
// more details.                                                             *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "files/C_text_file_write.h"
#include "sara_semantics.h"


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                        class map 'M_inputVarMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_M_inputVarMap::element_type::
element_type (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_M_inputVarMap & inInfo) :
AC_galgas_map_element (inIndex),
mKey (inKey),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_M_inputVarMap::
new_element (void * inKey, void * inInfo) {
  M_assert (reinterpret_cast <GGS_lstring *> (inKey) != NULL, "Dynamic cast error", 0, 0) ;
  M_assert (reinterpret_cast <e_M_inputVarMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  GGS_lstring * key = (GGS_lstring *) inKey ;
  e_M_inputVarMap * info = (e_M_inputVarMap *) inInfo ;
  macroMyNew (p, element_type (* key, getCount (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

sint32 GGS_M_inputVarMap::element_type::compareKeys (void * inKey) const {
  M_assert (reinterpret_cast <GGS_lstring *> (inKey) != NULL, "Dynamic cast error", 0, 0) ;
  GGS_lstring * key = (GGS_lstring *) inKey ;
  return mKey.compare_key_for_map (* key) ;
}

//---------------------------------------------------------------------------*

C_string GGS_M_inputVarMap::element_type::getStringForKey (void) const {
  C_string result ;
  result << mKey ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_M_inputVarMap GGS_M_inputVarMap::constructor_empty (void) {
  GGS_M_inputVarMap result ;
  macroMyNew (result.mReferenceCountPtr, sint32 (1)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_M_inputVarMap::reader_hasKey (const GGS_lstring & inKey) const {
  return GGS_bool (isBuilt (), internal_has_key ((void *) & inKey)) ;
}

//---------------------------------------------------------------------------*

void GGS_M_inputVarMap::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  M_assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  internalInsert ((void * ) & p->mKey, (void *) & p->mInfo, mRoot, extension, index) ;
}

//---------------------------------------------------------------------------*

void GGS_M_inputVarMap::
insertElement (C_lexique & inLexique,
               const char * inErrorMessagesArray [],
               const GGS_lstring & inKey,
               GGS_luint * outIndex) {
  sint32 index = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
     insulateMap () ;
    e_M_inputVarMap info  ;
    bool extension = false ; // Unused here
    internalInsert ((void * ) & inKey, (void *) & info, mRoot, extension, index) ;
    if (index < 0) {
      C_string keyString ;
      keyString << inKey ;
      buildMapSemanticErrorMessage (inLexique, inKey, inErrorMessagesArray, keyString) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (isBuilt () && (index >= 0), (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_M_inputVarMap::
searchElement (C_lexique & inLexique,
               const char * inErrorMessagesArray [],
               const GGS_lstring & inKey,
               GGS_luint * outIndex) {
  element_type * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search ((void *) & inKey) ;
    M_assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      C_string keyString ;
      keyString << inKey ;
      buildMapSemanticErrorMessage (inLexique, inKey, inErrorMessagesArray, keyString) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop_operation () ;
     }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void searchKey_M_inputVarMap (C_lexique & inLexique,
                                GGS_M_inputVarMap & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint * outIndex) {
  const char * kErrorMessage [] = {"the '",
                                   "",
                                   "' input variable is not declared",
                                   NULL} ;
  ioMap.searchElement (inLexique,
                       kErrorMessage,
                       inKey,
                       outIndex) ;
}

//---------------------------------------------------------------------------*

void insertKey_M_inputVarMap (C_lexique & lexique_var_,
                                GGS_M_inputVarMap & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint * outIndex) {
  const char * kErrorMessage [] = {"the '",
                                   "",
                                   "' input variable has been already declared",
                                   NULL} ;
  ioMap.insertElement (lexique_var_,
                       kErrorMessage,
                       inKey,
                       outIndex) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class map 'M_outputVarMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_M_outputVarMap::element_type::
element_type (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_M_outputVarMap & inInfo) :
AC_galgas_map_element (inIndex),
mKey (inKey),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_M_outputVarMap::
new_element (void * inKey, void * inInfo) {
  M_assert (reinterpret_cast <GGS_lstring *> (inKey) != NULL, "Dynamic cast error", 0, 0) ;
  M_assert (reinterpret_cast <e_M_outputVarMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  GGS_lstring * key = (GGS_lstring *) inKey ;
  e_M_outputVarMap * info = (e_M_outputVarMap *) inInfo ;
  macroMyNew (p, element_type (* key, getCount (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

sint32 GGS_M_outputVarMap::element_type::compareKeys (void * inKey) const {
  M_assert (reinterpret_cast <GGS_lstring *> (inKey) != NULL, "Dynamic cast error", 0, 0) ;
  GGS_lstring * key = (GGS_lstring *) inKey ;
  return mKey.compare_key_for_map (* key) ;
}

//---------------------------------------------------------------------------*

C_string GGS_M_outputVarMap::element_type::getStringForKey (void) const {
  C_string result ;
  result << mKey ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_M_outputVarMap GGS_M_outputVarMap::constructor_empty (void) {
  GGS_M_outputVarMap result ;
  macroMyNew (result.mReferenceCountPtr, sint32 (1)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_M_outputVarMap::reader_hasKey (const GGS_lstring & inKey) const {
  return GGS_bool (isBuilt (), internal_has_key ((void *) & inKey)) ;
}

//---------------------------------------------------------------------------*

void GGS_M_outputVarMap::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  M_assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  internalInsert ((void * ) & p->mKey, (void *) & p->mInfo, mRoot, extension, index) ;
}

//---------------------------------------------------------------------------*

void GGS_M_outputVarMap::
insertElement (C_lexique & inLexique,
               const char * inErrorMessagesArray [],
               const GGS_lstring & inKey,
               GGS_luint * outIndex) {
  sint32 index = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
     insulateMap () ;
    e_M_outputVarMap info  ;
    bool extension = false ; // Unused here
    internalInsert ((void * ) & inKey, (void *) & info, mRoot, extension, index) ;
    if (index < 0) {
      C_string keyString ;
      keyString << inKey ;
      buildMapSemanticErrorMessage (inLexique, inKey, inErrorMessagesArray, keyString) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (isBuilt () && (index >= 0), (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_M_outputVarMap::
searchElement (C_lexique & inLexique,
               const char * inErrorMessagesArray [],
               const GGS_lstring & inKey,
               GGS_luint * outIndex) {
  element_type * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search ((void *) & inKey) ;
    M_assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      C_string keyString ;
      keyString << inKey ;
      buildMapSemanticErrorMessage (inLexique, inKey, inErrorMessagesArray, keyString) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop_operation () ;
     }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void searchKey_M_outputVarMap (C_lexique & inLexique,
                                GGS_M_outputVarMap & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint * outIndex) {
  const char * kErrorMessage [] = {"the '",
                                   "",
                                   "' output variable is not declared",
                                   NULL} ;
  ioMap.searchElement (inLexique,
                       kErrorMessage,
                       inKey,
                       outIndex) ;
}

//---------------------------------------------------------------------------*

void insertKey_M_outputVarMap (C_lexique & lexique_var_,
                                GGS_M_outputVarMap & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint * outIndex) {
  const char * kErrorMessage [] = {"the '",
                                   "",
                                   "' output variable has been already declared",
                                   NULL} ;
  ioMap.insertElement (lexique_var_,
                       kErrorMessage,
                       inKey,
                       outIndex) ;
}

//---------------------------------------------------------------------------*

void insertForDefinition_M_outputVarMap (C_lexique & lexique_var_,
                                GGS_M_outputVarMap & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint * outIndex) {
  const char * kErrorMessage [] = {"the '",
                                   "",
                                   "' output variable is already defined for current state",
                                   NULL} ;
  ioMap.insertElement (lexique_var_,
                       kErrorMessage,
                       inKey,
                       outIndex) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class map 'M_stateMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_M_stateMap::element_type::
element_type (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_M_stateMap & inInfo) :
AC_galgas_map_element (inIndex),
mKey (inKey),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_M_stateMap::
new_element (void * inKey, void * inInfo) {
  M_assert (reinterpret_cast <GGS_lstring *> (inKey) != NULL, "Dynamic cast error", 0, 0) ;
  M_assert (reinterpret_cast <e_M_stateMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  GGS_lstring * key = (GGS_lstring *) inKey ;
  e_M_stateMap * info = (e_M_stateMap *) inInfo ;
  macroMyNew (p, element_type (* key, getCount (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

sint32 GGS_M_stateMap::element_type::compareKeys (void * inKey) const {
  M_assert (reinterpret_cast <GGS_lstring *> (inKey) != NULL, "Dynamic cast error", 0, 0) ;
  GGS_lstring * key = (GGS_lstring *) inKey ;
  return mKey.compare_key_for_map (* key) ;
}

//---------------------------------------------------------------------------*

C_string GGS_M_stateMap::element_type::getStringForKey (void) const {
  C_string result ;
  result << mKey ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_M_stateMap GGS_M_stateMap::constructor_empty (void) {
  GGS_M_stateMap result ;
  macroMyNew (result.mReferenceCountPtr, sint32 (1)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_M_stateMap::reader_hasKey (const GGS_lstring & inKey) const {
  return GGS_bool (isBuilt (), internal_has_key ((void *) & inKey)) ;
}

//---------------------------------------------------------------------------*

void GGS_M_stateMap::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  M_assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  internalInsert ((void * ) & p->mKey, (void *) & p->mInfo, mRoot, extension, index) ;
}

//---------------------------------------------------------------------------*

void GGS_M_stateMap::
insertElement (C_lexique & inLexique,
               const char * inErrorMessagesArray [],
               const GGS_lstring & inKey,
               GGS_luint * outIndex) {
  sint32 index = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
     insulateMap () ;
    e_M_stateMap info  ;
    bool extension = false ; // Unused here
    internalInsert ((void * ) & inKey, (void *) & info, mRoot, extension, index) ;
    if (index < 0) {
      C_string keyString ;
      keyString << inKey ;
      buildMapSemanticErrorMessage (inLexique, inKey, inErrorMessagesArray, keyString) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (isBuilt () && (index >= 0), (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_M_stateMap::
searchElement (C_lexique & inLexique,
               const char * inErrorMessagesArray [],
               const GGS_lstring & inKey,
               GGS_luint * outIndex) {
  element_type * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search ((void *) & inKey) ;
    M_assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      C_string keyString ;
      keyString << inKey ;
      buildMapSemanticErrorMessage (inLexique, inKey, inErrorMessagesArray, keyString) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop_operation () ;
     }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void searchKey_M_stateMap (C_lexique & inLexique,
                                GGS_M_stateMap & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint * outIndex) {
  const char * kErrorMessage [] = {"the '",
                                   "",
                                   "' state is not declared",
                                   NULL} ;
  ioMap.searchElement (inLexique,
                       kErrorMessage,
                       inKey,
                       outIndex) ;
}

//---------------------------------------------------------------------------*

void insertKey_M_stateMap (C_lexique & lexique_var_,
                                GGS_M_stateMap & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint * outIndex) {
  const char * kErrorMessage [] = {"the '",
                                   "",
                                   "' state has been already declared",
                                   NULL} ;
  ioMap.insertElement (lexique_var_,
                       kErrorMessage,
                       inKey,
                       outIndex) ;
}

//---------------------------------------------------------------------------*

void defineState_M_stateMap (C_lexique & lexique_var_,
                                GGS_M_stateMap & ioMap,
                                const GGS_lstring & inKey,
                                GGS_luint * outIndex) {
  const char * kErrorMessage [] = {"the '",
                                   "",
                                   "' state has been already defined",
                                   NULL} ;
  ioMap.insertElement (lexique_var_,
                       kErrorMessage,
                       inKey,
                       outIndex) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_AC_inputExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_AC_inputExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_AC_inputExpression::
GGS_AC_inputExpression (void) {
  mPointer = (cPtr_AC_inputExpression *) NULL ;
}

//---------------------------------------------------------------------------*

GGS_AC_inputExpression::
GGS_AC_inputExpression (const GGS_AC_inputExpression & inOperand) {
  mPointer = (cPtr_AC_inputExpression *) NULL ;
  macroAttachPointer (mPointer, inOperand.mPointer) ;
}

//---------------------------------------------------------------------------*

GGS_AC_inputExpression::
~GGS_AC_inputExpression (void) {
  macroDetachPointer (mPointer, cPtr_AC_inputExpression) ;
}

//---------------------------------------------------------------------------*

void GGS_AC_inputExpression::
operator = (const GGS_AC_inputExpression & inOperand) {
  macroAttachPointer (mPointer, inOperand.mPointer) ;
}

//---------------------------------------------------------------------------*

bool GGS_AC_inputExpression::isBuilt (void) const {
  bool result = false ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    result = mPointer->isBuilt () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_AC_inputExpression::
operator = (cPtr_AC_inputExpression * inSource) {
  macroAttachPointer (mPointer, inSource) ;
}

//---------------------------------------------------------------------------*

GGS_AC_inputExpression::
GGS_AC_inputExpression (cPtr_AC_inputExpression * inSource) {
  mPointer = (cPtr_AC_inputExpression *) NULL ;
  macroAttachPointer (mPointer, inSource) ;
}

//---------------------------------------------------------------------------*

cPtr_AC_inputExpression * GGS_AC_inputExpression
::operator () (void) const {
  macroValidPointer (mPointer) ;
  return mPointer ;
}

//---------------------------------------------------------------------------*

void GGS_AC_inputExpression
::drop_operation (void) {
  macroDetachPointer (mPointer, cPtr_AC_inputExpression) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_andExpression'                           *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_C_andExpression::cPtr_C_andExpression (const GGS_AC_inputExpression & argument_0,
                                const GGS_AC_inputExpression & argument_1)
:mLeftExpression (argument_0),
mRightExpression (argument_1) {
}

//---------------------------------------------------------------------------*

bool cPtr_C_andExpression::isBuilt (void) const {
  return mLeftExpression.isBuilt () &&
       mRightExpression.isBuilt () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_andExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
  cPtr_C_andExpression * GGS_C_andExpression::
    constructor_new (const GGS_AC_inputExpression & argument_0,
                                const GGS_AC_inputExpression & argument_1) {
    cPtr_C_andExpression * ptr_ = (cPtr_C_andExpression *) NULL ;
    macroMyNew (ptr_, cPtr_C_andExpression (argument_0,
                                argument_1)) ;
    return ptr_ ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'C_orExpression'                           *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_C_orExpression::cPtr_C_orExpression (const GGS_AC_inputExpression & argument_0,
                                const GGS_AC_inputExpression & argument_1)
:mLeftExpression (argument_0),
mRightExpression (argument_1) {
}

//---------------------------------------------------------------------------*

bool cPtr_C_orExpression::isBuilt (void) const {
  return mLeftExpression.isBuilt () &&
       mRightExpression.isBuilt () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_orExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
  cPtr_C_orExpression * GGS_C_orExpression::
    constructor_new (const GGS_AC_inputExpression & argument_0,
                                const GGS_AC_inputExpression & argument_1) {
    cPtr_C_orExpression * ptr_ = (cPtr_C_orExpression *) NULL ;
    macroMyNew (ptr_, cPtr_C_orExpression (argument_0,
                                argument_1)) ;
    return ptr_ ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_notExpression'                           *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_C_notExpression::cPtr_C_notExpression (const GGS_AC_inputExpression & argument_0)
:mExpression (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_C_notExpression::isBuilt (void) const {
  return mExpression.isBuilt () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_C_notExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
  cPtr_C_notExpression * GGS_C_notExpression::
    constructor_new (const GGS_AC_inputExpression & argument_0) {
    cPtr_C_notExpression * ptr_ = (cPtr_C_notExpression *) NULL ;
    macroMyNew (ptr_, cPtr_C_notExpression (argument_0)) ;
    return ptr_ ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_VariableExpression'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_C_VariableExpression::cPtr_C_VariableExpression (const GGS_luint & argument_0)
:mInputVarIndex (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_C_VariableExpression::isBuilt (void) const {
  return mInputVarIndex.isBuilt () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_VariableExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
  cPtr_C_VariableExpression * GGS_C_VariableExpression::
    constructor_new (const GGS_luint & argument_0) {
    cPtr_C_VariableExpression * ptr_ = (cPtr_C_VariableExpression *) NULL ;
    macroMyNew (ptr_, cPtr_C_VariableExpression (argument_0)) ;
    return ptr_ ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_trueExpression'                          *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

bool cPtr_C_trueExpression::isBuilt (void) const {
  return true ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_trueExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
  cPtr_C_trueExpression * GGS_C_trueExpression::
    constructor_new () {
    cPtr_C_trueExpression * ptr_ = (cPtr_C_trueExpression *) NULL ;
    macroMyNew (ptr_, cPtr_C_trueExpression ()) ;
    return ptr_ ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'C_falseExpression'                          *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

bool cPtr_C_falseExpression::isBuilt (void) const {
  return true ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_falseExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
  cPtr_C_falseExpression * GGS_C_falseExpression::
    constructor_new () {
    cPtr_C_falseExpression * ptr_ = (cPtr_C_falseExpression *) NULL ;
    macroMyNew (ptr_, cPtr_C_falseExpression ()) ;
    return ptr_ ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//              Class element of list 'L_transitionDefinition'               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_L_transitionDefinition::element_type::
element_type (const GGS_AC_inputExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_luint & argument_2) {
  mNextItem = (element_type *) NULL ;
  mActionExpression = argument_0 ;
  mEndOfExpression = argument_1 ;
  mTargetStateIndex = argument_2 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class list 'L_transitionDefinition'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_L_transitionDefinition
::GGS_L_transitionDefinition (void) { // Default Constructor
  mFirstItem = (element_type *) NULL ;
  mLastItem = (element_type *) NULL ;
  mCurrentItemPtr = (element_type *) NULL ;
  mCurrentItemIndex = 0 ;
  mListLength = 0 ;
  mCountReference = (sint32 *) NULL ;
}

//---------------------------------------------------------------------------*

GGS_L_transitionDefinition::~GGS_L_transitionDefinition (void) {
  emptyList () ;
}

//---------------------------------------------------------------------------*

GGS_L_transitionDefinition::GGS_L_transitionDefinition (const GGS_L_transitionDefinition & source) { // Copy constructor
  mFirstItem = (element_type *) NULL ;
  mLastItem = (element_type *) NULL ;
  mCurrentItemPtr = (element_type *) NULL ;
  mCurrentItemIndex = 0 ;
  mListLength = 0 ;
  mCountReference = (sint32 *) NULL ;
  *this = source ;
}

//---------------------------------------------------------------------------*

void GGS_L_transitionDefinition
::operator = (const GGS_L_transitionDefinition & source) { // Assignment operator
  if (this != & source) {
    emptyList () ;
    mFirstItem = source.mFirstItem ;
    mLastItem = source.mLastItem ;
    mCurrentItemPtr = (element_type *) NULL ;
    mCurrentItemIndex = 0 ;
    mListLength = source.mListLength ;
    mCountReference = source.mCountReference ;
    if (mCountReference != NULL) {
      macroValidPointer (mCountReference) ;
      (*mCountReference) ++ ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_L_transitionDefinition
::emptyList (void) {
  mCurrentItemPtr = (element_type *) NULL ;
  mCurrentItemIndex = 0 ;
  mListLength = 0 ;
  mLastItem = (element_type *) NULL ;
  if (mCountReference != NULL) {
    macroValidPointer (mCountReference) ;
    if ((*mCountReference) == 1) {
      macroMyDelete (mCountReference, sint32) ;
      while (mFirstItem != NULL) {
        macroValidPointer (mFirstItem) ;
        mLastItem = mFirstItem->mNextItem ;
        macroMyDelete (mFirstItem, element_type) ;
        mFirstItem = mLastItem ;
      }
    }else{
      mFirstItem = (element_type *) NULL ;
      (*mCountReference) -- ;
      mCountReference = (sint32 *) NULL ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_L_transitionDefinition::
internalAppendItem (const GGS_AC_inputExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_luint & argument_2) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2)) ;
  if (nouvelElement != NULL) {
    macroValidPointer (nouvelElement) ;
    if (mLastItem == NULL) {
      mFirstItem = nouvelElement ;
    }else{
      macroValidPointer (mLastItem) ;
      mLastItem->mNextItem = nouvelElement ;
    }
    mLastItem = nouvelElement ;
    nouvelElement = (element_type *) NULL ;
    mListLength ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_L_transitionDefinition::
addAssign_operation (const GGS_AC_inputExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_luint & argument_2) {
  if (isBuilt ()
                 && argument_0.isBuilt ()
                 && argument_1.isBuilt ()
                 && argument_2.isBuilt ()) {
    insulateList () ;
    internalAppendItem (argument_0,
                                argument_1,
                                argument_2) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_L_transitionDefinition
::insulateList (void) {
  if (mCountReference != NULL) {
    macroValidPointer (mCountReference) ;
    if ((*mCountReference) > 1) {
      element_type * p = mFirstItem ;
      mFirstItem = (element_type *)  NULL ;
      mLastItem = (element_type *)  NULL ;
      mListLength = 0 ;
      mCurrentItemPtr = (element_type *) NULL ;
      mCurrentItemIndex = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        internalAppendItem (p->mActionExpression,
                                p->mEndOfExpression,
                                p->mTargetStateIndex) ;
        p = p->mNextItem ;
      }
      (*mCountReference) -- ;
      mCountReference = (sint32 *) NULL ;
      macroMyNew (mCountReference, sint32 (1)) ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_L_transitionDefinition  GGS_L_transitionDefinition::
constructor_empty (void) {
  GGS_L_transitionDefinition result ;
  macroMyNew (result.mCountReference, sint32 (1)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_L_transitionDefinition
::drop_operation (void) {
  emptyList () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Class element of list 'L_outputValues'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_L_outputValues::element_type::
element_type (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) {
  mNextItem = (element_type *) NULL ;
  mOutputVariableIndex = argument_0 ;
  mOutputValue = argument_1 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class list 'L_outputValues'                         *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_L_outputValues
::GGS_L_outputValues (void) { // Default Constructor
  mFirstItem = (element_type *) NULL ;
  mLastItem = (element_type *) NULL ;
  mCurrentItemPtr = (element_type *) NULL ;
  mCurrentItemIndex = 0 ;
  mListLength = 0 ;
  mCountReference = (sint32 *) NULL ;
}

//---------------------------------------------------------------------------*

GGS_L_outputValues::~GGS_L_outputValues (void) {
  emptyList () ;
}

//---------------------------------------------------------------------------*

GGS_L_outputValues::GGS_L_outputValues (const GGS_L_outputValues & source) { // Copy constructor
  mFirstItem = (element_type *) NULL ;
  mLastItem = (element_type *) NULL ;
  mCurrentItemPtr = (element_type *) NULL ;
  mCurrentItemIndex = 0 ;
  mListLength = 0 ;
  mCountReference = (sint32 *) NULL ;
  *this = source ;
}

//---------------------------------------------------------------------------*

void GGS_L_outputValues
::operator = (const GGS_L_outputValues & source) { // Assignment operator
  if (this != & source) {
    emptyList () ;
    mFirstItem = source.mFirstItem ;
    mLastItem = source.mLastItem ;
    mCurrentItemPtr = (element_type *) NULL ;
    mCurrentItemIndex = 0 ;
    mListLength = source.mListLength ;
    mCountReference = source.mCountReference ;
    if (mCountReference != NULL) {
      macroValidPointer (mCountReference) ;
      (*mCountReference) ++ ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_L_outputValues
::emptyList (void) {
  mCurrentItemPtr = (element_type *) NULL ;
  mCurrentItemIndex = 0 ;
  mListLength = 0 ;
  mLastItem = (element_type *) NULL ;
  if (mCountReference != NULL) {
    macroValidPointer (mCountReference) ;
    if ((*mCountReference) == 1) {
      macroMyDelete (mCountReference, sint32) ;
      while (mFirstItem != NULL) {
        macroValidPointer (mFirstItem) ;
        mLastItem = mFirstItem->mNextItem ;
        macroMyDelete (mFirstItem, element_type) ;
        mFirstItem = mLastItem ;
      }
    }else{
      mFirstItem = (element_type *) NULL ;
      (*mCountReference) -- ;
      mCountReference = (sint32 *) NULL ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_L_outputValues::
internalAppendItem (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1)) ;
  if (nouvelElement != NULL) {
    macroValidPointer (nouvelElement) ;
    if (mLastItem == NULL) {
      mFirstItem = nouvelElement ;
    }else{
      macroValidPointer (mLastItem) ;
      mLastItem->mNextItem = nouvelElement ;
    }
    mLastItem = nouvelElement ;
    nouvelElement = (element_type *) NULL ;
    mListLength ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_L_outputValues::
addAssign_operation (const GGS_luint & argument_0,
                                const GGS_luint & argument_1) {
  if (isBuilt ()
                 && argument_0.isBuilt ()
                 && argument_1.isBuilt ()) {
    insulateList () ;
    internalAppendItem (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_L_outputValues
::insulateList (void) {
  if (mCountReference != NULL) {
    macroValidPointer (mCountReference) ;
    if ((*mCountReference) > 1) {
      element_type * p = mFirstItem ;
      mFirstItem = (element_type *)  NULL ;
      mLastItem = (element_type *)  NULL ;
      mListLength = 0 ;
      mCurrentItemPtr = (element_type *) NULL ;
      mCurrentItemIndex = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        internalAppendItem (p->mOutputVariableIndex,
                                p->mOutputValue) ;
        p = p->mNextItem ;
      }
      (*mCountReference) -- ;
      mCountReference = (sint32 *) NULL ;
      macroMyNew (mCountReference, sint32 (1)) ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_L_outputValues  GGS_L_outputValues::
constructor_empty (void) {
  GGS_L_outputValues result ;
  macroMyNew (result.mCountReference, sint32 (1)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_L_outputValues
::drop_operation (void) {
  emptyList () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Class element of list 'L_stateDefinition'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_L_stateDefinition::element_type::
element_type (const GGS_luint & argument_0,
                                const GGS_AC_inputExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_L_transitionDefinition & argument_3,
                                const GGS_L_outputValues & argument_4) {
  mNextItem = (element_type *) NULL ;
  mStateIndex = argument_0 ;
  mExpression = argument_1 ;
  mEndOfExpression = argument_2 ;
  mTransitionsList = argument_3 ;
  mOutputValues = argument_4 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class list 'L_stateDefinition'                       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_L_stateDefinition
::GGS_L_stateDefinition (void) { // Default Constructor
  mFirstItem = (element_type *) NULL ;
  mLastItem = (element_type *) NULL ;
  mCurrentItemPtr = (element_type *) NULL ;
  mCurrentItemIndex = 0 ;
  mListLength = 0 ;
  mCountReference = (sint32 *) NULL ;
}

//---------------------------------------------------------------------------*

GGS_L_stateDefinition::~GGS_L_stateDefinition (void) {
  emptyList () ;
}

//---------------------------------------------------------------------------*

GGS_L_stateDefinition::GGS_L_stateDefinition (const GGS_L_stateDefinition & source) { // Copy constructor
  mFirstItem = (element_type *) NULL ;
  mLastItem = (element_type *) NULL ;
  mCurrentItemPtr = (element_type *) NULL ;
  mCurrentItemIndex = 0 ;
  mListLength = 0 ;
  mCountReference = (sint32 *) NULL ;
  *this = source ;
}

//---------------------------------------------------------------------------*

void GGS_L_stateDefinition
::operator = (const GGS_L_stateDefinition & source) { // Assignment operator
  if (this != & source) {
    emptyList () ;
    mFirstItem = source.mFirstItem ;
    mLastItem = source.mLastItem ;
    mCurrentItemPtr = (element_type *) NULL ;
    mCurrentItemIndex = 0 ;
    mListLength = source.mListLength ;
    mCountReference = source.mCountReference ;
    if (mCountReference != NULL) {
      macroValidPointer (mCountReference) ;
      (*mCountReference) ++ ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_L_stateDefinition
::emptyList (void) {
  mCurrentItemPtr = (element_type *) NULL ;
  mCurrentItemIndex = 0 ;
  mListLength = 0 ;
  mLastItem = (element_type *) NULL ;
  if (mCountReference != NULL) {
    macroValidPointer (mCountReference) ;
    if ((*mCountReference) == 1) {
      macroMyDelete (mCountReference, sint32) ;
      while (mFirstItem != NULL) {
        macroValidPointer (mFirstItem) ;
        mLastItem = mFirstItem->mNextItem ;
        macroMyDelete (mFirstItem, element_type) ;
        mFirstItem = mLastItem ;
      }
    }else{
      mFirstItem = (element_type *) NULL ;
      (*mCountReference) -- ;
      mCountReference = (sint32 *) NULL ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_L_stateDefinition::
internalAppendItem (const GGS_luint & argument_0,
                                const GGS_AC_inputExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_L_transitionDefinition & argument_3,
                                const GGS_L_outputValues & argument_4) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  if (nouvelElement != NULL) {
    macroValidPointer (nouvelElement) ;
    if (mLastItem == NULL) {
      mFirstItem = nouvelElement ;
    }else{
      macroValidPointer (mLastItem) ;
      mLastItem->mNextItem = nouvelElement ;
    }
    mLastItem = nouvelElement ;
    nouvelElement = (element_type *) NULL ;
    mListLength ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_L_stateDefinition::
addAssign_operation (const GGS_luint & argument_0,
                                const GGS_AC_inputExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_L_transitionDefinition & argument_3,
                                const GGS_L_outputValues & argument_4) {
  if (isBuilt ()
                 && argument_0.isBuilt ()
                 && argument_1.isBuilt ()
                 && argument_2.isBuilt ()
                 && argument_3.isBuilt ()
                 && argument_4.isBuilt ()) {
    insulateList () ;
    internalAppendItem (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_L_stateDefinition
::insulateList (void) {
  if (mCountReference != NULL) {
    macroValidPointer (mCountReference) ;
    if ((*mCountReference) > 1) {
      element_type * p = mFirstItem ;
      mFirstItem = (element_type *)  NULL ;
      mLastItem = (element_type *)  NULL ;
      mListLength = 0 ;
      mCurrentItemPtr = (element_type *) NULL ;
      mCurrentItemIndex = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        internalAppendItem (p->mStateIndex,
                                p->mExpression,
                                p->mEndOfExpression,
                                p->mTransitionsList,
                                p->mOutputValues) ;
        p = p->mNextItem ;
      }
      (*mCountReference) -- ;
      mCountReference = (sint32 *) NULL ;
      macroMyNew (mCountReference, sint32 (1)) ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_L_stateDefinition  GGS_L_stateDefinition::
constructor_empty (void) {
  GGS_L_stateDefinition result ;
  macroMyNew (result.mCountReference, sint32 (1)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_L_stateDefinition
::drop_operation (void) {
  emptyList () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_AC_component'                     *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_AC_component'                       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_AC_component::
GGS_AC_component (void) {
  mPointer = (cPtr_AC_component *) NULL ;
}

//---------------------------------------------------------------------------*

GGS_AC_component::
GGS_AC_component (const GGS_AC_component & inOperand) {
  mPointer = (cPtr_AC_component *) NULL ;
  macroAttachPointer (mPointer, inOperand.mPointer) ;
}

//---------------------------------------------------------------------------*

GGS_AC_component::
~GGS_AC_component (void) {
  macroDetachPointer (mPointer, cPtr_AC_component) ;
}

//---------------------------------------------------------------------------*

void GGS_AC_component::
operator = (const GGS_AC_component & inOperand) {
  macroAttachPointer (mPointer, inOperand.mPointer) ;
}

//---------------------------------------------------------------------------*

bool GGS_AC_component::isBuilt (void) const {
  bool result = false ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    result = mPointer->isBuilt () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_AC_component::
operator = (cPtr_AC_component * inSource) {
  macroAttachPointer (mPointer, inSource) ;
}

//---------------------------------------------------------------------------*

GGS_AC_component::
GGS_AC_component (cPtr_AC_component * inSource) {
  mPointer = (cPtr_AC_component *) NULL ;
  macroAttachPointer (mPointer, inSource) ;
}

//---------------------------------------------------------------------------*

cPtr_AC_component * GGS_AC_component
::operator () (void) const {
  macroValidPointer (mPointer) ;
  return mPointer ;
}

//---------------------------------------------------------------------------*

void GGS_AC_component
::drop_operation (void) {
  macroDetachPointer (mPointer, cPtr_AC_component) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_automatonComponent'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_C_automatonComponent::cPtr_C_automatonComponent (const GGS_M_inputVarMap & argument_0,
                                const GGS_M_outputVarMap & argument_1,
                                const GGS_M_stateMap & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_L_stateDefinition & argument_4,
                                const GGS_location & argument_5)
:mInputVariableMap (argument_0),
mOutputVariableMap (argument_1),
mStatesMap (argument_2),
mInitialStateIndex (argument_3),
mStateDefinitionList (argument_4),
mEndOfDefinition (argument_5) {
}

//---------------------------------------------------------------------------*

bool cPtr_C_automatonComponent::isBuilt (void) const {
  return mInputVariableMap.isBuilt () &&
       mOutputVariableMap.isBuilt () &&
       mStatesMap.isBuilt () &&
       mInitialStateIndex.isBuilt () &&
       mStateDefinitionList.isBuilt () &&
       mEndOfDefinition.isBuilt () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_automatonComponent'                   *
//                                                                           *
//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
  cPtr_C_automatonComponent * GGS_C_automatonComponent::
    constructor_new (const GGS_M_inputVarMap & argument_0,
                                const GGS_M_outputVarMap & argument_1,
                                const GGS_M_stateMap & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_L_stateDefinition & argument_4,
                                const GGS_location & argument_5) {
    cPtr_C_automatonComponent * ptr_ = (cPtr_C_automatonComponent *) NULL ;
    macroMyNew (ptr_, cPtr_C_automatonComponent (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5)) ;
    return ptr_ ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                        class map 'M_componentMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_M_componentMap::element_type::
element_type (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_M_componentMap & inInfo) :
AC_galgas_map_element (inIndex),
mKey (inKey),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_M_componentMap::
new_element (void * inKey, void * inInfo) {
  M_assert (reinterpret_cast <GGS_lstring *> (inKey) != NULL, "Dynamic cast error", 0, 0) ;
  M_assert (reinterpret_cast <e_M_componentMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  GGS_lstring * key = (GGS_lstring *) inKey ;
  e_M_componentMap * info = (e_M_componentMap *) inInfo ;
  macroMyNew (p, element_type (* key, getCount (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

sint32 GGS_M_componentMap::element_type::compareKeys (void * inKey) const {
  M_assert (reinterpret_cast <GGS_lstring *> (inKey) != NULL, "Dynamic cast error", 0, 0) ;
  GGS_lstring * key = (GGS_lstring *) inKey ;
  return mKey.compare_key_for_map (* key) ;
}

//---------------------------------------------------------------------------*

C_string GGS_M_componentMap::element_type::getStringForKey (void) const {
  C_string result ;
  result << mKey ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_M_componentMap GGS_M_componentMap::constructor_empty (void) {
  GGS_M_componentMap result ;
  macroMyNew (result.mReferenceCountPtr, sint32 (1)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_M_componentMap::reader_hasKey (const GGS_lstring & inKey) const {
  return GGS_bool (isBuilt (), internal_has_key ((void *) & inKey)) ;
}

//---------------------------------------------------------------------------*

void GGS_M_componentMap::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  M_assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  internalInsert ((void * ) & p->mKey, (void *) & p->mInfo, mRoot, extension, index) ;
}

//---------------------------------------------------------------------------*

void GGS_M_componentMap::
insertElement (C_lexique & inLexique,
               const char * inErrorMessagesArray [],
               const GGS_lstring & inKey,
               const GGS_AC_component &  inParameter0,
               GGS_luint * outIndex) {
  sint32 index = - 1 ;
  if (isBuilt () && inKey.isBuilt ()
                 && inParameter0.isBuilt ()) {
     insulateMap () ;
    e_M_componentMap info  ;
    info.mComponent = inParameter0 ;
    bool extension = false ; // Unused here
    internalInsert ((void * ) & inKey, (void *) & info, mRoot, extension, index) ;
    if (index < 0) {
      C_string keyString ;
      keyString << inKey ;
      buildMapSemanticErrorMessage (inLexique, inKey, inErrorMessagesArray, keyString) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (isBuilt () && (index >= 0), (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_M_componentMap::
searchElement (C_lexique & inLexique,
               const char * inErrorMessagesArray [],
               const GGS_lstring & inKey,
               GGS_AC_component   * outParameter0,
               GGS_luint * outIndex) {
  element_type * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search ((void *) & inKey) ;
    M_assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      C_string keyString ;
      keyString << inKey ;
      buildMapSemanticErrorMessage (inLexique, inKey, inErrorMessagesArray, keyString) ;
    }
  }
  if (node == NULL) {
    if (outParameter0 != NULL) {
      outParameter0->drop_operation () ;
    }
    if (outIndex != NULL) {
      outIndex->drop_operation () ;
     }
  }else{
    if (outParameter0 != NULL) {
      * outParameter0 = node->mInfo.mComponent ;
    }
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void insertKey_M_componentMap (C_lexique & lexique_var_,
                                GGS_M_componentMap & ioMap,
                                const GGS_lstring & inKey,
                                const GGS_AC_component & inParameter0,
                                GGS_luint * outIndex) {
  const char * kErrorMessage [] = {"the '",
                                   "",
                                   "' component has been already declared",
                                   NULL} ;
  ioMap.insertElement (lexique_var_,
                       kErrorMessage,
                       inKey,
                       inParameter0,
                       outIndex) ;
}

//---------------------------------------------------------------------------*

void defineState_M_componentMap (C_lexique & lexique_var_,
                                GGS_M_componentMap & ioMap,
                                const GGS_lstring & inKey,
                                const GGS_AC_component & inParameter0,
                                GGS_luint * outIndex) {
  const char * kErrorMessage [] = {"the '",
                                   "",
                                   "' component has been already defined",
                                   NULL} ;
  ioMap.insertElement (lexique_var_,
                       kErrorMessage,
                       inKey,
                       inParameter0,
                       outIndex) ;
}

//---------------------------------------------------------------------------*

