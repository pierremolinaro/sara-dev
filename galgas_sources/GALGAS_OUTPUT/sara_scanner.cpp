//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'sara_scanner.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 9th, 2009, at 14h30'34"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "sara_scanner.h"

#include "strings/unicode_character.h"
#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_sara_scanner::cTokenFor_sara_scanner (void) :
identifierString (),
ulongValue () {
}

//---------------------------------------------------------------------------*

sara_scanner::
sara_scanner (C_Compiler * inCallerCompiler,
                const C_String & inDependencyFileExtension,
                const C_String & inDependencyFilePath,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

sara_scanner::
sara_scanner (C_Compiler * inCallerCompiler,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const utf32 gErrorMessage_0 [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\"'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;
//--- Message 1
static const utf32 gErrorMessage_1 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
} ;
//--- Message 2
static const utf32 gErrorMessage_2 [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
} ;
//--- Message 3
static const utf32 gErrorMessage_3 [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;
//--- Message 4
static const utf32 gErrorMessage_4 [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;
//--- Message 5
static const utf32 gErrorMessage_5 [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const utf32 gSyntaxErrorMessage_identifier [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$auto$' :
static const utf32 gSyntaxErrorMessage_auto [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('a'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$state$' :
static const utf32 gSyntaxErrorMessage_state [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$first$' :
static const utf32 gSyntaxErrorMessage_first [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('r'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$last$' :
static const utf32 gSyntaxErrorMessage_last [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$goto$' :
static const utf32 gSyntaxErrorMessage_goto [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('g'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$timer$' :
static const utf32 gSyntaxErrorMessage_timer [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$true$' :
static const utf32 gSyntaxErrorMessage_true [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$false$' :
static const utf32 gSyntaxErrorMessage_false [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('f'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$nofirst$' :
static const utf32 gSyntaxErrorMessage_nofirst [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('r'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$nolast$' :
static const utf32 gSyntaxErrorMessage_nolast [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$modalcompadd$' :
static const utf32 gSyntaxErrorMessage_modalcompadd [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$exclude$' :
static const utf32 gSyntaxErrorMessage_exclude [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$modalcompsub$' :
static const utf32 gSyntaxErrorMessage_modalcompsub [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE ('u'),
  TO_UNICODE ('b'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$include$' :
static const utf32 gSyntaxErrorMessage_include [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$to$' :
static const utf32 gSyntaxErrorMessage_to [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$scenario$' :
static const utf32 gSyntaxErrorMessage_scenario [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$trans$' :
static const utf32 gSyntaxErrorMessage_trans [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ite_cache$' :
static const utf32 gSyntaxErrorMessage_ite_5Fcache [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$and_cache$' :
static const utf32 gSyntaxErrorMessage_and_5Fcache [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('_'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$map$' :
static const utf32 gSyntaxErrorMessage_map [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$bdd$' :
static const utf32 gSyntaxErrorMessage_bdd [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('b'),
  TO_UNICODE ('d'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$bool$' :
static const utf32 gSyntaxErrorMessage_bool [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('b'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$use_and$' :
static const utf32 gSyntaxErrorMessage_use_5Fand [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$use_ite$' :
static const utf32 gSyntaxErrorMessage_use_5Fite [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$use_and_ite$' :
static const utf32 gSyntaxErrorMessage_use_5Fand_5Fite [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('_'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$check$' :
static const utf32 gSyntaxErrorMessage_check [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('k'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$checkbool$' :
static const utf32 gSyntaxErrorMessage_checkbool [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('k'),
  TO_UNICODE ('b'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$checkidentical$' :
static const utf32 gSyntaxErrorMessage_checkidentical [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('k'),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$,$' :
static const utf32 gSyntaxErrorMessage__2C [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$;$' :
static const utf32 gSyntaxErrorMessage__3B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (';'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$:$' :
static const utf32 gSyntaxErrorMessage__3A [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '${$' :
static const utf32 gSyntaxErrorMessage__7B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('{'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$}$' :
static const utf32 gSyntaxErrorMessage__7D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('}'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$->$' :
static const utf32 gSyntaxErrorMessage__2D_3E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$&$' :
static const utf32 gSyntaxErrorMessage__26 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('&'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$~$' :
static const utf32 gSyntaxErrorMessage__7E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('~'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$?$' :
static const utf32 gSyntaxErrorMessage__3F [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\?'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$!$' :
static const utf32 gSyntaxErrorMessage__21 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('!'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$|$' :
static const utf32 gSyntaxErrorMessage__7C [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('|'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$||$' :
static const utf32 gSyntaxErrorMessage__7C_7C [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('|'),
  TO_UNICODE ('|'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$+$' :
static const utf32 gSyntaxErrorMessage__2B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('+'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$($' :
static const utf32 gSyntaxErrorMessage__28 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('('),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$)$' :
static const utf32 gSyntaxErrorMessage__29 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (')'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$:=$' :
static const utf32 gSyntaxErrorMessage__3A_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$^$' :
static const utf32 gSyntaxErrorMessage__5E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('^'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$=$' :
static const utf32 gSyntaxErrorMessage__3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$*$' :
static const utf32 gSyntaxErrorMessage__2A [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('*'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$@$' :
static const utf32 gSyntaxErrorMessage__40 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('@'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$**$' :
static const utf32 gSyntaxErrorMessage__2A_2A [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('*'),
  TO_UNICODE ('*'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$literal_string$' :
static const utf32 gSyntaxErrorMessage_literal_5Fstring [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\"'),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('\"'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$machineIdf$' :
static const utf32 gSyntaxErrorMessage_machineIdf [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('$'),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$literal_integer$' :
static const utf32 gSyntaxErrorMessage_literal_5Finteger [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for 'end of source' :
static const utf32 kEndOfSourceLexicalErrorMessage [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_scanner::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const utf32 * syntaxErrorMessageArray [54] = {kEndOfSourceLexicalErrorMessage,
       gSyntaxErrorMessage_identifier,
       gSyntaxErrorMessage_auto,
       gSyntaxErrorMessage_state,
       gSyntaxErrorMessage_first,
       gSyntaxErrorMessage_last,
       gSyntaxErrorMessage_goto,
       gSyntaxErrorMessage_timer,
       gSyntaxErrorMessage_true,
       gSyntaxErrorMessage_false,
       gSyntaxErrorMessage_nofirst,
       gSyntaxErrorMessage_nolast,
       gSyntaxErrorMessage_modalcompadd,
       gSyntaxErrorMessage_exclude,
       gSyntaxErrorMessage_modalcompsub,
       gSyntaxErrorMessage_include,
       gSyntaxErrorMessage_to,
       gSyntaxErrorMessage_scenario,
       gSyntaxErrorMessage_trans,
       gSyntaxErrorMessage_ite_5Fcache,
       gSyntaxErrorMessage_and_5Fcache,
       gSyntaxErrorMessage_map,
       gSyntaxErrorMessage_bdd,
       gSyntaxErrorMessage_bool,
       gSyntaxErrorMessage_use_5Fand,
       gSyntaxErrorMessage_use_5Fite,
       gSyntaxErrorMessage_use_5Fand_5Fite,
       gSyntaxErrorMessage_check,
       gSyntaxErrorMessage_checkbool,
       gSyntaxErrorMessage_checkidentical,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__2D_3E,
       gSyntaxErrorMessage__26,
       gSyntaxErrorMessage__7E,
       gSyntaxErrorMessage__3F,
       gSyntaxErrorMessage__21,
       gSyntaxErrorMessage__7C,
       gSyntaxErrorMessage__7C_7C,
       gSyntaxErrorMessage__2B,
       gSyntaxErrorMessage__28,
       gSyntaxErrorMessage__29,
       gSyntaxErrorMessage__3A_3D,
       gSyntaxErrorMessage__5E,
       gSyntaxErrorMessage__3D,
       gSyntaxErrorMessage__2A,
       gSyntaxErrorMessage__40,
       gSyntaxErrorMessage__2A_2A,
       gSyntaxErrorMessage_literal_5Fstring,
       gSyntaxErrorMessage_machineIdf,
       gSyntaxErrorMessage_literal_5Finteger} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'keyWordList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_keyWordList = 28 ;

static const utf32 kEntry_0_forTable_keyWordList [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_keyWordList [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('d'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_keyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_keyWordList [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_keyWordList [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_keyWordList [] = {
  TO_UNICODE ('g'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_keyWordList [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_keyWordList [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_keyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('k'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_keyWordList [] = {
  TO_UNICODE ('f'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_keyWordList [] = {
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('r'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_keyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_keyWordList [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_keyWordList [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_keyWordList [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_keyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_keyWordList [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_keyWordList [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('r'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_18_forTable_keyWordList [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_19_forTable_keyWordList [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_20_forTable_keyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_21_forTable_keyWordList [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('_'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_22_forTable_keyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('k'),
  TO_UNICODE ('b'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_23_forTable_keyWordList [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_24_forTable_keyWordList [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('_'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_25_forTable_keyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_26_forTable_keyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE ('u'),
  TO_UNICODE ('b'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_27_forTable_keyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('k'),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_keyWordList [ktable_size_keyWordList] = {
  {kEntry_0_forTable_keyWordList, 2, sara_scanner::sara_scanner_1_to},
  {kEntry_1_forTable_keyWordList, 3, sara_scanner::sara_scanner_1_bdd},
  {kEntry_2_forTable_keyWordList, 3, sara_scanner::sara_scanner_1_map},
  {kEntry_3_forTable_keyWordList, 4, sara_scanner::sara_scanner_1_auto},
  {kEntry_4_forTable_keyWordList, 4, sara_scanner::sara_scanner_1_bool},
  {kEntry_5_forTable_keyWordList, 4, sara_scanner::sara_scanner_1_goto},
  {kEntry_6_forTable_keyWordList, 4, sara_scanner::sara_scanner_1_last},
  {kEntry_7_forTable_keyWordList, 4, sara_scanner::sara_scanner_1_true},
  {kEntry_8_forTable_keyWordList, 5, sara_scanner::sara_scanner_1_check},
  {kEntry_9_forTable_keyWordList, 5, sara_scanner::sara_scanner_1_false},
  {kEntry_10_forTable_keyWordList, 5, sara_scanner::sara_scanner_1_first},
  {kEntry_11_forTable_keyWordList, 5, sara_scanner::sara_scanner_1_state},
  {kEntry_12_forTable_keyWordList, 5, sara_scanner::sara_scanner_1_timer},
  {kEntry_13_forTable_keyWordList, 5, sara_scanner::sara_scanner_1_trans},
  {kEntry_14_forTable_keyWordList, 6, sara_scanner::sara_scanner_1_nolast},
  {kEntry_15_forTable_keyWordList, 7, sara_scanner::sara_scanner_1_exclude},
  {kEntry_16_forTable_keyWordList, 7, sara_scanner::sara_scanner_1_include},
  {kEntry_17_forTable_keyWordList, 7, sara_scanner::sara_scanner_1_nofirst},
  {kEntry_18_forTable_keyWordList, 7, sara_scanner::sara_scanner_1_use_5Fand},
  {kEntry_19_forTable_keyWordList, 7, sara_scanner::sara_scanner_1_use_5Fite},
  {kEntry_20_forTable_keyWordList, 8, sara_scanner::sara_scanner_1_scenario},
  {kEntry_21_forTable_keyWordList, 9, sara_scanner::sara_scanner_1_and_5Fcache},
  {kEntry_22_forTable_keyWordList, 9, sara_scanner::sara_scanner_1_checkbool},
  {kEntry_23_forTable_keyWordList, 9, sara_scanner::sara_scanner_1_ite_5Fcache},
  {kEntry_24_forTable_keyWordList, 11, sara_scanner::sara_scanner_1_use_5Fand_5Fite},
  {kEntry_25_forTable_keyWordList, 12, sara_scanner::sara_scanner_1_modalcompadd},
  {kEntry_26_forTable_keyWordList, 12, sara_scanner::sara_scanner_1_modalcompsub},
  {kEntry_27_forTable_keyWordList, 14, sara_scanner::sara_scanner_1_checkidentical}
} ;

sint16 sara_scanner::search_into_keyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_keyWordList, ktable_size_keyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'delimitorsList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_delimitorsList = 21 ;

static const utf32 kEntry_0_forTable_delimitorsList [] = {
  TO_UNICODE ('!'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_delimitorsList [] = {
  TO_UNICODE ('&'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_delimitorsList [] = {
  TO_UNICODE ('('),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_delimitorsList [] = {
  TO_UNICODE (')'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_delimitorsList [] = {
  TO_UNICODE ('*'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_delimitorsList [] = {
  TO_UNICODE ('+'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_delimitorsList [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_delimitorsList [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_delimitorsList [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_delimitorsList [] = {
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_delimitorsList [] = {
  TO_UNICODE ('\?'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_delimitorsList [] = {
  TO_UNICODE ('@'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_delimitorsList [] = {
  TO_UNICODE ('^'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_delimitorsList [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_delimitorsList [] = {
  TO_UNICODE ('|'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_delimitorsList [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_delimitorsList [] = {
  TO_UNICODE ('~'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_delimitorsList [] = {
  TO_UNICODE ('*'),
  TO_UNICODE ('*'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_18_forTable_delimitorsList [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('>'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_19_forTable_delimitorsList [] = {
  TO_UNICODE (':'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_20_forTable_delimitorsList [] = {
  TO_UNICODE ('|'),
  TO_UNICODE ('|'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_delimitorsList [ktable_size_delimitorsList] = {
  {kEntry_0_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__21},
  {kEntry_1_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__26},
  {kEntry_2_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__28},
  {kEntry_3_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__29},
  {kEntry_4_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__2A},
  {kEntry_5_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__2B},
  {kEntry_6_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__2C},
  {kEntry_7_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__3A},
  {kEntry_8_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__3B},
  {kEntry_9_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__3D},
  {kEntry_10_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__3F},
  {kEntry_11_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__40},
  {kEntry_12_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__5E},
  {kEntry_13_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__7B},
  {kEntry_14_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__7C},
  {kEntry_15_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__7D},
  {kEntry_16_forTable_delimitorsList, 1, sara_scanner::sara_scanner_1__7E},
  {kEntry_17_forTable_delimitorsList, 2, sara_scanner::sara_scanner_1__2A_2A},
  {kEntry_18_forTable_delimitorsList, 2, sara_scanner::sara_scanner_1__2D_3E},
  {kEntry_19_forTable_delimitorsList, 2, sara_scanner::sara_scanner_1__3A_3D},
  {kEntry_20_forTable_delimitorsList, 2, sara_scanner::sara_scanner_1__7C_7C}
} ;

sint16 sara_scanner::search_into_delimitorsList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_delimitorsList, ktable_size_delimitorsList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String sara_scanner::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_sara_scanner * _p = (cTokenFor_sara_scanner *) inTokenPtr ;
  C_String s ;
  if (_p == NULL) {
    s << "$$" ;
  }else{
    switch (_p->mTokenCode) {
    case  sara_scanner_1_:
      s << "$$" ;
      break ;
    case  sara_scanner_1_identifier:
      s << "$"
        << "identifier"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->identifierString) ;
      break;
    case  sara_scanner_1_auto:
      s << "$"
        << "auto"
        << "$" ;
      break;
    case  sara_scanner_1_state:
      s << "$"
        << "state"
        << "$" ;
      break;
    case  sara_scanner_1_first:
      s << "$"
        << "first"
        << "$" ;
      break;
    case  sara_scanner_1_last:
      s << "$"
        << "last"
        << "$" ;
      break;
    case  sara_scanner_1_goto:
      s << "$"
        << "goto"
        << "$" ;
      break;
    case  sara_scanner_1_timer:
      s << "$"
        << "timer"
        << "$" ;
      break;
    case  sara_scanner_1_true:
      s << "$"
        << "true"
        << "$" ;
      break;
    case  sara_scanner_1_false:
      s << "$"
        << "false"
        << "$" ;
      break;
    case  sara_scanner_1_nofirst:
      s << "$"
        << "nofirst"
        << "$" ;
      break;
    case  sara_scanner_1_nolast:
      s << "$"
        << "nolast"
        << "$" ;
      break;
    case  sara_scanner_1_modalcompadd:
      s << "$"
        << "modalcompadd"
        << "$" ;
      break;
    case  sara_scanner_1_exclude:
      s << "$"
        << "exclude"
        << "$" ;
      break;
    case  sara_scanner_1_modalcompsub:
      s << "$"
        << "modalcompsub"
        << "$" ;
      break;
    case  sara_scanner_1_include:
      s << "$"
        << "include"
        << "$" ;
      break;
    case  sara_scanner_1_to:
      s << "$"
        << "to"
        << "$" ;
      break;
    case  sara_scanner_1_scenario:
      s << "$"
        << "scenario"
        << "$" ;
      break;
    case  sara_scanner_1_trans:
      s << "$"
        << "trans"
        << "$" ;
      break;
    case  sara_scanner_1_ite_5Fcache:
      s << "$"
        << "ite_cache"
        << "$" ;
      break;
    case  sara_scanner_1_and_5Fcache:
      s << "$"
        << "and_cache"
        << "$" ;
      break;
    case  sara_scanner_1_map:
      s << "$"
        << "map"
        << "$" ;
      break;
    case  sara_scanner_1_bdd:
      s << "$"
        << "bdd"
        << "$" ;
      break;
    case  sara_scanner_1_bool:
      s << "$"
        << "bool"
        << "$" ;
      break;
    case  sara_scanner_1_use_5Fand:
      s << "$"
        << "use_and"
        << "$" ;
      break;
    case  sara_scanner_1_use_5Fite:
      s << "$"
        << "use_ite"
        << "$" ;
      break;
    case  sara_scanner_1_use_5Fand_5Fite:
      s << "$"
        << "use_and_ite"
        << "$" ;
      break;
    case  sara_scanner_1_check:
      s << "$"
        << "check"
        << "$" ;
      break;
    case  sara_scanner_1_checkbool:
      s << "$"
        << "checkbool"
        << "$" ;
      break;
    case  sara_scanner_1_checkidentical:
      s << "$"
        << "checkidentical"
        << "$" ;
      break;
    case  sara_scanner_1__2C:
      s << "$"
        << ","
        << "$" ;
      break;
    case  sara_scanner_1__3B:
      s << "$"
        << ";"
        << "$" ;
      break;
    case  sara_scanner_1__3A:
      s << "$"
        << ":"
        << "$" ;
      break;
    case  sara_scanner_1__7B:
      s << "$"
        << "{"
        << "$" ;
      break;
    case  sara_scanner_1__7D:
      s << "$"
        << "}"
        << "$" ;
      break;
    case  sara_scanner_1__2D_3E:
      s << "$"
        << "->"
        << "$" ;
      break;
    case  sara_scanner_1__26:
      s << "$"
        << "&"
        << "$" ;
      break;
    case  sara_scanner_1__7E:
      s << "$"
        << "~"
        << "$" ;
      break;
    case  sara_scanner_1__3F:
      s << "$"
        << "\?"
        << "$" ;
      break;
    case  sara_scanner_1__21:
      s << "$"
        << "!"
        << "$" ;
      break;
    case  sara_scanner_1__7C:
      s << "$"
        << "|"
        << "$" ;
      break;
    case  sara_scanner_1__7C_7C:
      s << "$"
        << "||"
        << "$" ;
      break;
    case  sara_scanner_1__2B:
      s << "$"
        << "+"
        << "$" ;
      break;
    case  sara_scanner_1__28:
      s << "$"
        << "("
        << "$" ;
      break;
    case  sara_scanner_1__29:
      s << "$"
        << ")"
        << "$" ;
      break;
    case  sara_scanner_1__3A_3D:
      s << "$"
        << ":="
        << "$" ;
      break;
    case  sara_scanner_1__5E:
      s << "$"
        << "^"
        << "$" ;
      break;
    case  sara_scanner_1__3D:
      s << "$"
        << "="
        << "$" ;
      break;
    case  sara_scanner_1__2A:
      s << "$"
        << "*"
        << "$" ;
      break;
    case  sara_scanner_1__40:
      s << "$"
        << "@"
        << "$" ;
      break;
    case  sara_scanner_1__2A_2A:
      s << "$"
        << "**"
        << "$" ;
      break;
    case  sara_scanner_1_literal_5Fstring:
      s << "$"
        << "literal_string"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->identifierString) ;
      break;
    case  sara_scanner_1_machineIdf:
      s << "$"
        << "machineIdf"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->identifierString) ;
      break;
    case  sara_scanner_1_literal_5Finteger:
      s << "$"
        << "literal_integer"
        << "$" ;
      s << " " ;
      s.appendUnsigned (_p->ulongValue) ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      U N I C O D E    S T R I N G S                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Unicode string for '!'
static const utf32 kUnicodeString__21_ [] = {
  TO_UNICODE ('!'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '&'
static const utf32 kUnicodeString__26_ [] = {
  TO_UNICODE ('&'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '('
static const utf32 kUnicodeString__28_ [] = {
  TO_UNICODE ('('),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ')'
static const utf32 kUnicodeString__29_ [] = {
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '*'
static const utf32 kUnicodeString__2A_ [] = {
  TO_UNICODE ('*'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '**'
static const utf32 kUnicodeString__2A__2A_ [] = {
  TO_UNICODE ('*'),
  TO_UNICODE ('*'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '+'
static const utf32 kUnicodeString__2B_ [] = {
  TO_UNICODE ('+'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ','
static const utf32 kUnicodeString__2C_ [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '->'
static const utf32 kUnicodeString__3E__2D_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('>'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ':'
static const utf32 kUnicodeString__3A_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ':='
static const utf32 kUnicodeString__3D__3A_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ';'
static const utf32 kUnicodeString__3B_ [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '='
static const utf32 kUnicodeString__3D_ [] = {
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '?'
static const utf32 kUnicodeString__3F_ [] = {
  TO_UNICODE ('\?'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '@'
static const utf32 kUnicodeString__40_ [] = {
  TO_UNICODE ('@'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '^'
static const utf32 kUnicodeString__5E_ [] = {
  TO_UNICODE ('^'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '{'
static const utf32 kUnicodeString__7B_ [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '|'
static const utf32 kUnicodeString__7C_ [] = {
  TO_UNICODE ('|'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '||'
static const utf32 kUnicodeString__7C__7C_ [] = {
  TO_UNICODE ('|'),
  TO_UNICODE ('|'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '}'
static const utf32 kUnicodeString__7D_ [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '~'
static const utf32 kUnicodeString__7E_ [] = {
  TO_UNICODE ('~'),
  TO_UNICODE (0)
} ; 

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool sara_scanner::
parseLexicalToken (void) {
  cTokenFor_sara_scanner _token ;
  bool loop_ = true ;
  _token.mTokenCode = -1 ;
  while ((_token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
    _token.identifierString.setLengthToZero () ;
    _token.ulongValue = 0 ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token.mTokenCode = search_into_keyWordList (_token.identifierString) ;
        if (_token.mTokenCode == -1) {
          _token.mTokenCode = sara_scanner_1_identifier ;
        }
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__3E__2D_, 2, true)) {
        _token.mTokenCode = sara_scanner_1__2D_3E ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__7C__7C_, 2, true)) {
        _token.mTokenCode = sara_scanner_1__7C_7C ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__3D__3A_, 2, true)) {
        _token.mTokenCode = sara_scanner_1__3A_3D ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__2A__2A_, 2, true)) {
        _token.mTokenCode = sara_scanner_1__2A_2A ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__2C ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__3B ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__3A ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__7B ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__7D ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__26_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__26 ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__7E_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__7E ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__3F_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__3F ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__21_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__21 ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__7C_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__7C ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__2B_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__2B ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__28_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__28 ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__29_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__29 ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__5E_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__5E ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__3D_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__3D ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__2A_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__2A ;
        _enterToken (_token) ;
      }else if (testForInputUTF32String (kUnicodeString__40_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__40 ;
        _enterToken (_token) ;
      }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
        do {
          if (testForInputUTF32Char (TO_UNICODE ('\\'))) {
            if (testForInputUTF32Char (TO_UNICODE ('n'))) {
              scanner_action_enterCharacterIntoString (_token.identifierString, TO_UNICODE ('\n')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\\'))) {
              scanner_action_enterCharacterIntoString (_token.identifierString, TO_UNICODE ('\\')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
              scanner_action_enterCharacterIntoString (_token.identifierString, TO_UNICODE ('\"')) ;
            }else{
              lexicalError (gErrorMessage_1 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputUTF32Char (TO_UNICODE (' ')) ||
              testForInputUTF32Char (TO_UNICODE ('!')) ||
              testForInputUTF32CharRange (TO_UNICODE ('#'), TO_UNICODE ('~'))) {
            scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
          _token.mTokenCode = sara_scanner_1_literal_5Fstring ;
          _enterToken (_token) ;
        }else{
          lexicalError (gErrorMessage_0 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('$'))) {
        if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
            testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
            testForInputUTF32Char (TO_UNICODE ('_'))) {
          do {
            scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
            if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
                testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
                testForInputUTF32Char (TO_UNICODE ('_')) ||
                testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_2 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token.mTokenCode = sara_scanner_1_machineIdf ;
        _enterToken (_token) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        scanner_action_enterDigitIntoUlong (_token.ulongValue, previousChar (), gErrorMessage_3, gErrorMessage_4) ;
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            scanner_action_enterDigitIntoUlong (_token.ulongValue, previousChar (), gErrorMessage_3, gErrorMessage_4) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token.mTokenCode = sara_scanner_1_literal_5Finteger ;
        _enterToken (_token) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32CharRange (TO_UNICODE ('\v'), TO_UNICODE (65533))) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\n'))) {
        }else{
          lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        _token.mTokenCode = sara_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((UNICODE_VALUE (mCurrentChar) == '\0') && (_token.mTemplateStringBeforeToken.length () > 0)) {
    _token.mTokenCode = 0 ;
    _enterToken (_token) ;
  }
  return _token.mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 sara_scanner::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_sara_scanner _token ;
  bool loop_ = true ;
  _token.mTokenCode = -1 ;
  while (_token.mTokenCode < 0) {
    _token.identifierString.setLengthToZero () ;
    _token.ulongValue = 0 ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token.mTokenCode = search_into_keyWordList (_token.identifierString) ;
        if (_token.mTokenCode == -1) {
          _token.mTokenCode = sara_scanner_1_identifier ;
        }
      }else if (testForInputUTF32String (kUnicodeString__3E__2D_, 2, true)) {
        _token.mTokenCode = sara_scanner_1__2D_3E ;
      }else if (testForInputUTF32String (kUnicodeString__7C__7C_, 2, true)) {
        _token.mTokenCode = sara_scanner_1__7C_7C ;
      }else if (testForInputUTF32String (kUnicodeString__3D__3A_, 2, true)) {
        _token.mTokenCode = sara_scanner_1__3A_3D ;
      }else if (testForInputUTF32String (kUnicodeString__2A__2A_, 2, true)) {
        _token.mTokenCode = sara_scanner_1__2A_2A ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__2C ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__3B ;
      }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__3A ;
      }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__7B ;
      }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__7D ;
      }else if (testForInputUTF32String (kUnicodeString__26_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__26 ;
      }else if (testForInputUTF32String (kUnicodeString__7E_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__7E ;
      }else if (testForInputUTF32String (kUnicodeString__3F_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__3F ;
      }else if (testForInputUTF32String (kUnicodeString__21_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__21 ;
      }else if (testForInputUTF32String (kUnicodeString__7C_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__7C ;
      }else if (testForInputUTF32String (kUnicodeString__2B_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__2B ;
      }else if (testForInputUTF32String (kUnicodeString__28_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__28 ;
      }else if (testForInputUTF32String (kUnicodeString__29_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__29 ;
      }else if (testForInputUTF32String (kUnicodeString__5E_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__5E ;
      }else if (testForInputUTF32String (kUnicodeString__3D_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__3D ;
      }else if (testForInputUTF32String (kUnicodeString__2A_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__2A ;
      }else if (testForInputUTF32String (kUnicodeString__40_, 1, true)) {
        _token.mTokenCode = sara_scanner_1__40 ;
      }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
        do {
          if (testForInputUTF32Char (TO_UNICODE ('\\'))) {
            if (testForInputUTF32Char (TO_UNICODE ('n'))) {
              scanner_action_enterCharacterIntoString (_token.identifierString, TO_UNICODE ('\n')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\\'))) {
              scanner_action_enterCharacterIntoString (_token.identifierString, TO_UNICODE ('\\')) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
              scanner_action_enterCharacterIntoString (_token.identifierString, TO_UNICODE ('\"')) ;
            }else{
              lexicalError (gErrorMessage_1 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputUTF32Char (TO_UNICODE (' ')) ||
              testForInputUTF32Char (TO_UNICODE ('!')) ||
              testForInputUTF32CharRange (TO_UNICODE ('#'), TO_UNICODE ('~'))) {
            scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
          _token.mTokenCode = sara_scanner_1_literal_5Fstring ;
        }else{
          lexicalError (gErrorMessage_0 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('$'))) {
        if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
            testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
            testForInputUTF32Char (TO_UNICODE ('_'))) {
          do {
            scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
            if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
                testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
                testForInputUTF32Char (TO_UNICODE ('_')) ||
                testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_2 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token.mTokenCode = sara_scanner_1_machineIdf ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        scanner_action_enterDigitIntoUlong (_token.ulongValue, previousChar (), gErrorMessage_3, gErrorMessage_4) ;
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            scanner_action_enterDigitIntoUlong (_token.ulongValue, previousChar (), gErrorMessage_3, gErrorMessage_4) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token.mTokenCode = sara_scanner_1_literal_5Finteger ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32CharRange (TO_UNICODE ('\v'), TO_UNICODE (65533))) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\n'))) {
        }else{
          lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        _token.mTokenCode = sara_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return _token.mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 sara_scanner::getStylesCount (void) {
  return 7 ;
}

//---------------------------------------------------------------------------*

const char * sara_scanner::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [8] = {"Default style", "Identifiers", "Key words", "Machine names", "Delimitors", "Integer constants", "Character strings", NULL} ;
  return (inIndex < 7) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * sara_scanner::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [8] = {"", "identifier", "keyWords", "machineNameStyle", "delimitors", "integer_csts", "stringStyle", NULL} ;
  return (inIndex < 7) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 sara_scanner::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [54] = {0,
    1 /* sara_scanner_1_identifier */,
    2 /* sara_scanner_1_auto */,
    2 /* sara_scanner_1_state */,
    2 /* sara_scanner_1_first */,
    2 /* sara_scanner_1_last */,
    2 /* sara_scanner_1_goto */,
    2 /* sara_scanner_1_timer */,
    2 /* sara_scanner_1_true */,
    2 /* sara_scanner_1_false */,
    2 /* sara_scanner_1_nofirst */,
    2 /* sara_scanner_1_nolast */,
    2 /* sara_scanner_1_modalcompadd */,
    2 /* sara_scanner_1_exclude */,
    2 /* sara_scanner_1_modalcompsub */,
    2 /* sara_scanner_1_include */,
    2 /* sara_scanner_1_to */,
    2 /* sara_scanner_1_scenario */,
    2 /* sara_scanner_1_trans */,
    2 /* sara_scanner_1_ite_5Fcache */,
    2 /* sara_scanner_1_and_5Fcache */,
    2 /* sara_scanner_1_map */,
    2 /* sara_scanner_1_bdd */,
    2 /* sara_scanner_1_bool */,
    2 /* sara_scanner_1_use_5Fand */,
    2 /* sara_scanner_1_use_5Fite */,
    2 /* sara_scanner_1_use_5Fand_5Fite */,
    2 /* sara_scanner_1_check */,
    2 /* sara_scanner_1_checkbool */,
    2 /* sara_scanner_1_checkidentical */,
    4 /* sara_scanner_1__2C */,
    4 /* sara_scanner_1__3B */,
    4 /* sara_scanner_1__3A */,
    4 /* sara_scanner_1__7B */,
    4 /* sara_scanner_1__7D */,
    4 /* sara_scanner_1__2D_3E */,
    4 /* sara_scanner_1__26 */,
    4 /* sara_scanner_1__7E */,
    4 /* sara_scanner_1__3F */,
    4 /* sara_scanner_1__21 */,
    4 /* sara_scanner_1__7C */,
    4 /* sara_scanner_1__7C_7C */,
    4 /* sara_scanner_1__2B */,
    4 /* sara_scanner_1__28 */,
    4 /* sara_scanner_1__29 */,
    4 /* sara_scanner_1__3A_3D */,
    4 /* sara_scanner_1__5E */,
    4 /* sara_scanner_1__3D */,
    4 /* sara_scanner_1__2A */,
    4 /* sara_scanner_1__40 */,
    4 /* sara_scanner_1__2A_2A */,
    6 /* sara_scanner_1_literal_5Fstring */,
    3 /* sara_scanner_1_machineIdf */,
    5 /* sara_scanner_1_literal_5Finteger */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void sara_scanner::_enterToken (const cTokenFor_sara_scanner & inToken) {
  cTokenFor_sara_scanner * _p = NULL ;
  macroMyNew (_p, cTokenFor_sara_scanner ()) ;
  _p->mTokenCode = inToken.mTokenCode ;
  _p->mFirstLocation = mTokenFirstLocation ;
  _p->mLastLocation  = mTokenLastLocation ;
  _p->mTemplateStringBeforeToken  = inToken.mTemplateStringBeforeToken ;
  _p->identifierString = inToken.identifierString ;
  _p->ulongValue = inToken.ulongValue ;
  enterTokenFromPointer (_p) ;
}

//---------------------------------------------------------------------------*

void sara_scanner::
_assignFromAttribute_identifierString (GGS_lstring & outValue) const {
  cTokenFor_sara_scanner * _p = (cTokenFor_sara_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->identifierString) ;
}

//---------------------------------------------------------------------------*

C_String sara_scanner::
_attributeValue_identifierString (void) const {
  cTokenFor_sara_scanner * _p = (cTokenFor_sara_scanner *) mCurrentTokenPtr ;
  return _p->identifierString ;
}

//---------------------------------------------------------------------------*

void sara_scanner::
_assignFromAttribute_ulongValue (GGS_luint & outValue) const {
  cTokenFor_sara_scanner * _p = (cTokenFor_sara_scanner *) mCurrentTokenPtr ;
  outValue = GGS_luint (* this, _p->ulongValue) ;
}

//---------------------------------------------------------------------------*

uint32 sara_scanner::
_attributeValue_ulongValue (void) const {
  cTokenFor_sara_scanner * _p = (cTokenFor_sara_scanner *) mCurrentTokenPtr ;
  return _p->ulongValue ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

