//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'sara_scanner.cpp'                           *
//               Generated by version 0.14.1 (LL(1) grammar)                 *
//                     february 17th, 2005, at 16h7'46"                      *
//                                                                           *
// This program is free software; you can redistribute it and/or modify it   *
// under the terms of the GNU General Public License as published by the     *
// Free Software Foundation.                                                 *
//                                                                           *
// This program is distributed in the hope it will be useful, but WITHOUT    *
// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *
// more details.                                                             *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include <ctype.h>
#include <string.h>

#include "sara_scanner.h"

#include "galgas/lexical_actions.h" // Generated by 'include "..."'

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructor                                 *
//                                                                           *
//---------------------------------------------------------------------------*

sara_scanner::
sara_scanner (AC_galgas_io * inGalgasInputOutput)
: C_lexique (inGalgasInputOutput) {
  ulongValue = 0 ;
  identifierString.clearString () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0 (incorrectMachineNameBeginning) :
static const char * gErrorMessage_0 = "incorrect machine name beginning" ;
//--- Message 1 (decimalNumberTooLarge) :
static const char * gErrorMessage_1 = "decimal number too large" ;
//--- Message 2 (internalError) :
static const char * gErrorMessage_2 = "internal error" ;
//--- Message 3 (incorrectEndOfComment) :
static const char * gErrorMessage_3 = "incorrect end of comment" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const char * gSyntaxErrorMessage_identifier = "an identifier" ;
//--- Syntax error message for terminal '$auto$' :
static const char * gSyntaxErrorMessage_auto = "the 'auto' key word" ;
//--- Syntax error message for terminal '$state$' :
static const char * gSyntaxErrorMessage_state = "the 'state' key word" ;
//--- Syntax error message for terminal '$first$' :
static const char * gSyntaxErrorMessage_first = "the 'first' key word" ;
//--- Syntax error message for terminal '$last$' :
static const char * gSyntaxErrorMessage_last = "the 'last' key word" ;
//--- Syntax error message for terminal '$goto$' :
static const char * gSyntaxErrorMessage_goto = "the 'goto' key word" ;
//--- Syntax error message for terminal '$timer$' :
static const char * gSyntaxErrorMessage_timer = "the 'timer' key word" ;
//--- Syntax error message for terminal '$all$' :
static const char * gSyntaxErrorMessage_all = "the 'all' key word" ;
//--- Syntax error message for terminal '$none$' :
static const char * gSyntaxErrorMessage_none = "the 'none' key word" ;
//--- Syntax error message for terminal '$check$' :
static const char * gSyntaxErrorMessage_check = "the 'check' key word" ;
//--- Syntax error message for terminal '$nolast$' :
static const char * gSyntaxErrorMessage_nolast = "the 'nolast' key word" ;
//--- Syntax error message for terminal '$modalcomp$' :
static const char * gSyntaxErrorMessage_modalcomp = "the 'modalcomp' key word" ;
//--- Syntax error message for terminal '$exclude$' :
static const char * gSyntaxErrorMessage_exclude = "the 'exclude' key word" ;
//--- Syntax error message for terminal '$to$' :
static const char * gSyntaxErrorMessage_to = "the 'to' key word" ;
//--- Syntax error message for terminal '$,$' :
static const char * gSyntaxErrorMessage__2C = "the ',' delimitor" ;
//--- Syntax error message for terminal '$;$' :
static const char * gSyntaxErrorMessage__3B = "the ';' delimitor" ;
//--- Syntax error message for terminal '$:$' :
static const char * gSyntaxErrorMessage__3A = "the ':' delimitor" ;
//--- Syntax error message for terminal '${$' :
static const char * gSyntaxErrorMessage__7B = "the '{' delimitor" ;
//--- Syntax error message for terminal '$}$' :
static const char * gSyntaxErrorMessage__7D = "the '}' delimitor" ;
//--- Syntax error message for terminal '$->$' :
static const char * gSyntaxErrorMessage__2D_3E = "the '->' delimitor" ;
//--- Syntax error message for terminal '$&$' :
static const char * gSyntaxErrorMessage__26 = "the '&' delimitor" ;
//--- Syntax error message for terminal '$!$' :
static const char * gSyntaxErrorMessage__21 = "the '!' delimitor" ;
//--- Syntax error message for terminal '$?$' :
static const char * gSyntaxErrorMessage__3F = "the '\?' delimitor" ;
//--- Syntax error message for terminal '$|$' :
static const char * gSyntaxErrorMessage__7C = "the '|' delimitor" ;
//--- Syntax error message for terminal '$($' :
static const char * gSyntaxErrorMessage__28 = "the '(' delimitor" ;
//--- Syntax error message for terminal '$)$' :
static const char * gSyntaxErrorMessage__29 = "the ')' delimitor" ;
//--- Syntax error message for terminal '$:=$' :
static const char * gSyntaxErrorMessage__3A_3D = "the ':=' delimitor" ;
//--- Syntax error message for terminal '$^$' :
static const char * gSyntaxErrorMessage__5E = "the '^' delimitor" ;
//--- Syntax error message for terminal '$=$' :
static const char * gSyntaxErrorMessage__3D = "the '=' delimitor" ;
//--- Syntax error message for terminal '$*$' :
static const char * gSyntaxErrorMessage__2A = "the '*' delimitor" ;
//--- Syntax error message for terminal '$@$' :
static const char * gSyntaxErrorMessage__40 = "the '@' delimitor" ;
//--- Syntax error message for terminal '$%$' :
static const char * gSyntaxErrorMessage__25 = "the '%' delimitor" ;
//--- Syntax error message for terminal '$**$' :
static const char * gSyntaxErrorMessage__2A_2A = "the '**' delimitor" ;
//--- Syntax error message for terminal '$machineIdf$' :
static const char * gSyntaxErrorMessage_machineIdf = "a machine name ($...)" ;
//--- Syntax error message for terminal '$literal_integer$' :
static const char * gSyntaxErrorMessage_literal_5Finteger = "a decimal number" ;
//---------------------------------------------------------------------------*

void sara_scanner::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_string & outSyntaxErrorMessage) {
  static const char * syntaxErrorMessageArray [36] = {"end of source",
       gSyntaxErrorMessage_identifier,
       gSyntaxErrorMessage_auto,
       gSyntaxErrorMessage_state,
       gSyntaxErrorMessage_first,
       gSyntaxErrorMessage_last,
       gSyntaxErrorMessage_goto,
       gSyntaxErrorMessage_timer,
       gSyntaxErrorMessage_all,
       gSyntaxErrorMessage_none,
       gSyntaxErrorMessage_check,
       gSyntaxErrorMessage_nolast,
       gSyntaxErrorMessage_modalcomp,
       gSyntaxErrorMessage_exclude,
       gSyntaxErrorMessage_to,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__2D_3E,
       gSyntaxErrorMessage__26,
       gSyntaxErrorMessage__21,
       gSyntaxErrorMessage__3F,
       gSyntaxErrorMessage__7C,
       gSyntaxErrorMessage__28,
       gSyntaxErrorMessage__29,
       gSyntaxErrorMessage__3A_3D,
       gSyntaxErrorMessage__5E,
       gSyntaxErrorMessage__3D,
       gSyntaxErrorMessage__2A,
       gSyntaxErrorMessage__40,
       gSyntaxErrorMessage__25,
       gSyntaxErrorMessage__2A_2A,
       gSyntaxErrorMessage_machineIdf,
       gSyntaxErrorMessage_literal_5Finteger} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'keyWordList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 sara_scanner::sara_scanner_table_size_keyWordList = 13 ;

const C_lexique_table_entry sara_scanner::sara_scanner_table_for_keyWordList [13] = {
  C_lexique_table_entry ("to", 2, sara_scanner_1_to),
  C_lexique_table_entry ("all", 3, sara_scanner_1_all),
  C_lexique_table_entry ("auto", 4, sara_scanner_1_auto),
  C_lexique_table_entry ("goto", 4, sara_scanner_1_goto),
  C_lexique_table_entry ("last", 4, sara_scanner_1_last),
  C_lexique_table_entry ("none", 4, sara_scanner_1_none),
  C_lexique_table_entry ("check", 5, sara_scanner_1_check),
  C_lexique_table_entry ("first", 5, sara_scanner_1_first),
  C_lexique_table_entry ("state", 5, sara_scanner_1_state),
  C_lexique_table_entry ("timer", 5, sara_scanner_1_timer),
  C_lexique_table_entry ("nolast", 6, sara_scanner_1_nolast),
  C_lexique_table_entry ("exclude", 7, sara_scanner_1_exclude),
  C_lexique_table_entry ("modalcomp", 9, sara_scanner_1_modalcomp)
} ;

sint16 sara_scanner::search_into_keyWordList (const C_string & inSearchedString) {
  return searchInList (inSearchedString, sara_scanner_table_for_keyWordList, sara_scanner_table_size_keyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'delimitorsList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 sara_scanner::sara_scanner_table_size_delimitorsList = 19 ;

const C_lexique_table_entry sara_scanner::sara_scanner_table_for_delimitorsList [19] = {
  C_lexique_table_entry ("!", 1, sara_scanner_1__21),
  C_lexique_table_entry ("%", 1, sara_scanner_1__25),
  C_lexique_table_entry ("&", 1, sara_scanner_1__26),
  C_lexique_table_entry ("(", 1, sara_scanner_1__28),
  C_lexique_table_entry (")", 1, sara_scanner_1__29),
  C_lexique_table_entry ("*", 1, sara_scanner_1__2A),
  C_lexique_table_entry (",", 1, sara_scanner_1__2C),
  C_lexique_table_entry (":", 1, sara_scanner_1__3A),
  C_lexique_table_entry (";", 1, sara_scanner_1__3B),
  C_lexique_table_entry ("=", 1, sara_scanner_1__3D),
  C_lexique_table_entry ("\?", 1, sara_scanner_1__3F),
  C_lexique_table_entry ("@", 1, sara_scanner_1__40),
  C_lexique_table_entry ("^", 1, sara_scanner_1__5E),
  C_lexique_table_entry ("{", 1, sara_scanner_1__7B),
  C_lexique_table_entry ("|", 1, sara_scanner_1__7C),
  C_lexique_table_entry ("}", 1, sara_scanner_1__7D),
  C_lexique_table_entry ("**", 2, sara_scanner_1__2A_2A),
  C_lexique_table_entry ("->", 2, sara_scanner_1__2D_3E),
  C_lexique_table_entry (":=", 2, sara_scanner_1__3A_3D)
} ;

sint16 sara_scanner::search_into_delimitorsList (const C_string & inSearchedString) {
  return searchInList (inSearchedString, sara_scanner_table_for_delimitorsList, sara_scanner_table_size_delimitorsList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Get next token : method 'parseLexicalToken'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_scanner::
parseLexicalToken (const bool inPropagateLexicaleErrorException) {
  bool loop_ = true ;
  mCurrentTokenCode = -1 ;
  ulongValue = 0 ;
  identifierString.clearString () ;
  while (mCurrentTokenCode < 0) {
    mCurrentTokenStartLocation = getCurrentLocation () ;
    try{
      if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          enterCharacterIntoString (identifierString, getPreviousChar (), * this) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        mCurrentTokenCode = search_into_keyWordList (identifierString) ;
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = sara_scanner_1_identifier ;
        }
      }else if (testForInputString ("->", 2)) {
        mCurrentTokenCode = sara_scanner_1__2D_3E ;
      }else if (testForInputString (":=", 2)) {
        mCurrentTokenCode = sara_scanner_1__3A_3D ;
      }else if (testForInputString ("**", 2)) {
        mCurrentTokenCode = sara_scanner_1__2A_2A ;
      }else if (testForInputString (",", 1)) {
        mCurrentTokenCode = sara_scanner_1__2C ;
      }else if (testForInputString (";", 1)) {
        mCurrentTokenCode = sara_scanner_1__3B ;
      }else if (testForInputString (":", 1)) {
        mCurrentTokenCode = sara_scanner_1__3A ;
      }else if (testForInputString ("{", 1)) {
        mCurrentTokenCode = sara_scanner_1__7B ;
      }else if (testForInputString ("}", 1)) {
        mCurrentTokenCode = sara_scanner_1__7D ;
      }else if (testForInputString ("&", 1)) {
        mCurrentTokenCode = sara_scanner_1__26 ;
      }else if (testForInputString ("!", 1)) {
        mCurrentTokenCode = sara_scanner_1__21 ;
      }else if (testForInputString ("\?", 1)) {
        mCurrentTokenCode = sara_scanner_1__3F ;
      }else if (testForInputString ("|", 1)) {
        mCurrentTokenCode = sara_scanner_1__7C ;
      }else if (testForInputString ("(", 1)) {
        mCurrentTokenCode = sara_scanner_1__28 ;
      }else if (testForInputString (")", 1)) {
        mCurrentTokenCode = sara_scanner_1__29 ;
      }else if (testForInputString ("^", 1)) {
        mCurrentTokenCode = sara_scanner_1__5E ;
      }else if (testForInputString ("=", 1)) {
        mCurrentTokenCode = sara_scanner_1__3D ;
      }else if (testForInputString ("*", 1)) {
        mCurrentTokenCode = sara_scanner_1__2A ;
      }else if (testForInputString ("@", 1)) {
        mCurrentTokenCode = sara_scanner_1__40 ;
      }else if (testForInputString ("%", 1)) {
        mCurrentTokenCode = sara_scanner_1__25 ;
      }else if (testForInputChar ('$')) {
        if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z') ||
            testForInputChar ('_')) {
          do {
            enterCharacterIntoString (identifierString, getPreviousChar (), * this) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('_') ||
                testForInputChar ('0', '9')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_0) ;
        }
        mCurrentTokenCode = sara_scanner_1_machineIdf ;
      }else if (testForInputChar ('0', '9')) {
        enterDigitIntoUlong (ulongValue, getPreviousChar (), gErrorMessage_1, gErrorMessage_2, * this) ;
        do {
          if (testForInputChar ('0', '9')) {
            enterDigitIntoUlong (ulongValue, getPreviousChar (), gErrorMessage_1, gErrorMessage_2, * this) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        mCurrentTokenCode = sara_scanner_1_literal_5Finteger ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\n')) {
        }else{
          lexicalError (gErrorMessage_3) ;
        }
      }else if (testForInputChar ('\0')) { // End of source text ? 
        mCurrentTokenCode = sara_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        lexicalError ("Unknown character") ;
      }
    }catch (const C_lexicalErrorException &) {
      mCurrentTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      if (inPropagateLexicaleErrorException) {
        throw ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 sara_scanner::getStylesCount (void) {
  return 6 ;
}

//---------------------------------------------------------------------------*

const char * sara_scanner::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [7] = {"Default style", "Identifiers", "Key words", "Machine names", "Delimitors", "Integer constants", NULL} ;
  return (inIndex < 6) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 sara_scanner::
getTerminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [36] = {0,
    1 /* sara_scanner_1_identifier */,
    2 /* sara_scanner_1_auto */,
    2 /* sara_scanner_1_state */,
    2 /* sara_scanner_1_first */,
    2 /* sara_scanner_1_last */,
    2 /* sara_scanner_1_goto */,
    2 /* sara_scanner_1_timer */,
    2 /* sara_scanner_1_all */,
    2 /* sara_scanner_1_none */,
    2 /* sara_scanner_1_check */,
    2 /* sara_scanner_1_nolast */,
    2 /* sara_scanner_1_modalcomp */,
    2 /* sara_scanner_1_exclude */,
    2 /* sara_scanner_1_to */,
    4 /* sara_scanner_1__2C */,
    4 /* sara_scanner_1__3B */,
    4 /* sara_scanner_1__3A */,
    4 /* sara_scanner_1__7B */,
    4 /* sara_scanner_1__7D */,
    4 /* sara_scanner_1__2D_3E */,
    4 /* sara_scanner_1__26 */,
    4 /* sara_scanner_1__21 */,
    4 /* sara_scanner_1__3F */,
    4 /* sara_scanner_1__7C */,
    4 /* sara_scanner_1__28 */,
    4 /* sara_scanner_1__29 */,
    4 /* sara_scanner_1__3A_3D */,
    4 /* sara_scanner_1__5E */,
    4 /* sara_scanner_1__3D */,
    4 /* sara_scanner_1__2A */,
    4 /* sara_scanner_1__40 */,
    4 /* sara_scanner_1__25 */,
    4 /* sara_scanner_1__2A_2A */,
    3 /* sara_scanner_1_machineIdf */,
    5 /* sara_scanner_1_literal_5Finteger */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

