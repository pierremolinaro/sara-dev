//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'sara_scanner.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 29th, 2008, at 22h58'5"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "sara_scanner.h"

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_sara_scanner::cTokenFor_sara_scanner (void) :
identifierString (),
ulongValue () {
}

//---------------------------------------------------------------------------*

sara_scanner::
sara_scanner (C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inParametersPtr, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

sara_scanner::
sara_scanner (C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inParametersPtr, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const char * gErrorMessage_0 = "string does not end with '\"'" ;
//--- Message 1
static const char * gErrorMessage_1 = "this character cannot appear within a string" ;
//--- Message 2
static const char * gErrorMessage_2 = "incorrect machine name beginning" ;
//--- Message 3
static const char * gErrorMessage_3 = "decimal number too large" ;
//--- Message 4
static const char * gErrorMessage_4 = "internal error" ;
//--- Message 5
static const char * gErrorMessage_5 = "incorrect end of comment" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const char * gSyntaxErrorMessage_identifier = "an identifier" ;

//--- Syntax error message for terminal '$auto$' :
static const char * gSyntaxErrorMessage_auto = "the 'auto' key word" ;

//--- Syntax error message for terminal '$state$' :
static const char * gSyntaxErrorMessage_state = "the 'state' key word" ;

//--- Syntax error message for terminal '$first$' :
static const char * gSyntaxErrorMessage_first = "the 'first' key word" ;

//--- Syntax error message for terminal '$last$' :
static const char * gSyntaxErrorMessage_last = "the 'last' key word" ;

//--- Syntax error message for terminal '$goto$' :
static const char * gSyntaxErrorMessage_goto = "the 'goto' key word" ;

//--- Syntax error message for terminal '$timer$' :
static const char * gSyntaxErrorMessage_timer = "the 'timer' key word" ;

//--- Syntax error message for terminal '$true$' :
static const char * gSyntaxErrorMessage_true = "the 'true' key word" ;

//--- Syntax error message for terminal '$false$' :
static const char * gSyntaxErrorMessage_false = "the 'false' key word" ;

//--- Syntax error message for terminal '$nofirst$' :
static const char * gSyntaxErrorMessage_nofirst = "the 'nofirst' key word" ;

//--- Syntax error message for terminal '$nolast$' :
static const char * gSyntaxErrorMessage_nolast = "the 'nolast' key word" ;

//--- Syntax error message for terminal '$modalcompadd$' :
static const char * gSyntaxErrorMessage_modalcompadd = "the 'modalcompadd' key word" ;

//--- Syntax error message for terminal '$exclude$' :
static const char * gSyntaxErrorMessage_exclude = "the 'exclude' key word" ;

//--- Syntax error message for terminal '$modalcompsub$' :
static const char * gSyntaxErrorMessage_modalcompsub = "the 'modalcompsub' key word" ;

//--- Syntax error message for terminal '$include$' :
static const char * gSyntaxErrorMessage_include = "the 'include' key word" ;

//--- Syntax error message for terminal '$to$' :
static const char * gSyntaxErrorMessage_to = "the 'to' key word" ;

//--- Syntax error message for terminal '$scenario$' :
static const char * gSyntaxErrorMessage_scenario = "the 'scenario' key word" ;

//--- Syntax error message for terminal '$trans$' :
static const char * gSyntaxErrorMessage_trans = "the 'trans' key word" ;

//--- Syntax error message for terminal '$ite_cache$' :
static const char * gSyntaxErrorMessage_ite_5Fcache = "the 'ite_cache' key word" ;

//--- Syntax error message for terminal '$and_cache$' :
static const char * gSyntaxErrorMessage_and_5Fcache = "the 'and_cache' key word" ;

//--- Syntax error message for terminal '$map$' :
static const char * gSyntaxErrorMessage_map = "the 'map' key word" ;

//--- Syntax error message for terminal '$bdd$' :
static const char * gSyntaxErrorMessage_bdd = "the 'bdd' key word" ;

//--- Syntax error message for terminal '$bool$' :
static const char * gSyntaxErrorMessage_bool = "the 'bool' key word" ;

//--- Syntax error message for terminal '$use_and$' :
static const char * gSyntaxErrorMessage_use_5Fand = "the 'use_and' key word" ;

//--- Syntax error message for terminal '$use_ite$' :
static const char * gSyntaxErrorMessage_use_5Fite = "the 'use_ite' key word" ;

//--- Syntax error message for terminal '$use_and_ite$' :
static const char * gSyntaxErrorMessage_use_5Fand_5Fite = "the 'use_and_ite' key word" ;

//--- Syntax error message for terminal '$check$' :
static const char * gSyntaxErrorMessage_check = "the 'check' key word" ;

//--- Syntax error message for terminal '$checkbool$' :
static const char * gSyntaxErrorMessage_checkbool = "the 'checkbool' key word" ;

//--- Syntax error message for terminal '$checkidentical$' :
static const char * gSyntaxErrorMessage_checkidentical = "the 'checkidentical' key word" ;

//--- Syntax error message for terminal '$,$' :
static const char * gSyntaxErrorMessage__2C = "the ',' delimitor" ;

//--- Syntax error message for terminal '$;$' :
static const char * gSyntaxErrorMessage__3B = "the ';' delimitor" ;

//--- Syntax error message for terminal '$:$' :
static const char * gSyntaxErrorMessage__3A = "the ':' delimitor" ;

//--- Syntax error message for terminal '${$' :
static const char * gSyntaxErrorMessage__7B = "the '{' delimitor" ;

//--- Syntax error message for terminal '$}$' :
static const char * gSyntaxErrorMessage__7D = "the '}' delimitor" ;

//--- Syntax error message for terminal '$->$' :
static const char * gSyntaxErrorMessage__2D_3E = "the '->' delimitor" ;

//--- Syntax error message for terminal '$&$' :
static const char * gSyntaxErrorMessage__26 = "the '&' delimitor" ;

//--- Syntax error message for terminal '$~$' :
static const char * gSyntaxErrorMessage__7E = "the '~' delimitor" ;

//--- Syntax error message for terminal '$?$' :
static const char * gSyntaxErrorMessage__3F = "the '\?' delimitor" ;

//--- Syntax error message for terminal '$!$' :
static const char * gSyntaxErrorMessage__21 = "the '!' delimitor" ;

//--- Syntax error message for terminal '$|$' :
static const char * gSyntaxErrorMessage__7C = "the '|' delimitor" ;

//--- Syntax error message for terminal '$||$' :
static const char * gSyntaxErrorMessage__7C_7C = "the '||' delimitor" ;

//--- Syntax error message for terminal '$+$' :
static const char * gSyntaxErrorMessage__2B = "the '+' delimitor" ;

//--- Syntax error message for terminal '$($' :
static const char * gSyntaxErrorMessage__28 = "the '(' delimitor" ;

//--- Syntax error message for terminal '$)$' :
static const char * gSyntaxErrorMessage__29 = "the ')' delimitor" ;

//--- Syntax error message for terminal '$:=$' :
static const char * gSyntaxErrorMessage__3A_3D = "the ':=' delimitor" ;

//--- Syntax error message for terminal '$^$' :
static const char * gSyntaxErrorMessage__5E = "the '^' delimitor" ;

//--- Syntax error message for terminal '$=$' :
static const char * gSyntaxErrorMessage__3D = "the '=' delimitor" ;

//--- Syntax error message for terminal '$*$' :
static const char * gSyntaxErrorMessage__2A = "the '*' delimitor" ;

//--- Syntax error message for terminal '$@$' :
static const char * gSyntaxErrorMessage__40 = "the '@' delimitor" ;

//--- Syntax error message for terminal '$**$' :
static const char * gSyntaxErrorMessage__2A_2A = "the '**' delimitor" ;

//--- Syntax error message for terminal '$literal_string$' :
static const char * gSyntaxErrorMessage_literal_5Fstring = "a character string constant \"...\"" ;

//--- Syntax error message for terminal '$machineIdf$' :
static const char * gSyntaxErrorMessage_machineIdf = "a machine name ($...)" ;

//--- Syntax error message for terminal '$literal_integer$' :
static const char * gSyntaxErrorMessage_literal_5Finteger = "a decimal number" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void sara_scanner::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const char * syntaxErrorMessageArray [54] = {"end of source",
       gSyntaxErrorMessage_identifier,
       gSyntaxErrorMessage_auto,
       gSyntaxErrorMessage_state,
       gSyntaxErrorMessage_first,
       gSyntaxErrorMessage_last,
       gSyntaxErrorMessage_goto,
       gSyntaxErrorMessage_timer,
       gSyntaxErrorMessage_true,
       gSyntaxErrorMessage_false,
       gSyntaxErrorMessage_nofirst,
       gSyntaxErrorMessage_nolast,
       gSyntaxErrorMessage_modalcompadd,
       gSyntaxErrorMessage_exclude,
       gSyntaxErrorMessage_modalcompsub,
       gSyntaxErrorMessage_include,
       gSyntaxErrorMessage_to,
       gSyntaxErrorMessage_scenario,
       gSyntaxErrorMessage_trans,
       gSyntaxErrorMessage_ite_5Fcache,
       gSyntaxErrorMessage_and_5Fcache,
       gSyntaxErrorMessage_map,
       gSyntaxErrorMessage_bdd,
       gSyntaxErrorMessage_bool,
       gSyntaxErrorMessage_use_5Fand,
       gSyntaxErrorMessage_use_5Fite,
       gSyntaxErrorMessage_use_5Fand_5Fite,
       gSyntaxErrorMessage_check,
       gSyntaxErrorMessage_checkbool,
       gSyntaxErrorMessage_checkidentical,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__2D_3E,
       gSyntaxErrorMessage__26,
       gSyntaxErrorMessage__7E,
       gSyntaxErrorMessage__3F,
       gSyntaxErrorMessage__21,
       gSyntaxErrorMessage__7C,
       gSyntaxErrorMessage__7C_7C,
       gSyntaxErrorMessage__2B,
       gSyntaxErrorMessage__28,
       gSyntaxErrorMessage__29,
       gSyntaxErrorMessage__3A_3D,
       gSyntaxErrorMessage__5E,
       gSyntaxErrorMessage__3D,
       gSyntaxErrorMessage__2A,
       gSyntaxErrorMessage__40,
       gSyntaxErrorMessage__2A_2A,
       gSyntaxErrorMessage_literal_5Fstring,
       gSyntaxErrorMessage_machineIdf,
       gSyntaxErrorMessage_literal_5Finteger} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'keyWordList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 sara_scanner::sara_scanner_table_size_keyWordList = 28 ;

const C_lexique_table_entry sara_scanner::sara_scanner_table_for_keyWordList [28] = {
  C_lexique_table_entry ("to", 2, sara_scanner_1_to),
  C_lexique_table_entry ("bdd", 3, sara_scanner_1_bdd),
  C_lexique_table_entry ("map", 3, sara_scanner_1_map),
  C_lexique_table_entry ("auto", 4, sara_scanner_1_auto),
  C_lexique_table_entry ("bool", 4, sara_scanner_1_bool),
  C_lexique_table_entry ("goto", 4, sara_scanner_1_goto),
  C_lexique_table_entry ("last", 4, sara_scanner_1_last),
  C_lexique_table_entry ("true", 4, sara_scanner_1_true),
  C_lexique_table_entry ("check", 5, sara_scanner_1_check),
  C_lexique_table_entry ("false", 5, sara_scanner_1_false),
  C_lexique_table_entry ("first", 5, sara_scanner_1_first),
  C_lexique_table_entry ("state", 5, sara_scanner_1_state),
  C_lexique_table_entry ("timer", 5, sara_scanner_1_timer),
  C_lexique_table_entry ("trans", 5, sara_scanner_1_trans),
  C_lexique_table_entry ("nolast", 6, sara_scanner_1_nolast),
  C_lexique_table_entry ("exclude", 7, sara_scanner_1_exclude),
  C_lexique_table_entry ("include", 7, sara_scanner_1_include),
  C_lexique_table_entry ("nofirst", 7, sara_scanner_1_nofirst),
  C_lexique_table_entry ("use_and", 7, sara_scanner_1_use_5Fand),
  C_lexique_table_entry ("use_ite", 7, sara_scanner_1_use_5Fite),
  C_lexique_table_entry ("scenario", 8, sara_scanner_1_scenario),
  C_lexique_table_entry ("and_cache", 9, sara_scanner_1_and_5Fcache),
  C_lexique_table_entry ("checkbool", 9, sara_scanner_1_checkbool),
  C_lexique_table_entry ("ite_cache", 9, sara_scanner_1_ite_5Fcache),
  C_lexique_table_entry ("use_and_ite", 11, sara_scanner_1_use_5Fand_5Fite),
  C_lexique_table_entry ("modalcompadd", 12, sara_scanner_1_modalcompadd),
  C_lexique_table_entry ("modalcompsub", 12, sara_scanner_1_modalcompsub),
  C_lexique_table_entry ("checkidentical", 14, sara_scanner_1_checkidentical)
} ;

sint16 sara_scanner::search_into_keyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, sara_scanner_table_for_keyWordList, sara_scanner_table_size_keyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'delimitorsList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 sara_scanner::sara_scanner_table_size_delimitorsList = 21 ;

const C_lexique_table_entry sara_scanner::sara_scanner_table_for_delimitorsList [21] = {
  C_lexique_table_entry ("!", 1, sara_scanner_1__21),
  C_lexique_table_entry ("&", 1, sara_scanner_1__26),
  C_lexique_table_entry ("(", 1, sara_scanner_1__28),
  C_lexique_table_entry (")", 1, sara_scanner_1__29),
  C_lexique_table_entry ("*", 1, sara_scanner_1__2A),
  C_lexique_table_entry ("+", 1, sara_scanner_1__2B),
  C_lexique_table_entry (",", 1, sara_scanner_1__2C),
  C_lexique_table_entry (":", 1, sara_scanner_1__3A),
  C_lexique_table_entry (";", 1, sara_scanner_1__3B),
  C_lexique_table_entry ("=", 1, sara_scanner_1__3D),
  C_lexique_table_entry ("\?", 1, sara_scanner_1__3F),
  C_lexique_table_entry ("@", 1, sara_scanner_1__40),
  C_lexique_table_entry ("^", 1, sara_scanner_1__5E),
  C_lexique_table_entry ("{", 1, sara_scanner_1__7B),
  C_lexique_table_entry ("|", 1, sara_scanner_1__7C),
  C_lexique_table_entry ("}", 1, sara_scanner_1__7D),
  C_lexique_table_entry ("~", 1, sara_scanner_1__7E),
  C_lexique_table_entry ("**", 2, sara_scanner_1__2A_2A),
  C_lexique_table_entry ("->", 2, sara_scanner_1__2D_3E),
  C_lexique_table_entry (":=", 2, sara_scanner_1__3A_3D),
  C_lexique_table_entry ("||", 2, sara_scanner_1__7C_7C)
} ;

sint16 sara_scanner::search_into_delimitorsList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, sara_scanner_table_for_delimitorsList, sara_scanner_table_size_delimitorsList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String sara_scanner::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_sara_scanner * _p = (cTokenFor_sara_scanner *) inTokenPtr ;
  C_String s ;
  if (_p == NULL) {
    s << "$$" ;
  }else{
    switch (_p->_mTokenCode) {
    case  sara_scanner_1_:
      s << "$$" ;
      break ;
    case  sara_scanner_1_identifier:
      s << '$'
        << "identifier"
        << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->identifierString) ;
      break;
    case  sara_scanner_1_auto:
      s << '$'
        << "auto"
        << '$' ;
      break;
    case  sara_scanner_1_state:
      s << '$'
        << "state"
        << '$' ;
      break;
    case  sara_scanner_1_first:
      s << '$'
        << "first"
        << '$' ;
      break;
    case  sara_scanner_1_last:
      s << '$'
        << "last"
        << '$' ;
      break;
    case  sara_scanner_1_goto:
      s << '$'
        << "goto"
        << '$' ;
      break;
    case  sara_scanner_1_timer:
      s << '$'
        << "timer"
        << '$' ;
      break;
    case  sara_scanner_1_true:
      s << '$'
        << "true"
        << '$' ;
      break;
    case  sara_scanner_1_false:
      s << '$'
        << "false"
        << '$' ;
      break;
    case  sara_scanner_1_nofirst:
      s << '$'
        << "nofirst"
        << '$' ;
      break;
    case  sara_scanner_1_nolast:
      s << '$'
        << "nolast"
        << '$' ;
      break;
    case  sara_scanner_1_modalcompadd:
      s << '$'
        << "modalcompadd"
        << '$' ;
      break;
    case  sara_scanner_1_exclude:
      s << '$'
        << "exclude"
        << '$' ;
      break;
    case  sara_scanner_1_modalcompsub:
      s << '$'
        << "modalcompsub"
        << '$' ;
      break;
    case  sara_scanner_1_include:
      s << '$'
        << "include"
        << '$' ;
      break;
    case  sara_scanner_1_to:
      s << '$'
        << "to"
        << '$' ;
      break;
    case  sara_scanner_1_scenario:
      s << '$'
        << "scenario"
        << '$' ;
      break;
    case  sara_scanner_1_trans:
      s << '$'
        << "trans"
        << '$' ;
      break;
    case  sara_scanner_1_ite_5Fcache:
      s << '$'
        << "ite_cache"
        << '$' ;
      break;
    case  sara_scanner_1_and_5Fcache:
      s << '$'
        << "and_cache"
        << '$' ;
      break;
    case  sara_scanner_1_map:
      s << '$'
        << "map"
        << '$' ;
      break;
    case  sara_scanner_1_bdd:
      s << '$'
        << "bdd"
        << '$' ;
      break;
    case  sara_scanner_1_bool:
      s << '$'
        << "bool"
        << '$' ;
      break;
    case  sara_scanner_1_use_5Fand:
      s << '$'
        << "use_and"
        << '$' ;
      break;
    case  sara_scanner_1_use_5Fite:
      s << '$'
        << "use_ite"
        << '$' ;
      break;
    case  sara_scanner_1_use_5Fand_5Fite:
      s << '$'
        << "use_and_ite"
        << '$' ;
      break;
    case  sara_scanner_1_check:
      s << '$'
        << "check"
        << '$' ;
      break;
    case  sara_scanner_1_checkbool:
      s << '$'
        << "checkbool"
        << '$' ;
      break;
    case  sara_scanner_1_checkidentical:
      s << '$'
        << "checkidentical"
        << '$' ;
      break;
    case  sara_scanner_1__2C:
      s << '$'
        << ","
        << '$' ;
      break;
    case  sara_scanner_1__3B:
      s << '$'
        << ";"
        << '$' ;
      break;
    case  sara_scanner_1__3A:
      s << '$'
        << ":"
        << '$' ;
      break;
    case  sara_scanner_1__7B:
      s << '$'
        << "{"
        << '$' ;
      break;
    case  sara_scanner_1__7D:
      s << '$'
        << "}"
        << '$' ;
      break;
    case  sara_scanner_1__2D_3E:
      s << '$'
        << "->"
        << '$' ;
      break;
    case  sara_scanner_1__26:
      s << '$'
        << "&"
        << '$' ;
      break;
    case  sara_scanner_1__7E:
      s << '$'
        << "~"
        << '$' ;
      break;
    case  sara_scanner_1__3F:
      s << '$'
        << "\?"
        << '$' ;
      break;
    case  sara_scanner_1__21:
      s << '$'
        << "!"
        << '$' ;
      break;
    case  sara_scanner_1__7C:
      s << '$'
        << "|"
        << '$' ;
      break;
    case  sara_scanner_1__7C_7C:
      s << '$'
        << "||"
        << '$' ;
      break;
    case  sara_scanner_1__2B:
      s << '$'
        << "+"
        << '$' ;
      break;
    case  sara_scanner_1__28:
      s << '$'
        << "("
        << '$' ;
      break;
    case  sara_scanner_1__29:
      s << '$'
        << ")"
        << '$' ;
      break;
    case  sara_scanner_1__3A_3D:
      s << '$'
        << ":="
        << '$' ;
      break;
    case  sara_scanner_1__5E:
      s << '$'
        << "^"
        << '$' ;
      break;
    case  sara_scanner_1__3D:
      s << '$'
        << "="
        << '$' ;
      break;
    case  sara_scanner_1__2A:
      s << '$'
        << "*"
        << '$' ;
      break;
    case  sara_scanner_1__40:
      s << '$'
        << "@"
        << '$' ;
      break;
    case  sara_scanner_1__2A_2A:
      s << '$'
        << "**"
        << '$' ;
      break;
    case  sara_scanner_1_literal_5Fstring:
      s << '$'
        << "literal_string"
        << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->identifierString) ;
      break;
    case  sara_scanner_1_machineIdf:
      s << '$'
        << "machineIdf"
        << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->identifierString) ;
      break;
    case  sara_scanner_1_literal_5Finteger:
      s << '$'
        << "literal_integer"
        << '$' ;
    s << ' ' << _p->ulongValue ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool sara_scanner::
parseLexicalToken (void) {
  cTokenFor_sara_scanner _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while ((_token._mTokenCode < 0) && (mCurrentChar != '\0')) {
    _token.identifierString.clear () ;
    _token.ulongValue = 0 ;
    _mTokenFirstLocation = _mCurrentLocation ;
    try{
      if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_keyWordList (_token.identifierString) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = sara_scanner_1_identifier ;
        }
        _enterToken (_token) ;
      }else if (testForInputString ("->", 2)) {
        _token._mTokenCode = sara_scanner_1__2D_3E ;
        _enterToken (_token) ;
      }else if (testForInputString ("||", 2)) {
        _token._mTokenCode = sara_scanner_1__7C_7C ;
        _enterToken (_token) ;
      }else if (testForInputString (":=", 2)) {
        _token._mTokenCode = sara_scanner_1__3A_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("**", 2)) {
        _token._mTokenCode = sara_scanner_1__2A_2A ;
        _enterToken (_token) ;
      }else if (testForInputString (",", 1)) {
        _token._mTokenCode = sara_scanner_1__2C ;
        _enterToken (_token) ;
      }else if (testForInputString (";", 1)) {
        _token._mTokenCode = sara_scanner_1__3B ;
        _enterToken (_token) ;
      }else if (testForInputString (":", 1)) {
        _token._mTokenCode = sara_scanner_1__3A ;
        _enterToken (_token) ;
      }else if (testForInputString ("{", 1)) {
        _token._mTokenCode = sara_scanner_1__7B ;
        _enterToken (_token) ;
      }else if (testForInputString ("}", 1)) {
        _token._mTokenCode = sara_scanner_1__7D ;
        _enterToken (_token) ;
      }else if (testForInputString ("&", 1)) {
        _token._mTokenCode = sara_scanner_1__26 ;
        _enterToken (_token) ;
      }else if (testForInputString ("~", 1)) {
        _token._mTokenCode = sara_scanner_1__7E ;
        _enterToken (_token) ;
      }else if (testForInputString ("\?", 1)) {
        _token._mTokenCode = sara_scanner_1__3F ;
        _enterToken (_token) ;
      }else if (testForInputString ("!", 1)) {
        _token._mTokenCode = sara_scanner_1__21 ;
        _enterToken (_token) ;
      }else if (testForInputString ("|", 1)) {
        _token._mTokenCode = sara_scanner_1__7C ;
        _enterToken (_token) ;
      }else if (testForInputString ("+", 1)) {
        _token._mTokenCode = sara_scanner_1__2B ;
        _enterToken (_token) ;
      }else if (testForInputString ("(", 1)) {
        _token._mTokenCode = sara_scanner_1__28 ;
        _enterToken (_token) ;
      }else if (testForInputString (")", 1)) {
        _token._mTokenCode = sara_scanner_1__29 ;
        _enterToken (_token) ;
      }else if (testForInputString ("^", 1)) {
        _token._mTokenCode = sara_scanner_1__5E ;
        _enterToken (_token) ;
      }else if (testForInputString ("=", 1)) {
        _token._mTokenCode = sara_scanner_1__3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("*", 1)) {
        _token._mTokenCode = sara_scanner_1__2A ;
        _enterToken (_token) ;
      }else if (testForInputString ("@", 1)) {
        _token._mTokenCode = sara_scanner_1__40 ;
        _enterToken (_token) ;
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar ('\\')) {
            if (testForInputChar ('n')) {
              scanner_action_enterCharacterIntoString (_token.identifierString, '\n') ;
            }else if (testForInputChar ('\\')) {
              scanner_action_enterCharacterIntoString (_token.identifierString, '\\') ;
            }else if (testForInputChar ('\"')) {
              scanner_action_enterCharacterIntoString (_token.identifierString, '\"') ;
            }else{
              lexicalError (gErrorMessage_1 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputChar (' ') ||
              testForInputChar ('!') ||
              testForInputChar ('#', '\x7F')) {
            scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          _token._mTokenCode = sara_scanner_1_literal_5Fstring ;
          _enterToken (_token) ;
        }else{
          lexicalError (gErrorMessage_0 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('$')) {
        if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z') ||
            testForInputChar ('_')) {
          do {
            scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('_') ||
                testForInputChar ('0', '9')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_2 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = sara_scanner_1_machineIdf ;
        _enterToken (_token) ;
      }else if (testForInputChar ('0', '9')) {
        scanner_action_enterDigitIntoUlong (_token.ulongValue, previousChar (), gErrorMessage_3, gErrorMessage_4) ;
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterDigitIntoUlong (_token.ulongValue, previousChar (), gErrorMessage_3, gErrorMessage_4) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = sara_scanner_1_literal_5Finteger ;
        _enterToken (_token) ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\n')) {
        }else{
          lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('\0')) { // End of source text ? 
        _token._mTokenCode = sara_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((mCurrentChar == '\0') && (_token._mTemplateStringBeforeToken.length () > 0)) {
    _token._mTokenCode = 0 ;
    _enterToken (_token) ;
  }
  return _token._mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 sara_scanner::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_sara_scanner _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while (_token._mTokenCode < 0) {
    _token.identifierString.clear () ;
    _token.ulongValue = 0 ;
    _mTokenFirstLocation = _mCurrentLocation ;
    try{
      if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_keyWordList (_token.identifierString) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = sara_scanner_1_identifier ;
        }
      }else if (testForInputString ("->", 2)) {
        _token._mTokenCode = sara_scanner_1__2D_3E ;
      }else if (testForInputString ("||", 2)) {
        _token._mTokenCode = sara_scanner_1__7C_7C ;
      }else if (testForInputString (":=", 2)) {
        _token._mTokenCode = sara_scanner_1__3A_3D ;
      }else if (testForInputString ("**", 2)) {
        _token._mTokenCode = sara_scanner_1__2A_2A ;
      }else if (testForInputString (",", 1)) {
        _token._mTokenCode = sara_scanner_1__2C ;
      }else if (testForInputString (";", 1)) {
        _token._mTokenCode = sara_scanner_1__3B ;
      }else if (testForInputString (":", 1)) {
        _token._mTokenCode = sara_scanner_1__3A ;
      }else if (testForInputString ("{", 1)) {
        _token._mTokenCode = sara_scanner_1__7B ;
      }else if (testForInputString ("}", 1)) {
        _token._mTokenCode = sara_scanner_1__7D ;
      }else if (testForInputString ("&", 1)) {
        _token._mTokenCode = sara_scanner_1__26 ;
      }else if (testForInputString ("~", 1)) {
        _token._mTokenCode = sara_scanner_1__7E ;
      }else if (testForInputString ("\?", 1)) {
        _token._mTokenCode = sara_scanner_1__3F ;
      }else if (testForInputString ("!", 1)) {
        _token._mTokenCode = sara_scanner_1__21 ;
      }else if (testForInputString ("|", 1)) {
        _token._mTokenCode = sara_scanner_1__7C ;
      }else if (testForInputString ("+", 1)) {
        _token._mTokenCode = sara_scanner_1__2B ;
      }else if (testForInputString ("(", 1)) {
        _token._mTokenCode = sara_scanner_1__28 ;
      }else if (testForInputString (")", 1)) {
        _token._mTokenCode = sara_scanner_1__29 ;
      }else if (testForInputString ("^", 1)) {
        _token._mTokenCode = sara_scanner_1__5E ;
      }else if (testForInputString ("=", 1)) {
        _token._mTokenCode = sara_scanner_1__3D ;
      }else if (testForInputString ("*", 1)) {
        _token._mTokenCode = sara_scanner_1__2A ;
      }else if (testForInputString ("@", 1)) {
        _token._mTokenCode = sara_scanner_1__40 ;
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar ('\\')) {
            if (testForInputChar ('n')) {
              scanner_action_enterCharacterIntoString (_token.identifierString, '\n') ;
            }else if (testForInputChar ('\\')) {
              scanner_action_enterCharacterIntoString (_token.identifierString, '\\') ;
            }else if (testForInputChar ('\"')) {
              scanner_action_enterCharacterIntoString (_token.identifierString, '\"') ;
            }else{
              lexicalError (gErrorMessage_1 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputChar (' ') ||
              testForInputChar ('!') ||
              testForInputChar ('#', '\x7F')) {
            scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          _token._mTokenCode = sara_scanner_1_literal_5Fstring ;
        }else{
          lexicalError (gErrorMessage_0 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('$')) {
        if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z') ||
            testForInputChar ('_')) {
          do {
            scanner_action_enterCharacterIntoString (_token.identifierString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('_') ||
                testForInputChar ('0', '9')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_2 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = sara_scanner_1_machineIdf ;
      }else if (testForInputChar ('0', '9')) {
        scanner_action_enterDigitIntoUlong (_token.ulongValue, previousChar (), gErrorMessage_3, gErrorMessage_4) ;
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterDigitIntoUlong (_token.ulongValue, previousChar (), gErrorMessage_3, gErrorMessage_4) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = sara_scanner_1_literal_5Finteger ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\n')) {
        }else{
          lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('\0')) { // End of source text ? 
        _token._mTokenCode = sara_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return _token._mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 sara_scanner::getStylesCount (void) {
  return 7 ;
}

//---------------------------------------------------------------------------*

const char * sara_scanner::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [8] = {"Default style", "Identifiers", "Key words", "Machine names", "Delimitors", "Integer constants", "Character strings", NULL} ;
  return (inIndex < 7) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * sara_scanner::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [8] = {"", "identifier", "keyWords", "machineNameStyle", "delimitors", "integer_csts", "stringStyle", NULL} ;
  return (inIndex < 7) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 sara_scanner::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [54] = {0,
    1 /* sara_scanner_1_identifier */,
    2 /* sara_scanner_1_auto */,
    2 /* sara_scanner_1_state */,
    2 /* sara_scanner_1_first */,
    2 /* sara_scanner_1_last */,
    2 /* sara_scanner_1_goto */,
    2 /* sara_scanner_1_timer */,
    2 /* sara_scanner_1_true */,
    2 /* sara_scanner_1_false */,
    2 /* sara_scanner_1_nofirst */,
    2 /* sara_scanner_1_nolast */,
    2 /* sara_scanner_1_modalcompadd */,
    2 /* sara_scanner_1_exclude */,
    2 /* sara_scanner_1_modalcompsub */,
    2 /* sara_scanner_1_include */,
    2 /* sara_scanner_1_to */,
    2 /* sara_scanner_1_scenario */,
    2 /* sara_scanner_1_trans */,
    2 /* sara_scanner_1_ite_5Fcache */,
    2 /* sara_scanner_1_and_5Fcache */,
    2 /* sara_scanner_1_map */,
    2 /* sara_scanner_1_bdd */,
    2 /* sara_scanner_1_bool */,
    2 /* sara_scanner_1_use_5Fand */,
    2 /* sara_scanner_1_use_5Fite */,
    2 /* sara_scanner_1_use_5Fand_5Fite */,
    2 /* sara_scanner_1_check */,
    2 /* sara_scanner_1_checkbool */,
    2 /* sara_scanner_1_checkidentical */,
    4 /* sara_scanner_1__2C */,
    4 /* sara_scanner_1__3B */,
    4 /* sara_scanner_1__3A */,
    4 /* sara_scanner_1__7B */,
    4 /* sara_scanner_1__7D */,
    4 /* sara_scanner_1__2D_3E */,
    4 /* sara_scanner_1__26 */,
    4 /* sara_scanner_1__7E */,
    4 /* sara_scanner_1__3F */,
    4 /* sara_scanner_1__21 */,
    4 /* sara_scanner_1__7C */,
    4 /* sara_scanner_1__7C_7C */,
    4 /* sara_scanner_1__2B */,
    4 /* sara_scanner_1__28 */,
    4 /* sara_scanner_1__29 */,
    4 /* sara_scanner_1__3A_3D */,
    4 /* sara_scanner_1__5E */,
    4 /* sara_scanner_1__3D */,
    4 /* sara_scanner_1__2A */,
    4 /* sara_scanner_1__40 */,
    4 /* sara_scanner_1__2A_2A */,
    6 /* sara_scanner_1_literal_5Fstring */,
    3 /* sara_scanner_1_machineIdf */,
    5 /* sara_scanner_1_literal_5Finteger */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void sara_scanner::_enterToken (const cTokenFor_sara_scanner & inToken) {
  cTokenFor_sara_scanner * _p = NULL ;
  macroMyNew (_p, cTokenFor_sara_scanner ()) ;
  _p->_mTokenCode = inToken._mTokenCode ;
  _p->_mFirstLocation = _mTokenFirstLocation ;
  _p->_mLastLocation  = _mTokenLastLocation ;
  _p->_mTemplateStringBeforeToken  = inToken._mTemplateStringBeforeToken ;
  _p->identifierString = inToken.identifierString ;
  _p->ulongValue = inToken.ulongValue ;
  _enterTokenFromPointer (_p) ;
}

//---------------------------------------------------------------------------*

void sara_scanner::
_assignFromAttribute_identifierString (GGS_lstring & outValue) const {
  cTokenFor_sara_scanner * _p = (cTokenFor_sara_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->identifierString) ;
}

//---------------------------------------------------------------------------*

C_String sara_scanner::
_attributeValue_identifierString (void) const {
  cTokenFor_sara_scanner * _p = (cTokenFor_sara_scanner *) mCurrentTokenPtr ;
  return _p->identifierString ;
}

//---------------------------------------------------------------------------*

void sara_scanner::
_assignFromAttribute_ulongValue (GGS_luint & outValue) const {
  cTokenFor_sara_scanner * _p = (cTokenFor_sara_scanner *) mCurrentTokenPtr ;
  outValue = GGS_luint (* this, _p->ulongValue) ;
}

//---------------------------------------------------------------------------*

uint32 sara_scanner::
_attributeValue_ulongValue (void) const {
  cTokenFor_sara_scanner * _p = (cTokenFor_sara_scanner *) mCurrentTokenPtr ;
  return _p->ulongValue ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

