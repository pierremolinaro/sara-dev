#---------------------------------------------------------------------------*#                                                                           *#   L E X I Q U E                                                           *#                                                                           *#---------------------------------------------------------------------------*lexique sara_scanner :header "galgas/lexical_actions.h" ;@lstring identifierString ;@luint ulongValue ;

style identifier -> "Identifiers" ;
style keyWords -> "Key words" ;
style delimitors -> "Delimitors" ;
style integer_csts -> "Integer constants" ;
# -------------------------- identifier or key word --------------------# keywords can be written in lower# for identifiers, case is significant$identifier$ ! identifierString error message "an identifier" style identifier ;list keyWordList error message "the '" . * . "' key word" style keyWords : "auto", "state", "first", "goto", "timer", "all", "none" ;rule 'a'->'z' | 'A'->'Z' :  repeat    enterCharacterIntoString (identifierString, *) ;  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :  end repeat ;  send search identifierString in keyWordList default $identifier$ ;end rule ;#--- Delimitors  list delimitorsList error message "the '" . * . "' delimitor" style delimitors :    ",", ";", ":", "{", "}", "->", "&", "!", "?", "|", "(", ")", ":=", "^", "=" ;  rule list delimitorsList ;#------------------------------- Decimal positive number ------------------$literal_integer$ ! ulongValue error message "a decimal number" style integer_csts ;message decimalNumberTooLarge : "decimal number too large" ;message internalError : "internal error" ;rule '0'->'9' :  enterDigitIntoUlong (ulongValue, *) error decimalNumberTooLarge, internalError ;  repeat  while '0'->'9' :    enterDigitIntoUlong (ulongValue, *) error decimalNumberTooLarge, internalError ;  while '_' :  end repeat ;  send $literal_integer$ ;end rule ;#--- separators  rule '\1' -> ' ' :  end rule ;# ------------------------------------ Comment ----------------------------message incorrectEndOfComment : "incorrect end of comment" ;rule '#' :  repeat  while '\1' ->'\t' | '\v'-> '\255' :  end repeat ;  select  when '\n' :  default    error incorrectEndOfComment ;  end select ;end rule ;end lexique ;#---------------------------------------------------------------------------*#                                                                           *#   S E M A N T I C S                                                       *#                                                                           *#---------------------------------------------------------------------------*semantics sara_semantics :  map @M_variablesMap    insert insertKey error message "the '" . * . "' variable has been already declared" ;    search searchKey error message "the '" . * . "' variable is not declared" ;    key @lstring ;  end map ;  map @M_stateMap    insert insertKey error message "the '" . * . "' state has been already declared" ;    insert defineState error message "the '" . * . "' state has been already defined" ;    search searchKey error message "the '" . * . "' state is not declared" ;    key @lstring ;  end map ;

#---------------------------------------------------------------------------*  abstract class @AC_expression    include header ;  end class ;    class @C_andExpression extends @AC_expression
    @AC_expression mLeftExpression ;    @AC_expression mRightExpression ;  end class ;    class @C_orExpression extends @AC_expression     @AC_expression mLeftExpression ;    @AC_expression mRightExpression ;  end class ;    class @C_xorExpression extends @AC_expression     @AC_expression mLeftExpression ;    @AC_expression mRightExpression ;  end class ;    class @C_impliesExpression extends @AC_expression     @AC_expression mLeftExpression ;    @AC_expression mRightExpression ;  end class ;    class @C_equalExpression extends @AC_expression     @AC_expression mLeftExpression ;    @AC_expression mRightExpression ;  end class ;    class @C_notExpression extends @AC_expression     @AC_expression mExpression ;  end class ;      class @C_VariableExpression extends @AC_expression     @luint mInputVarIndex ;  end class ;

  class @C_trueExpression extends @AC_expression   end class ;

  class @C_falseExpression extends @AC_expression   end class ;

#---------------------------------------------------------------------------*

  list @L_transitionDefinition
    @AC_expression mActionExpression ;
    @location mEndOfExpression ;
    @luint mTargetStateIndex ;
  end list ;
  list @L_stateDefinition
    @luint mStateIndex ;
    @AC_expression mStateExpression ;
    @location mEndOfStateExpression ;
    @L_transitionDefinition mTransitionsList ;
  end list ;

#---------------------------------------------------------------------------*

list @L_initialStatesDefinitionList
  @luint mInitialStateIndex ;  @location mInitialStateLocation ;end list ;

#---------------------------------------------------------------------------*

abstract class @AC_machineDefinition  include header ; end class ;

class @C_explicitAutomatonDefinition extends @AC_machineDefinition
  @M_stateMap mStatesMap ;
  @L_initialStatesDefinitionList mInitialStatesDefinitionList ;
  @L_stateDefinition mStateDefinitionList ;
  @location mEndOfDefinition ;
end class ;

class @C_variableDefinition extends @AC_machineDefinition
  @luint mInputOutputVariableIndex ;
end class ;

class @C_existsDefinition extends @AC_machineDefinition
  @uint mPreviousVariableCount ;
  @uint mTotalVariableCount ;
  @AC_machineDefinition mOperand ;
end class ;

class @C_andComposition extends @AC_machineDefinition
  @AC_machineDefinition mLeftOperand ;
  @AC_machineDefinition mRightOperand ;
end class ;

class @C_orComposition extends @AC_machineDefinition
  @AC_machineDefinition mLeftOperand ;
  @AC_machineDefinition mRightOperand ;
end class ;

class @C_equalComposition extends @AC_machineDefinition
  @AC_machineDefinition mLeftOperand ;
  @AC_machineDefinition mRightOperand ;
end class ;

class @C_xorComposition extends @AC_machineDefinition
  @AC_machineDefinition mLeftOperand ;
  @AC_machineDefinition mRightOperand ;
end class ;

class @C_impliesComposition extends @AC_machineDefinition
  @AC_machineDefinition mLeftOperand ;
  @AC_machineDefinition mRightOperand ;
end class ;


class @C_notComposition extends @AC_machineDefinition
  @AC_machineDefinition mOperand ;
end class ;

#---------------------------------------------------------------------------*

abstract class @AC_component  include header ;end class ;
 class @C_machineComponent extends @AC_component
  @uint mInputVariableCount ;  @M_variablesMap mVariablesMap ;
  @AC_machineDefinition mDefinition ;end class ;

#---------------------------------------------------------------------------*

  map @M_componentMap    insert insertKey error message "the '" . * . "' component has been already declared" ;    insert defineState error message "the '" . * . "' component has been already defined" ;    key @lstring ;
    @AC_component mComponent ;  end map ;
end semantics ;#---------------------------------------------------------------------------*#                                                                           *#   S Y N T A X                                                             *#                                                                           *#---------------------------------------------------------------------------*syntax sara_parser :import lexique sara_scanner ;import semantics sara_semantics ;rule <start_symbol> ;

rule <explicit_automaton>
  ?!@M_variablesMap outputVariableMap  !@AC_machineDefinition outDefinition
;

rule <definition_expression>
  ?!@M_variablesMap outputVariableMap  !@AC_machineDefinition outDefinition
;

rule <definition_expression_term>
  ?!@M_variablesMap outputVariableMap  !@AC_machineDefinition outDefinition
;

rule <definition_expression_factor>
  ?!@M_variablesMap outputVariableMap  !@AC_machineDefinition outDefinition
;

rule <component>
  ?!@M_componentMap ioComponentsMap;

rule <io_expression>
  ?!@M_variablesMap ioInputVarMap
  !@AC_expression outExpression
;

rule <io_and_expression> 
  ?!@M_variablesMap ioInputVarMap
  !@AC_expression outExpression
;

rule <io_primary> 
  ?!@M_variablesMap ioInputVarMap
  !@AC_expression outExpression
;

action performComputations  ?!@M_componentMap ioComponentsMap;

#---------------------------------------------------------------------------*
rule <start_symbol>:
  @M_componentMap componentsMap [empty] ;
  repeat
    <component> !? componentsMap ;
  while
  end repeat ;
  action performComputations !? componentsMap ;end rule ;
 #---------------------------------------------------------------------------*
rule <component>  ?!@M_componentMap ioComponentsMap:  @M_variablesMap variablesMap [empty] ;  @M_stateMap statesMap [empty] ;
  @L_stateDefinition stateDefinitionList [empty] ;
#--- Component name
  @lstring componentName ;
  $identifier$ ? componentName ;
  $($ ;
#--- Parse input variables
  repeat    @lstring inputVarName ;    $identifier$ ? inputVarName ;
    insert variablesMap.insertKey inputVarName () ;
  while
    $,$ ;
  end repeat ;
  @uint inputVariablesCount := [variablesMap length] ;
#--- Parse output variables
  $->$ ;
  repeat    @lstring outputVarName ;    $identifier$ ? outputVarName ;
    insert variablesMap.insertKey outputVarName () ;
  while
    $,$ ;
  end repeat ;
  $)$ ;
  $:=$ ;
#--- Machine definition
  @AC_machineDefinition definition ;  <definition_expression> !?variablesMap ?definition ;#--- Insert into component map
  @AC_component component := [@C_machineComponent new !inputVariablesCount !variablesMap !definition] ;
  insert ioComponentsMap.insertKey componentName (!component) ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <io_expression>
  ?!@M_variablesMap ioInputVarMap
  !@AC_expression outExpression
:
  <io_and_expression> !? ioInputVarMap ? outExpression ;
  repeat
  while
    $|$ ;
    @AC_expression rightExpression ;
    <io_and_expression> !? ioInputVarMap ? rightExpression ;
    outExpression := [@C_orExpression new ! outExpression ! rightExpression] ;
  while
    $^$ ;
    @AC_expression rightExpression ;
    <io_and_expression> !? ioInputVarMap ? rightExpression ;
    outExpression := [@C_xorExpression new ! outExpression ! rightExpression] ;
  while
    $->$ ;
    @AC_expression rightExpression ;
    <io_and_expression> !? ioInputVarMap ? rightExpression ;
    outExpression := [@C_impliesExpression new ! outExpression ! rightExpression] ;
  while
    $=$ ;
    @AC_expression rightExpression ;
    <io_and_expression> !? ioInputVarMap ? rightExpression ;
    outExpression := [@C_equalExpression new ! outExpression ! rightExpression] ;
  end repeat ;
end rule ;

#---------------------------------------------------------------------------*

rule <io_and_expression> 
  ?!@M_variablesMap ioInputVarMap
  !@AC_expression outExpression
:
  <io_primary> !? ioInputVarMap ? outExpression ;
  repeat
  while
    $&$ ;
    @AC_expression rightExpression ;
    <io_primary> !? ioInputVarMap ? rightExpression ;
    outExpression := [@C_andExpression new ! outExpression !rightExpression] ;
  end repeat ;
end rule ;

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?!@M_variablesMap ioInputVarMap
  !@AC_expression outExpression
:
  $($ ;
  <io_expression> !? ioInputVarMap ? outExpression ;
  $)$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?!@M_variablesMap ioInputVarMap
  !@AC_expression outExpression
:
  @lstring inputVarName ;
  $identifier$ ? inputVarName ;
  @luint inputVarIndex ;
  search ioInputVarMap.searchKey inputVarName () -> inputVarIndex ;
  outExpression := [@C_VariableExpression new !inputVarIndex] ;
end rule ;

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?!@M_variablesMap ioInputVarMap
  !@AC_expression outExpression
:
  $!$ ;
  @AC_expression expression ;
  <io_primary>  !?ioInputVarMap ? expression ;
  outExpression := [@C_notExpression new ! expression] ;
end rule ;

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?!@M_variablesMap unused ioInputVarMap
  !@AC_expression outExpression
:
  $none$ ;
  outExpression := [@C_falseExpression new] ;
end rule ;

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?!@M_variablesMap unused ioInputVarMap
  !@AC_expression outExpression
:
  $all$ ;
  outExpression := [@C_trueExpression new] ;
end rule ;

#---------------------------------------------------------------------------*
#         DEFINITION EXPRESSION                                             *
#---------------------------------------------------------------------------*

rule <definition_expression>
  ?!@M_variablesMap variablesMap  !@AC_machineDefinition outDefinition
:
  <definition_expression_term> !?variablesMap ?outDefinition ;
  repeat
  while
    $|$ ;
    @AC_machineDefinition leftOperand := outDefinition ;
    @AC_machineDefinition rightOperand ;
    <definition_expression_term> !?variablesMap ?rightOperand ;
    outDefinition := [@C_orComposition new !leftOperand !rightOperand] ;
  while
    $^$ ;
    @AC_machineDefinition leftOperand := outDefinition ;
    @AC_machineDefinition rightOperand ;
    <definition_expression_term> !?variablesMap ?rightOperand ;
    outDefinition := [@C_xorComposition new !leftOperand !rightOperand] ;
  while
    $->$ ;
    @AC_machineDefinition leftOperand := outDefinition ;
    @AC_machineDefinition rightOperand ;
    <definition_expression_term> !?variablesMap ?rightOperand ;
    outDefinition := [@C_impliesComposition new !leftOperand !rightOperand] ;
  while
    $=$ ;
    @AC_machineDefinition leftOperand := outDefinition ;
    @AC_machineDefinition rightOperand ;
    <definition_expression_term> !?variablesMap ?rightOperand ;
    outDefinition := [@C_equalComposition new !leftOperand !rightOperand] ;
  end repeat ;
end rule ;

#---------------------------------------------------------------------------*

rule <definition_expression_term>
  ?!@M_variablesMap variablesMap  !@AC_machineDefinition outDefinition
:
  <definition_expression_factor> !? variablesMap ?outDefinition ;
  repeat
  while
    $&$ ;
    @AC_machineDefinition leftOperand := outDefinition ;
    @AC_machineDefinition rightOperand ;
    <definition_expression_factor> !? variablesMap ?rightOperand ;
    outDefinition := [@C_andComposition new !leftOperand !rightOperand] ;
  end repeat ;
end rule ;

#---------------------------------------------------------------------------*

rule <definition_expression_factor>
  ?!@M_variablesMap variablesMap  !@AC_machineDefinition outDefinition
:
  select
    <explicit_automaton> !? variablesMap ?outDefinition ;
  or
    $($ ;
    <definition_expression> !? variablesMap ?outDefinition ;
    $)$ ;
  or
    @M_variablesMap extendedVariablesMap := variablesMap ;
    @uint previousVariableCount := [extendedVariablesMap length] ;
    $?$ ;
    repeat
      @lstring variableName ;
      $identifier$ ? variableName ;
      insert extendedVariablesMap.insertKey variableName () ;
    while
      $,$ ;
    end repeat ;
    @uint actualVariableCount := [extendedVariablesMap length] ;
    $($ ;
    @AC_machineDefinition def ;
    <definition_expression> !?extendedVariablesMap ?def ;
    $)$ ;
    outDefinition := [@C_existsDefinition new !previousVariableCount !actualVariableCount !def] ;
  or
    $!$ ;
    @AC_machineDefinition def ;
    <definition_expression_factor> !? variablesMap ?def ;
    outDefinition := [@C_notComposition new !def] ;
  or
    @lstring variableName ;
    $identifier$ ? variableName ;
    @luint varIndex ;
    search variablesMap.searchKey variableName () -> varIndex ;
    outDefinition := [@C_variableDefinition new ! varIndex] ;
  end select ;
end rule ;

#---------------------------------------------------------------------------*
#         EXPLICIT AUTOMATON                                                *
#---------------------------------------------------------------------------*

rule <explicit_automaton>
  ?!@M_variablesMap variablesMap  !@AC_machineDefinition outDefinition
:
  @M_stateMap statesMap [empty] ;
  @L_stateDefinition stateDefinitionList [empty] ;
  @L_initialStatesDefinitionList initialStatesDefinitionList [empty] ;
  $auto$ ;
  ${$ ;
#--- States declaration
  $state$ ;
  repeat    @lstring stateName ;    $identifier$ ? stateName ;
    insert statesMap.insertKey stateName () ;
  while
    $,$ ;
  end repeat ;
  $;$ ;
#--- Initial state
  $first$ ;
  repeat
    @lstring initialState ;    $identifier$ ? initialState ;
    @luint initialStateIndex ;
    search statesMap.searchKey initialState () -> initialStateIndex ;
    initialStatesDefinitionList += !initialStateIndex !here ;
  while
    $,$ ;
  end repeat ;
  $;$ ;
#--- Parse state definitions
  @M_stateMap stateDefinitionMap [empty] ;
  repeat
  #--- Current state
    @lstring stateName ;    $identifier$ ? stateName ;
    @luint stateIndex ;
    search statesMap.searchKey stateName () -> stateIndex ;
    insert stateDefinitionMap.defineState stateName () ;
    $:$ ;
  #--- State input expression
    @AC_expression stateExpression ;
    <io_expression> !?variablesMap ?stateExpression ;
    @location endOfStateExpression := here ;
    ${$ ;
  #--- Parse state transition
    @L_transitionDefinition transitionsList [empty] ;
    repeat
    while
      @AC_expression transitionInputExpression ;
      <io_expression> !?variablesMap ?transitionInputExpression ;
      @location endOfExpression := here ;
      $goto$ ;
      @lstring targetStateName ;      $identifier$ ? targetStateName ;
      @luint targetStateIndex ;
      search statesMap.searchKey targetStateName () -> targetStateIndex ;
      transitionsList += !transitionInputExpression !endOfExpression !targetStateIndex ;
      $;$ ;
    end repeat ;
    $}$ ;
    stateDefinitionList += !stateIndex !stateExpression !endOfStateExpression
                           !transitionsList ;
  while
  end repeat ;
#--- Check all states are defined
  foreach map statesMap ??@lstring kStateName () :
    if not [stateDefinitionMap hasKey ! kStateName] then
      error here : "'" . [kStateName value] . "' state is not described" ;
    end if ;
  end foreach ;
#--- End of input source
  $}$ ;
  outDefinition := [@C_explicitAutomatonDefinition new !statesMap !initialStatesDefinitionList !stateDefinitionList !here] ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;#---------------------------------------------------------------------------*#                                                                           *#   C O M M A N D    L I N E    O P T I O N S                               *#                                                                           *#---------------------------------------------------------------------------*
option sara_cli_options :
  @bool displayBDDvaluesCount : 'c', "display-bdd-values-count" -> "displays values count for every BDD" ;
  @bool displayBDDvalues : 'v', "display-bdd-values" -> "displays values for every BDD" ;
end option ;

#---------------------------------------------------------------------------*#                                                                           *#   G R A M M A R                                                           *#                                                                           *#---------------------------------------------------------------------------*grammar sara_grammar "LL1" :  import lexique sara_scanner ;  import option sara_cli_options ;  import syntax sara_parser ;  start <start_symbol> ;end grammar ;

#---------------------------------------------------------------------------*#                                                                           *#   C O C O A                                                               *#                                                                           *#---------------------------------------------------------------------------*

cocoa cocoa_sara :

program "sara" ;

import grammar sara_grammar ;

end cocoa ;
#---------------------------------------------------------------------------*#                                                                           *#   P R O G R A M                                                           *#                                                                           *#---------------------------------------------------------------------------*program sara_main "version 0.0.4" . "sara" :  import grammar sara_grammar ;#--- max error and warning count  error 100 ;  warning 100 ;end program ;#--------------------------------------------------------------------------------*