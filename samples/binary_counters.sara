$oneBitCounter (c)()(s) :=
  auto {
    state zero_zero, zero_one, one_zero, one_one ;
    first zero_zero, one_zero ;
    last zero_zero, zero_one, one_zero, one_one ;
    zero_zero : (~c) & ~s {
      c goto one_one ;
    } 
    zero_one : (~c) & s {
      c goto one_zero ;
    } 
    one_one : c & s {
      ~c goto zero_one ;
    } 
    one_zero : c & ~s {
      ~c goto zero_zero ;
    }
  }
;

check $oneBitCounter ;

$twoBitDownCounter (c)()(s1, s0) :=
  $oneBitCounter (c)()(s0) ||
  $oneBitCounter (s0)()(s1)
;

check $twoBitDownCounter ;

$fourBitDownCounter (c)()(s3, s2, s1, s0) :=
  $twoBitDownCounter (c)()(s1, s0) ||
  $twoBitDownCounter (s1)()(s3, s2)
;

check $fourBitDownCounter ;

scenario $fourBitDownCounter (c)()(s3, s2, s1, s0) {
  "counting test" :0:1:0:1:0:1:0:1:0:1:0:1:0:1:0:1:0:1:0:1:0:1:0:1:0:1:0:1:0:1:0:1:0 ;

}

#------------ DOWN COUNTERS WITH ASYNCHRONOUS RESET -----------

$oneBitCounterWithReset (c, r)()(s) :=
  modalcompsub {
    m1 : bool {~r} || $oneBitCounter (c)()(s) ;
    m2 : bool {r & ~ s} ;
  }
;

check $oneBitCounterWithReset ;

$twoBitDownCounterWithReset (c, r)()(s1, s0) :=
  $oneBitCounterWithReset (c, r)()(s0) ||
  $oneBitCounterWithReset (s0, r)()(s1)
;

check $twoBitDownCounterWithReset ;

$fourBitDownCounterWithReset (c, r)()(s3, s2, s1, s0) :=
  $twoBitDownCounterWithReset (c, r)()(s1, s0) ||
  $twoBitDownCounterWithReset (s1, r)()(s3, s2)
;

check $fourBitDownCounterWithReset ;

scenario $fourBitDownCounterWithReset (c, r)()(s3, s2, s1, s0) {
  "counting test" :0,0:1,0:0,0:1,0:0,0:1,0:0,0:1,0:0,0:1,0:0,0:1,0
                  :0,0:1,0:0,0:1,0:0,0:1,0:0,0:1,0:0,0:1,0:0,0:1,0
                  :0,0:1,0:0,0:1,0:0,0:1,0:0,0:1,0:0,0 ;
  "reset has priority" :0,1:1,1:0,1 ;
  "counting then reset" :0,0:1,0:0,0:1,0:0,1;
}

#------------ UP COUNTERS WITH ASYNCHRONOUS RESET -----------

$twoBitCounterWithAsynchronousReset (c, r)()(s1, s0) :=
  ? cc (
   $oneBitCounterWithReset ( c, r)()(s0) ||
   $oneBitCounterWithReset (cc, r)()(s1) ||
   bool {cc = ~s0}
  )
;
check $twoBitCounterWithAsynchronousReset ;

$fourBitCounterWithAsynchronousReset (c, r)()(s3, s2, s1, s0) :=
  ? cc (
   $twoBitCounterWithAsynchronousReset ( c, r)()(s1, s0) ||
   $twoBitCounterWithAsynchronousReset (cc, r)()(s3, s2) ||
   bool {cc = ~s1}
  )
;
check $fourBitCounterWithAsynchronousReset ;

$mod5upCounter (c)()(s3, s2, s1, s0) :=
  ? r (
    $fourBitCounterWithAsynchronousReset (c, r)()(s3, s2, s1, s0) ||
    bool {r = s0 & s2}
  )
;
check $mod5upCounter ; # FAILS

scenario $mod5upCounter (c)()(s3, s2, s1, s0) {
  "counting test" :0:1:0:1:0:1:0:1:0:1:0:1:0 ;
}
