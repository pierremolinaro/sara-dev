#---------------------------------------------------------------------------*
#                                                                           *
#   S Y N T A X                                                             *
#                                                                           *
#---------------------------------------------------------------------------*

syntax sara_parser (sara_scanner) {

#---------------------------------------------------------------------------*

rule <start_symbol> {
  var semanticContext =@semanticContext.new{
    !@L_jobList. emptyList
    !@M_machinesMap. emptyMap
  }
  repeat
    <component> !?semanticContext
  while
  end
  performComputations ( !semanticContext.componentsMap )
}
 
#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  let variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $state$
  $display$
  $machineIdf$ ?let machineName
  $;$
#--- Insert machine into machine map
  [ioSemanticContext.machinesMap searchKey !machineName ?let machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  let @AC_job job = @C_machineDisplayStates. new { !machineIndex}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  let variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $trans$
  $display$
  $machineIdf$ ?let machineName
  $;$
#--- Insert machine into machine map
  [ioSemanticContext.machinesMap searchKey !machineName ?let machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  let @AC_job job = @C_machineDisplayTransitions.new { !machineIndex}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  let variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $first$
  $state$
  $display$
  $machineIdf$ ?let machineName
  $;$
#--- Insert machine into machine map
  [ioSemanticContext.machinesMap searchKey !machineName ?let machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  let @AC_job job = @C_machineDisplayInitialStates. new { !machineIndex}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  let variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $last$
  $state$
  $display$
  $machineIdf$ ?let machineName
  $;$
#--- Insert machine into machine map
  [ioSemanticContext.machinesMap searchKey !machineName ?let machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  let @AC_job job = @C_machineDisplayTerminalStates. new { !machineIndex}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  let variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $check$
  $machineIdf$ ?let machineName
  $;$
#--- Insert machine into machine map
  [ioSemanticContext.machinesMap searchKey !machineName ?let machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  let @AC_job job = @C_machineCheck. new { !machineIndex !false}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  let variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $checkidentical$
  $machineIdf$ ?let machineName1
  $,$
  $machineIdf$ ?let machineName2
  $;$
#--- Insert machine into machine map
  [ioSemanticContext.machinesMap searchKey !machineName1 ?let machineIndex1 ?* ?* ?* ?*]
#--- Insert machine into machine map
  [ioSemanticContext.machinesMap searchKey !machineName2 ?let machineIndex2 ?* ?* ?* ?*]
#--- Insert into component map
  let @AC_job job = @C_machineCheckIdentical. new { !machineIndex1 !machineIndex2}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  let variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $checkbool$
  $machineIdf$ ?let machineName
  $;$
#--- Insert machine into machine map
  [ioSemanticContext.machinesMap searchKey !machineName ?let machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  let @AC_job job = @C_machineCheck. new { !machineIndex !true}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

#rule <component>
#  ?!@semanticContext ioSemanticContext {
#  $use_and$
#  $;$
#  @AC_job job = @typeUse_AND. new
#  ioSemanticContext.componentsMap += !job
#}

#---------------------------------------------------------------------------*

#rule <component>
#  ?!@semanticContext ioSemanticContext {
#  $use_ite$
#  $;$
#  @AC_job job = @typeUse_ITE. new
#  ioSemanticContext.componentsMap += !job
#}

#---------------------------------------------------------------------------*

#rule <component>
#  ?!@semanticContext ioSemanticContext {
#  $use_and_ite$
#  $;$
#  @AC_job job = @typeUse_AND_ITE. new
#  ioSemanticContext.componentsMap += !job
#}

#---------------------------------------------------------------------------*

#rule <component>
#  ?!@semanticContext ioSemanticContext {
#  $and_cache$
#  @luint size
#  $literal_integer$ ? size
#  $;$
#  @AC_job job = @typeResize_AND_cache. new { !size}
#  ioSemanticContext.componentsMap += !job
#}

#---------------------------------------------------------------------------*
#rule <component>
#  ?!@semanticContext ioSemanticContext {
#  $ite_cache$
#  @luint size
#  $literal_integer$ ? size
#  $;$
#  @AC_job job = @typeResize_ITE_cache. new { !size}
#  ioSemanticContext.componentsMap += !job
#}

#---------------------------------------------------------------------------*

#rule <component>
#  ?!@semanticContext ioSemanticContext {
#  $map$
#  @luint size
#  $literal_integer$ ? size
#  $;$
#  @AC_job job = @typeResizeMap. new { !size}
#  ioSemanticContext.componentsMap += !job
#}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  $bdd$
  $;$
  let @AC_job job = @typeDisplayBDDstats. new
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
  var nameList =@stringlist.emptyList{}
#--- Machine name
  $machineIdf$ ?let machineName
  $($
#--- Parse input variables
  repeat
    $identifier$ ?let inputVarName
    [!?variablesMap insertKey !inputVarName ![variablesMap count]]
    nameList += !inputVarName.string
  while
    $,$
  end
  let @uint inputVariablesCount = [variablesMap count]
  $)$
#--- Parse internal variables
  $($
  select
  or
    repeat
      $identifier$ ?let outputVarName
      [!?variablesMap insertKey !outputVarName ![variablesMap count]]
      nameList += !outputVarName.string
    while
      $,$
    end
  end
  $)$
  let @uint inputAndInternalVariablesCount = [variablesMap count]
#--- Parse output variables
  $($
  repeat
    $identifier$ ?let outputVarName
    [!?variablesMap insertKey !outputVarName ![variablesMap count]]
    nameList += !outputVarName.string
  while
    $,$
  end
  $)$
  $:=$
#--- Machine definition
  <definition_expression> !ioSemanticContext !?variablesMap ?let definition
#--- Insert machine into machine map
  let @uint machineIndex = [ioSemanticContext.machinesMap count]
  [!?ioSemanticContext.machinesMap insertKey
    !machineName
    !machineIndex
    !inputVariablesCount
    !inputAndInternalVariablesCount
    !variablesMap
    !nameList
  ]
#--- Insert into component map
  let @AC_job machine = @C_machineComponent. new { !machineName !machineIndex !inputVariablesCount !inputAndInternalVariablesCount !variablesMap !nameList !definition}
  ioSemanticContext.componentsMap += !machine
  $;$
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
  var nameList =@stringlist.emptyList{}
#--- Machine name
  $modalcompadd$
  $machineIdf$ ?let machineName
  $($
#--- Parse input variables
  repeat
    $identifier$ ?let inputVarName
    [!?variablesMap insertKey !inputVarName ![variablesMap count]]
    nameList += !inputVarName.string
  while
    $,$
  end
  let @uint inputVariablesCount = [variablesMap count]
  $)$
#--- Parse internal variables
  $($
  select
  or
    repeat
      $identifier$ ?let outputVarName
      [!?variablesMap insertKey !outputVarName ![variablesMap count]]
      nameList += !outputVarName.string
    while
      $,$
    end
  end
  $)$
  let @uint inputAndInternalVariablesCount = [variablesMap count]
#--- Parse output variables
  $($
  repeat
    $identifier$ ? let outputVarName
    [!?variablesMap insertKey !outputVarName ![variablesMap count]]
    nameList += !outputVarName.string
  while
    $,$
  end
  $)$
  $:=$
#--- Machine definition
  <modalcompadd_definition>
    !ioSemanticContext
    !?variablesMap
    ?let modeMap
    ?let inclusionList
#--- Insert machine into machine map
  let @uint machineIndex = [ioSemanticContext.machinesMap count]
  [!?ioSemanticContext.machinesMap insertKey !machineName !machineIndex !inputVariablesCount !inputAndInternalVariablesCount !variablesMap !nameList]
#--- Insert into component map
  let @AC_job machine = @C_machineDefinedByAdditiveModalComp. new {
   !machineName
   !machineIndex
   !inputVariablesCount
   !inputAndInternalVariablesCount
   !variablesMap
   !modeMap
   !inclusionList}
  ioSemanticContext.componentsMap += !machine
  $;$
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
  var nameList =@stringlist.emptyList{}
#--- Machine name
  $modalcompsub$
  $machineIdf$ ?let machineName
  $($
#--- Parse input variables
  repeat
    $identifier$ ?let inputVarName
    [!?variablesMap insertKey !inputVarName ![variablesMap count]]
    nameList += !inputVarName.string
  while
    $,$
  end
  let @uint inputVariablesCount = [variablesMap count]
  $)$
#--- Parse internal variables
  $($
  select
  or
    repeat
      $identifier$ ?let outputVarName
      [!?variablesMap insertKey !outputVarName ![variablesMap count]]
      nameList += !outputVarName.string
    while
      $,$
    end
  end
  $)$
  let @uint inputAndInternalVariablesCount = [variablesMap count]
#--- Parse output variables
  $($
  repeat
    $identifier$ ?let outputVarName
    [!?variablesMap insertKey !outputVarName ![variablesMap count]]
    nameList += !outputVarName.string
  while
    $,$
  end
  $)$
  $:=$
#--- Machine definition
  <modalcompsub_definition>
    !ioSemanticContext
    !?variablesMap
    ?let modeMap
    ?let exclusionList
#--- Insert machine into machine map
  let @uint machineIndex = [ioSemanticContext.machinesMap count]
  [!?ioSemanticContext.machinesMap insertKey !machineName !machineIndex !inputVariablesCount !inputAndInternalVariablesCount !variablesMap !nameList]
#--- Insert into component map
  let @AC_job machine = @C_machineDefinedBySubstractiveModalComp. new {
   !machineName
   !machineIndex
   !inputVariablesCount
   !inputAndInternalVariablesCount
   !variablesMap
   !modeMap
   !exclusionList}
  ioSemanticContext.componentsMap += !machine
  $;$
}
#---------------------------------------------------------------------------*
rule <component>
  ?!@semanticContext ioSemanticContext {
  $scenario$
  var variablesMap =@M_variablesMap.emptyMap{}
  let statesMap =@M_stateMap.emptyMap{}
  let stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $machineIdf$ ?let machineName
#--- Search machine from machine map
  [ioSemanticContext.machinesMap searchKey !machineName ?let machineIndex ?let inputVariablesCountFromDefinition ?let inputAndInternalVariablesCountFromDefinition ?let variablesMapFromDefinition ?*]
#--- Parse input variables
  $($
  repeat
    $identifier$ ?let inputVarName
    [!?variablesMap insertKey !inputVarName ![variablesMap count]]
  while
    $,$
  end
  let @uint inputVariablesCount = [variablesMap count]
  $)$
#--- Check correct number of input variables
  if inputVariablesCountFromDefinition != inputVariablesCount then
    error @location.here : "This declaration names " + [inputVariablesCount string]
      + " input variable(s), but machine definition names " + [inputVariablesCountFromDefinition string] + " input variable(s)"
  end
#--- Parse internal variables
  $($
  select
  or
    repeat
      $identifier$ ?let outputVarName
      [!?variablesMap insertKey !outputVarName ![variablesMap count]]
    while
      $,$
    end
  end
  $)$
#--- Check correct number of internal variables
  let @uint inputAndInternalVariablesCount = [variablesMap count]
  if inputAndInternalVariablesCountFromDefinition != inputAndInternalVariablesCount then
    error @location.here : "This declaration names " + [inputAndInternalVariablesCount string]
      + " input and internal variable(s), but machine definition names " + [inputAndInternalVariablesCountFromDefinition string] + " input and internal variable(s)"
  end
#--- Parse output variables
  $($
  repeat
    $identifier$ ?let outputVarName
    [!?variablesMap insertKey !outputVarName ![variablesMap count]]
  while
    $,$
  end
  $)$
#--- Check correct number of internal variables
  let @uint outputVariablesCount = [variablesMap count]
  let @uint outputVariablesCountFromDefinition = [variablesMapFromDefinition count]
  if outputVariablesCountFromDefinition != outputVariablesCount then
    error @location.here : "This declaration names " + [outputVariablesCount string]
      + " variables, but machine definition names " + [outputVariablesCountFromDefinition string] + " variables"
  end
  ${$
  var scenarioList =@L_scenarioList.emptyList{}
  repeat
    $literal_string$ ? let scenarioTitle
    var inputScenario =@L_inputScenario.emptyList{}
    repeat
      $:$
      var inputConfigurationForScenario =@L_inputConfigurationForScenario.emptyList{}
      repeat
       $literal_integer$  ? let v
       if v.uint > 1 then
         error v : "this value is not a  binary digit"
       end
       inputConfigurationForScenario += !v
      while
       $,$
      end
      if inputVariablesCount != [inputConfigurationForScenario length] then
        error @location.here : "this input configuration names " + [[inputConfigurationForScenario length] string] + " input variable(s), instead of " + [inputVariablesCount string]
      end
      inputScenario += !inputConfigurationForScenario
    while
    end
    $;$
    scenarioList += !scenarioTitle !inputScenario
  while
  end
  $}$
#--- Insert job into job list
  let @AC_job machine = @C_scenarioComponent. new { !machineIndex !inputVariablesCount !inputAndInternalVariablesCount !variablesMap !scenarioList}
  ioSemanticContext.componentsMap += !machine
}

#---------------------------------------------------------------------------*

rule <io_bool_expression>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  <io_and_expression> !inSemanticContext !?ioVarMap ?outExpression
  repeat
  while
    $|$
    <io_and_expression> !inSemanticContext !?ioVarMap ?let rightExpression
    outExpression = @C_orExpression. new { ! outExpression ! rightExpression}
  while
    $^$
    <io_and_expression> !inSemanticContext !?ioVarMap ?let rightExpression
    outExpression = @C_xorExpression. new { ! outExpression ! rightExpression}
  while
    $->$
    <io_and_expression> !inSemanticContext !?ioVarMap ?let rightExpression
    outExpression = @C_impliesExpression. new { ! outExpression ! rightExpression}
  while
    $=$
    <io_and_expression> !inSemanticContext !?ioVarMap ?let rightExpression
    outExpression = @C_equalExpression. new { ! outExpression ! rightExpression}
  end
}

#---------------------------------------------------------------------------*

rule <io_and_expression> 
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  <io_primary> !inSemanticContext !?ioVarMap ?outExpression
  repeat
  while
    $&$
    <io_primary> !inSemanticContext !?ioVarMap ?let rightExpression
    outExpression = @C_andExpression. new { ! outExpression !rightExpression}
  end
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  $($
  <io_bool_expression> !inSemanticContext !?ioVarMap ?outExpression
  $)$
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext unused inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  $identifier$ ?let inputVarName
  [ioVarMap searchKey!inputVarName ?let inputVarIndex]
  outExpression = @C_VariableExpression. new { !inputVarIndex}
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  $~$
  <io_primary> !inSemanticContext !?ioVarMap ?let expression
  outExpression = @C_notExpression. new { ! expression}
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext unused inSemanticContext
  ?!@M_variablesMap unused ioVarMap
  !@AC_boolExpression outExpression {
  $false$
  outExpression = @C_falseExpression. new
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext unused inSemanticContext
  ?!@M_variablesMap unused ioVarMap
  !@AC_boolExpression outExpression {
  $true$
  outExpression = @C_trueExpression. new
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  $machineIdf$ ?let machineIdentifier
  [inSemanticContext.machinesMap searchKey !machineIdentifier ?let indexOfImportedMachine ?let machineInputVariableCount ?let machineInputAndInternalVariableCount ?let machineVariablesMap ?*]
  var translationVector =@L_translationVector.emptyList{}
#--- Parse input variables
  $($
  repeat
    $identifier$ ?let inputVar
    [ioVarMap searchKey !inputVar ?let inputVarIndex]
    translationVector += !inputVarIndex
  while
    $,$
  end
  $)$
  let @uint inputVariablesCount = [translationVector length]
  if inputVariablesCount != machineInputVariableCount then
    error @location.here : "The '$" + machineIdentifier + "' machine defines " + [machineInputVariableCount string]
    + " input variable(s), but this operand defines " + [inputVariablesCount string] + " input variable(s)"
  end
#--- Parse internal variables
  $($
  select
  or
    repeat
      $identifier$ ?let internalVar
      [ioVarMap searchKey !internalVar ?let internalVarIndex]
      translationVector += ! internalVarIndex
    while
      $,$
    end
  end
  $)$
  let @uint inputAndInternalVariablesCount = [translationVector length]
  if inputAndInternalVariablesCount != machineInputAndInternalVariableCount then
    error @location.here : "The '$" + machineIdentifier.string + "' machine defines " + [machineInputAndInternalVariableCount string]
    + " input and internal variable(s), but this operand defines " + [inputAndInternalVariablesCount string] + " input and internal variable(s)"
  end
#--- Parse output variables
  $($
  repeat
    $identifier$ ?let outputVar
    [ioVarMap searchKey !outputVar ?let outputVarIndex]
    translationVector += !outputVarIndex
  while
    $,$
  end
  $)$
  let @uint allVariablesCount = [translationVector length]
  let @uint machineAllVariablesCount = [machineVariablesMap count]
  if allVariablesCount != machineAllVariablesCount then
    error @location.here : "The '$" + machineIdentifier.string + "' machine defines " + [machineAllVariablesCount string]
    + " variables, but this operand defines " + [allVariablesCount string] + " variables"
  end
  outExpression = @C_importBoolMachine. new {
    !indexOfImportedMachine
    !machineIdentifier.location
    !translationVector}
}

#---------------------------------------------------------------------------*
#         DEFINITION EXPRESSION                                             *
#---------------------------------------------------------------------------*

rule <definition_expression>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@AC_machineDefinition outDefinition {
  <definition_expression_term> !inSemanticContext !?variablesMap ?outDefinition
  repeat
  while
    $+$
    let @AC_machineDefinition leftOperand = outDefinition
    <definition_expression_term> !inSemanticContext !? variablesMap ?let rightOperand
    outDefinition = @C_orComposition. new { !leftOperand !rightOperand}
  end
}

#---------------------------------------------------------------------------*

rule <definition_expression_term>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@AC_machineDefinition outDefinition {
  <definition_expression_factor> !inSemanticContext !? variablesMap ?outDefinition
  repeat
  while
    $*$
    let @location errorLocation = @location.here
    let @AC_machineDefinition leftOperand = outDefinition
    <definition_expression_factor> !inSemanticContext !? variablesMap ?let rightOperand
    outDefinition = @C_strongModalComposition. new { !leftOperand !errorLocation !rightOperand}
  while
    $**$
    let @location errorLocation = @location.here
    let @AC_machineDefinition leftOperand = outDefinition
    <definition_expression_factor> !inSemanticContext !? variablesMap ?let rightOperand
    outDefinition = @C_weakModalComposition. new { !leftOperand !errorLocation !rightOperand}
  while
    $||$
    let @AC_machineDefinition leftOperand = outDefinition
    <definition_expression_factor> !inSemanticContext !? variablesMap ?let rightOperand
    outDefinition = @C_parallelComposition. new { !leftOperand !rightOperand}
  end
}

#---------------------------------------------------------------------------*

rule <modalcompadd_definition>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@M_modesMap outModeMap
  !@ListForModes outInclusionList {
  outModeMap = @M_modesMap. emptyMap
  outInclusionList = @ListForModes. emptyList
  repeat
    $identifier$ ?let modeName
    $:$
    <definition_expression> !inSemanticContext !?variablesMap ?let def
    [!?outModeMap insertKey !modeName ![outModeMap count] !def]
    $;$
  while
  end
  repeat
  while
    $include$
    $identifier$ ?let sourceModeName
    [outModeMap searchKey !sourceModeName ?let sourceModeIndex ?*]
    $to$
    $identifier$ ?let targetModeName
    [outModeMap searchKey !targetModeName ?let targetModeIndex ?*]
    $;$
    if sourceModeIndex == targetModeIndex then
      warning targetModeName : "unuseful include: 'modalcompadd' operator never adds transitions from terminal states to initial states of the same mode"
    else
      outInclusionList += !sourceModeIndex !targetModeIndex
    end
  end
}

#---------------------------------------------------------------------------*

rule <modalcompsub_definition>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@M_modesMap outModeMap
  !@ListForModes outExclusionList {
  outModeMap = @M_modesMap. emptyMap
  outExclusionList = @ListForModes. emptyList
  repeat
    $identifier$ ?let modeName
    $:$
    <definition_expression> !inSemanticContext !?variablesMap ?let def
    [!?outModeMap insertKey !modeName ![outModeMap count] !def]
    $;$
  while
  end
  repeat
  while
    $exclude$
    $identifier$ ?let sourceModeName
    [outModeMap searchKey !sourceModeName ?let sourceModeIndex ?*]
    $to$
    $identifier$ ?let targetModeName
    [outModeMap searchKey !targetModeName ?let targetModeIndex ?*]
    $;$
    if sourceModeIndex == targetModeIndex then
      warning targetModeName : "unuseful include: 'modalcompadd' operator never adds transitions from terminal states to initial states of the same mode"
    else
      outExclusionList += !sourceModeIndex !targetModeIndex
    end
  end
}

#---------------------------------------------------------------------------*

rule <definition_expression_factor>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@AC_machineDefinition outDefinition {
  select
    <explicit_automaton> !inSemanticContext !?variablesMap ?outDefinition
  or
    $($
    <definition_expression> !inSemanticContext !? variablesMap ?outDefinition
    $)$
  or
    var @M_variablesMap extendedVariablesMap = variablesMap
    let @uint previousVariableCount = [extendedVariablesMap count]
    $?$
    repeat
      $identifier$ ?let variableName
      [!?extendedVariablesMap insertKey !variableName ![extendedVariablesMap count]]
    while
      $,$
    end
    let @uint actualVariableCount = [extendedVariablesMap count]
    $($
    <definition_expression> !inSemanticContext !?extendedVariablesMap ?let def
    $)$
    outDefinition = @C_existsDefinition. new { !previousVariableCount !actualVariableCount !def}
  or
    var @M_variablesMap extendedVariablesMap = variablesMap
    let @uint previousVariableCount = [extendedVariablesMap count]
    $!$
    repeat
      $identifier$ ?let variableName
      [!?extendedVariablesMap insertKey !variableName ![extendedVariablesMap count]]
    while
      $,$
    end
    let @uint actualVariableCount = [extendedVariablesMap count]
    $($
    <definition_expression> !inSemanticContext !?extendedVariablesMap ?let def
    $)$
    outDefinition = @C_forallDefinition. new { !previousVariableCount !actualVariableCount !def}
  or
    $bool$
    ${$
    <io_bool_expression> !inSemanticContext !?variablesMap ?let def
    outDefinition = @C_boolToSeqExpression. new { !def}
    $}$
  or
    $@$
    <definition_expression_factor> !inSemanticContext !? variablesMap ?let def
    outDefinition = @C_fullSaturationOperation. new { !def}
  or
    $~$
    <definition_expression_factor> !inSemanticContext !? variablesMap ?let def
    outDefinition = @C_complementationOperation. new { !def}
  or
    $nofirst$
    $($
    <definition_expression> !inSemanticContext !? variablesMap ?let def
    outDefinition = @C_suppressInitialStatesOperation. new { !def}
    $)$
  or
    $nolast$
    $($
    <definition_expression> !inSemanticContext !? variablesMap ?let def
    outDefinition = @C_suppressTerminalStatesOperation. new { !def}
    $)$
  or
    $modalcompadd$
    ${$
    <modalcompadd_definition>
      !inSemanticContext
      !?variablesMap
      ?let modeMap
      ?let inclusionList
    $}$
    outDefinition = @C_additiveModalCompositionComponent. new { !modeMap !inclusionList}
  or
    $modalcompsub$
    ${$
    <modalcompsub_definition>
      !inSemanticContext
      !?variablesMap
      ?let modeMap
      ?let exclusionList
    $}$
    outDefinition = @C_substractiveModalCompositionComponent. new { !modeMap !exclusionList}
  or
    $trans$
    ${$
    <io_bool_expression> !inSemanticContext !?variablesMap ?let sourceExpression
    $to$
    <io_bool_expression> !inSemanticContext !?variablesMap ?let targetExpression
    $}$
    outDefinition = @C_trans. new { !sourceExpression !targetExpression}
  end
}

#---------------------------------------------------------------------------*

rule <definition_expression_factor>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_machineDefinition outDefinition {
  $machineIdf$ ?let machineIdentifier
  [inSemanticContext.machinesMap searchKey !machineIdentifier ?let indexOfImportedMachine ?let machineInputVariableCount ?let machineInputAndInternalVariableCount ?let machineVariablesMap ?*]
  var translationVector =@L_translationVector.emptyList{}
#--- Parse input variables
  $($
  repeat
    $identifier$ ?let inputVar
    [ioVarMap searchKey !inputVar ?let inputVarIndex]
    translationVector += !inputVarIndex
  while
    $,$
  end
  $)$
  let @uint inputVariablesCount = [translationVector length]
  if inputVariablesCount != machineInputVariableCount then
    error @location.here : "The '$" + machineIdentifier.string + "' machine defines " + [machineInputVariableCount string]
    + " input variable(s), but this operand defines " + [inputVariablesCount string] + " input variable(s)"
  end
#--- Parse internal variables
  $($
  select
  or
    repeat
      $identifier$ ?let internalVar
      [ioVarMap searchKey !internalVar ?let internalVarIndex]
      translationVector += ! internalVarIndex
    while
      $,$
    end
  end
  $)$
  let @uint inputAndInternalVariablesCount = [translationVector length]
  if inputAndInternalVariablesCount != machineInputAndInternalVariableCount then
    error @location.here : "The '$" + machineIdentifier.string + "' machine defines " + [machineInputAndInternalVariableCount string]
    + " input and internal variable(s), but this operand defines " + [inputAndInternalVariablesCount string] + " input and internal variable(s)"
  end
#--- Parse output variables
  $($
  repeat
    $identifier$ ?let outputVar
    [ioVarMap searchKey !outputVar ?let outputVarIndex]
    translationVector += !outputVarIndex
  while
    $,$
  end
  $)$
  let @uint allVariablesCount = [translationVector length]
  let @uint machineAllVariablesCount = [machineVariablesMap count]
  if allVariablesCount != machineAllVariablesCount then
    error @location.here : "The '$" + machineIdentifier.string + "' machine defines " + [machineAllVariablesCount string]
    + " variables, but this operand defines " + [allVariablesCount string] + " variables"
  end
  outDefinition = @C_importMachine. new { !indexOfImportedMachine !translationVector}
}

#---------------------------------------------------------------------------*
#         EXPLICIT AUTOMATON                                                *
#---------------------------------------------------------------------------*

rule <explicit_automaton>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@AC_machineDefinition outDefinition {
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
  $auto$
  ${$
#--- States declaration
  $state$
  repeat
    $identifier$ ?let stateName
    [!?statesMap insertKey !stateName ![statesMap count]]
  while
    $,$
  end
  $;$
#--- Initial states
  var initialStatesDefinitionList =@L_statesDefinitionList.emptyList{}
  $first$
  repeat
    $identifier$ ?let initialState
    [statesMap searchKey !initialState ?let initialStateIndex]
    initialStatesDefinitionList += !initialStateIndex !@location.here
  while
    $,$
  end
  $;$
#--- terminal states
  var terminalStatesDefinitionList =@L_statesDefinitionList.emptyList{}
  select
  or
    $last$
    repeat
      $identifier$ ?let terminalState
      [statesMap searchKey !terminalState ?let terminalStateIndex]
      terminalStatesDefinitionList += ! terminalStateIndex !@location.here
    while
      $,$
    end
    $;$
  end
#--- Parse state definitions
  var stateDefinitionMap =@M_stateMap.emptyMap{}
  repeat
  #--- Current state
    $identifier$ ?let stateName
    [statesMap searchKey !stateName ?let stateIndex]
    [!?stateDefinitionMap defineState !stateName ![stateDefinitionMap count]]
    $:$
  #--- State input expression
    <io_bool_expression> !inSemanticContext !?variablesMap ?let stateExpression
    let @location endOfStateExpression = @location.here
    ${$
  #--- Parse state transition
    var transitionsList =@L_transitionDefinition.emptyList{}
    repeat
    while
      <io_bool_expression> !inSemanticContext !?variablesMap ?let transitionInputExpression
      let @location endOfExpression = @location.here
      $goto$
      $identifier$ ?let targetStateName
      [statesMap searchKey !targetStateName ?let targetStateIndex]
      transitionsList += !transitionInputExpression !endOfExpression !targetStateIndex
      $;$
    end
    $}$
    stateDefinitionList += !stateIndex !stateExpression !endOfStateExpression
                           !transitionsList
  while
  end
#--- Check all states are defined
  for (lkey *) in  statesMap do
    if not [stateDefinitionMap hasKey !lkey.string] then
      error @location.here : "'" + lkey + "' state is not described"
    end
  end
#--- End of input source
  $}$
  outDefinition = @C_explicitAutomatonDefinition. new { !statesMap !initialStatesDefinitionList !terminalStatesDefinitionList !stateDefinitionList !@location.here}
}

#---------------------------------------------------------------------------*

}