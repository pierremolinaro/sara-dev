#---------------------------------------------------------------------------*
#                                                                           *
#   S Y N T A X                                                             *
#                                                                           *
#---------------------------------------------------------------------------*

syntax sara_parser (sara_scanner) {

#---------------------------------------------------------------------------*

rule <start_symbol> {
  var semanticContext =@semanticContext.new{
    !@L_jobList. emptyList
    !@M_machinesMap. emptyMap
  }
  repeat
    <component> !?semanticContext
  while
  end
  performComputations ( ![semanticContext componentsMap] )
}
 
#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $state$
  $display$
  @lstring machineName
  $machineIdf$ ? machineName
  $;$
#--- Insert machine into machine map
  @uint machineIndex
  [[ioSemanticContext machinesMap] searchKey !machineName ?machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  @AC_job job = @C_machineDisplayStates. new { !machineIndex}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $trans$
  $display$
  @lstring machineName
  $machineIdf$ ? machineName
  $;$
#--- Insert machine into machine map
  @uint machineIndex
  [[ioSemanticContext machinesMap] searchKey !machineName ?machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  @AC_job job = @C_machineDisplayTransitions. new { !machineIndex}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $first$
  $state$
  $display$
  @lstring machineName
  $machineIdf$ ? machineName
  $;$
#--- Insert machine into machine map
  @uint machineIndex
  [[ioSemanticContext machinesMap] searchKey !machineName ?machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  @AC_job job = @C_machineDisplayInitialStates. new { !machineIndex}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $last$
  $state$
  $display$
  @lstring machineName
  $machineIdf$ ? machineName
  $;$
#--- Insert machine into machine map
  @uint machineIndex
  [[ioSemanticContext machinesMap] searchKey !machineName ?machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  @AC_job job = @C_machineDisplayTerminalStates. new { !machineIndex}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $check$
  @lstring machineName
  $machineIdf$ ? machineName
  $;$
#--- Insert machine into machine map
  @uint machineIndex
  [[ioSemanticContext machinesMap] searchKey !machineName ?machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  @AC_job job = @C_machineCheck. new { !machineIndex !false}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $checkidentical$
  @lstring machineName1
  $machineIdf$ ? machineName1
  $,$
  @lstring machineName2
  $machineIdf$ ? machineName2
  $;$
#--- Insert machine into machine map
  @uint machineIndex1
  [[ioSemanticContext machinesMap] searchKey !machineName1 ?machineIndex1 ?* ?* ?* ?*]
#--- Insert machine into machine map
  @uint machineIndex2
  [[ioSemanticContext machinesMap] searchKey !machineName2 ?machineIndex2 ?* ?* ?* ?*]
#--- Insert into component map
  @AC_job job = @C_machineCheckIdentical. new { !machineIndex1 !machineIndex2}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  $checkbool$
  @lstring machineName
  $machineIdf$ ? machineName
  $;$
#--- Insert machine into machine map
  @uint machineIndex
  [[ioSemanticContext machinesMap] searchKey !machineName ?machineIndex ?* ?* ?* ?*]
#--- Insert into component map
  @AC_job job = @C_machineCheck. new { !machineIndex !true}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  $use_and$
  $;$
  @AC_job job = @typeUse_AND. new
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  $use_ite$
  $;$
  @AC_job job = @typeUse_ITE. new
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  $use_and_ite$
  $;$
  @AC_job job = @typeUse_AND_ITE. new
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  $and_cache$
  @luint size
  $literal_integer$ ? size
  $;$
  @AC_job job = @typeResize_AND_cache. new { !size}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*
rule <component>
  ?!@semanticContext ioSemanticContext {
  $ite_cache$
  @luint size
  $literal_integer$ ? size
  $;$
  @AC_job job = @typeResize_ITE_cache. new { !size}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  $map$
  @luint size
  $literal_integer$ ? size
  $;$
  @AC_job job = @typeResizeMap. new { !size}
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  $bdd$
  $;$
  @AC_job job = @typeDisplayBDDstats. new
  ioSemanticContext.componentsMap += !job
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
  var nameList =@stringlist.emptyList{}
#--- Machine name
  @lstring machineName
  $machineIdf$ ? machineName
  $($
#--- Parse input variables
  repeat
    @lstring inputVarName
    $identifier$ ? inputVarName
    [!?variablesMap insertKey !inputVarName ![variablesMap count]]
    nameList += !inputVarName.string
  while
    $,$
  end
  @uint inputVariablesCount = [variablesMap count]
  $)$
#--- Parse internal variables
  $($
  select
  or
    repeat
      @lstring outputVarName
      $identifier$ ? outputVarName
      [!?variablesMap insertKey !outputVarName ![variablesMap count]]
      nameList += !outputVarName.string
    while
      $,$
    end
  end
  $)$
  @uint inputAndInternalVariablesCount = [variablesMap count]
#--- Parse output variables
  $($
  repeat
    @lstring outputVarName
    $identifier$ ? outputVarName
    [!?variablesMap insertKey !outputVarName ![variablesMap count]]
    nameList += !outputVarName.string
  while
    $,$
  end
  $)$
  $:=$
#--- Machine definition
  @AC_machineDefinition definition
  <definition_expression> !ioSemanticContext !?variablesMap ?definition
#--- Insert machine into machine map
  let @uint machineIndex = [[ioSemanticContext machinesMap] count]
  [!?ioSemanticContext.machinesMap insertKey
    !machineName
    !machineIndex
    !inputVariablesCount
    !inputAndInternalVariablesCount
    !variablesMap
    !nameList
  ]
#--- Insert into component map
  @AC_job machine = @C_machineComponent. new { !machineName !machineIndex !inputVariablesCount !inputAndInternalVariablesCount !variablesMap !nameList !definition}
  ioSemanticContext.componentsMap += !machine
  $;$
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
  var nameList =@stringlist.emptyList{}
#--- Machine name
  $modalcompadd$
  @lstring machineName
  $machineIdf$ ? machineName
  $($
#--- Parse input variables
  repeat
    @lstring inputVarName
    $identifier$ ? inputVarName
    [!?variablesMap insertKey !inputVarName ![variablesMap count]]
    nameList += !inputVarName.string
  while
    $,$
  end
  @uint inputVariablesCount = [variablesMap count]
  $)$
#--- Parse internal variables
  $($
  select
  or
    repeat
      @lstring outputVarName
      $identifier$ ? outputVarName
      [!?variablesMap insertKey !outputVarName ![variablesMap count]]
      nameList += !outputVarName.string
    while
      $,$
    end
  end
  $)$
  @uint inputAndInternalVariablesCount = [variablesMap count]
#--- Parse output variables
  $($
  repeat
    @lstring outputVarName
    $identifier$ ? outputVarName
    [!?variablesMap insertKey !outputVarName ![variablesMap count]]
    nameList += !outputVarName.string
  while
    $,$
  end
  $)$
  $:=$
#--- Machine definition
  @M_modesMap modeMap
  @ListForModes inclusionList
  <modalcompadd_definition>
    !ioSemanticContext
    !?variablesMap
    ?modeMap
    ?inclusionList
#--- Insert machine into machine map
  let @uint machineIndex = [[ioSemanticContext machinesMap] count]
  [!?ioSemanticContext.machinesMap insertKey !machineName !machineIndex !inputVariablesCount !inputAndInternalVariablesCount !variablesMap !nameList]
#--- Insert into component map
  @AC_job machine = @C_machineDefinedByAdditiveModalComp. new {
   !machineName
   !machineIndex
   !inputVariablesCount
   !inputAndInternalVariablesCount
   !variablesMap
   !modeMap
   !inclusionList}
  ioSemanticContext.componentsMap += !machine
  $;$
}

#---------------------------------------------------------------------------*

rule <component>
  ?!@semanticContext ioSemanticContext {
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
  var nameList =@stringlist.emptyList{}
#--- Machine name
  $modalcompsub$
  @lstring machineName
  $machineIdf$ ? machineName
  $($
#--- Parse input variables
  repeat
    @lstring inputVarName
    $identifier$ ? inputVarName
    [!?variablesMap insertKey !inputVarName ![variablesMap count]]
    nameList += !inputVarName.string
  while
    $,$
  end
  @uint inputVariablesCount = [variablesMap count]
  $)$
#--- Parse internal variables
  $($
  select
  or
    repeat
      @lstring outputVarName
      $identifier$ ? outputVarName
      [!?variablesMap insertKey !outputVarName ![variablesMap count]]
      nameList += !outputVarName.string
    while
      $,$
    end
  end
  $)$
  @uint inputAndInternalVariablesCount = [variablesMap count]
#--- Parse output variables
  $($
  repeat
    @lstring outputVarName
    $identifier$ ? outputVarName
    [!?variablesMap insertKey !outputVarName ![variablesMap count]]
    nameList += !outputVarName.string
  while
    $,$
  end
  $)$
  $:=$
#--- Machine definition
  @M_modesMap modeMap
  @ListForModes exclusionList
  <modalcompsub_definition>
    !ioSemanticContext
    !?variablesMap
    ?modeMap
    ?exclusionList
#--- Insert machine into machine map
  let @uint machineIndex = [[ioSemanticContext machinesMap] count]
  [!?ioSemanticContext.machinesMap insertKey !machineName !machineIndex !inputVariablesCount !inputAndInternalVariablesCount !variablesMap !nameList]
#--- Insert into component map
  @AC_job machine = @C_machineDefinedBySubstractiveModalComp. new {
   !machineName
   !machineIndex
   !inputVariablesCount
   !inputAndInternalVariablesCount
   !variablesMap
   !modeMap
   !exclusionList}
  ioSemanticContext.componentsMap += !machine
  $;$
}
#---------------------------------------------------------------------------*
rule <component>
  ?!@semanticContext ioSemanticContext {
  $scenario$
  var variablesMap =@M_variablesMap.emptyMap{}
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
#--- Machine name
  @lstring machineName
  $machineIdf$ ? machineName
#--- Search machine from machine map
  @uint machineIndex
  @uint inputVariablesCountFromDefinition
  @uint inputAndInternalVariablesCountFromDefinition
  @M_variablesMap variablesMapFromDefinition
  [[ioSemanticContext machinesMap] searchKey !machineName ?machineIndex ?inputVariablesCountFromDefinition ?inputAndInternalVariablesCountFromDefinition ?variablesMapFromDefinition ?*]
#--- Parse input variables
  $($
  repeat
    @lstring inputVarName
    $identifier$ ? inputVarName
    [!?variablesMap insertKey !inputVarName ![variablesMap count]]
  while
    $,$
  end
  @uint inputVariablesCount = [variablesMap count]
  $)$
#--- Check correct number of input variables
  if inputVariablesCountFromDefinition != inputVariablesCount then
    error @location.here : "This declaration names " + [inputVariablesCount string]
      + " input variable(s), but machine definition names " + [inputVariablesCountFromDefinition string] + " input variable(s)"
  end
#--- Parse internal variables
  $($
  select
  or
    repeat
      @lstring outputVarName
      $identifier$ ? outputVarName
      [!?variablesMap insertKey !outputVarName ![variablesMap count]]
    while
      $,$
    end
  end
  $)$
#--- Check correct number of internal variables
  @uint inputAndInternalVariablesCount = [variablesMap count]
  if inputAndInternalVariablesCountFromDefinition != inputAndInternalVariablesCount then
    error @location.here : "This declaration names " + [inputAndInternalVariablesCount string]
      + " input and internal variable(s), but machine definition names " + [inputAndInternalVariablesCountFromDefinition string] + " input and internal variable(s)"
  end
#--- Parse output variables
  $($
  repeat
    @lstring outputVarName
    $identifier$ ? outputVarName
    [!?variablesMap insertKey !outputVarName ![variablesMap count]]
  while
    $,$
  end
  $)$
#--- Check correct number of internal variables
  @uint outputVariablesCount = [variablesMap count]
  @uint outputVariablesCountFromDefinition = [variablesMapFromDefinition count]
  if outputVariablesCountFromDefinition != outputVariablesCount then
    error @location.here : "This declaration names " + [outputVariablesCount string]
      + " variables, but machine definition names " + [outputVariablesCountFromDefinition string] + " variables"
  end
  ${$
  var scenarioList =@L_scenarioList.emptyList{}
  repeat
    @lstring scenarioTitle
    $literal_string$ ? scenarioTitle
    var inputScenario =@L_inputScenario.emptyList{}
    repeat
      $:$
      var inputConfigurationForScenario =@L_inputConfigurationForScenario.emptyList{}
      repeat
       @luint v
       $literal_integer$  ? v
       if [v uint] > 1 then
         error v : "this value is not a  binary digit"
       end
       inputConfigurationForScenario += !v
      while
       $,$
      end
      if inputVariablesCount != [inputConfigurationForScenario length] then
        error @location.here : "this input configuration names " + [[inputConfigurationForScenario length] string] + " input variable(s), instead of " + [inputVariablesCount string]
      end
      inputScenario += !inputConfigurationForScenario
    while
    end
    $;$
    scenarioList += !scenarioTitle !inputScenario
  while
  end
  $}$
#--- Insert job into job list
  @AC_job machine = @C_scenarioComponent. new { !machineIndex !inputVariablesCount !inputAndInternalVariablesCount !variablesMap !scenarioList}
  ioSemanticContext.componentsMap += !machine
}

#---------------------------------------------------------------------------*

rule <io_bool_expression>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  <io_and_expression> !inSemanticContext !?ioVarMap ?outExpression
  repeat
  while
    $|$
    @AC_boolExpression rightExpression
    <io_and_expression> !inSemanticContext !?ioVarMap ?rightExpression
    outExpression = @C_orExpression. new { ! outExpression ! rightExpression}
  while
    $^$
    @AC_boolExpression rightExpression
    <io_and_expression> !inSemanticContext !?ioVarMap ?rightExpression
    outExpression = @C_xorExpression. new { ! outExpression ! rightExpression}
  while
    $->$
    @AC_boolExpression rightExpression
    <io_and_expression> !inSemanticContext !?ioVarMap ?rightExpression
    outExpression = @C_impliesExpression. new { ! outExpression ! rightExpression}
  while
    $=$
    @AC_boolExpression rightExpression
    <io_and_expression> !inSemanticContext !?ioVarMap ?rightExpression
    outExpression = @C_equalExpression. new { ! outExpression ! rightExpression}
  end
}

#---------------------------------------------------------------------------*

rule <io_and_expression> 
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  <io_primary> !inSemanticContext !?ioVarMap ?outExpression
  repeat
  while
    $&$
    @AC_boolExpression rightExpression
    <io_primary> !inSemanticContext !?ioVarMap ?rightExpression
    outExpression = @C_andExpression. new { ! outExpression !rightExpression}
  end
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  $($
  <io_bool_expression> !inSemanticContext !?ioVarMap ?outExpression
  $)$
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext unused inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  @lstring inputVarName
  $identifier$ ? inputVarName
  @uint inputVarIndex
  [ioVarMap searchKey!inputVarName ?inputVarIndex]
  outExpression = @C_VariableExpression. new { !inputVarIndex}
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  $~$
  @AC_boolExpression expression
  <io_primary> !inSemanticContext !?ioVarMap ? expression
  outExpression = @C_notExpression. new { ! expression}
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext unused inSemanticContext
  ?!@M_variablesMap unused ioVarMap
  !@AC_boolExpression outExpression {
  $false$
  outExpression = @C_falseExpression. new
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext unused inSemanticContext
  ?!@M_variablesMap unused ioVarMap
  !@AC_boolExpression outExpression {
  $true$
  outExpression = @C_trueExpression. new
}

#---------------------------------------------------------------------------*

rule <io_primary> 
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_boolExpression outExpression {
  @lstring machineIdentifier
  $machineIdf$ ? machineIdentifier
  @uint machineInputVariableCount
  @uint machineInputAndInternalVariableCount
  @M_variablesMap machineVariablesMap
  @uint indexOfImportedMachine
  [[inSemanticContext machinesMap] searchKey !machineIdentifier ?indexOfImportedMachine ?machineInputVariableCount ?machineInputAndInternalVariableCount ?machineVariablesMap ?*]
  var translationVector =@L_translationVector.emptyList{}
#--- Parse input variables
  $($
  repeat
    @lstring inputVar
    $identifier$ ? inputVar
    @uint inputVarIndex
    [ioVarMap searchKey !inputVar ?inputVarIndex]
    translationVector += !inputVarIndex
  while
    $,$
  end
  $)$
  @uint inputVariablesCount = [translationVector length]
  if inputVariablesCount != machineInputVariableCount then
    error @location.here : "The '$" + machineIdentifier + "' machine defines " + [machineInputVariableCount string]
    + " input variable(s), but this operand defines " + [inputVariablesCount string] + " input variable(s)"
  end
#--- Parse internal variables
  $($
  select
  or
    repeat
      @lstring internalVar
      $identifier$ ? internalVar
      @uint internalVarIndex
      [ioVarMap searchKey !internalVar ?internalVarIndex]
      translationVector += ! internalVarIndex
    while
      $,$
    end
  end
  $)$
  @uint inputAndInternalVariablesCount = [translationVector length]
  if inputAndInternalVariablesCount != machineInputAndInternalVariableCount then
    error @location.here : "The '$" + [machineIdentifier string] + "' machine defines " + [machineInputAndInternalVariableCount string]
    + " input and internal variable(s), but this operand defines " + [inputAndInternalVariablesCount string] + " input and internal variable(s)"
  end
#--- Parse output variables
  $($
  repeat
    @lstring outputVar
    $identifier$ ? outputVar
    @uint outputVarIndex
    [ioVarMap searchKey !outputVar ?outputVarIndex]
    translationVector += !outputVarIndex
  while
    $,$
  end
  $)$
  @uint allVariablesCount = [translationVector length]
  @uint machineAllVariablesCount = [machineVariablesMap count]
  if allVariablesCount != machineAllVariablesCount then
    error @location.here : "The '$" + [machineIdentifier string] + "' machine defines " + [machineAllVariablesCount string]
    + " variables, but this operand defines " + [allVariablesCount string] + " variables"
  end
  outExpression = @C_importBoolMachine. new {
    !indexOfImportedMachine
    ![machineIdentifier location]
    !translationVector}
}

#---------------------------------------------------------------------------*
#         DEFINITION EXPRESSION                                             *
#---------------------------------------------------------------------------*

rule <definition_expression>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@AC_machineDefinition outDefinition {
  <definition_expression_term> !inSemanticContext !?variablesMap ?outDefinition
  repeat
  while
    $+$
    @AC_machineDefinition leftOperand = outDefinition
    @AC_machineDefinition rightOperand
    <definition_expression_term> !inSemanticContext !? variablesMap ?rightOperand
    outDefinition = @C_orComposition. new { !leftOperand !rightOperand}
  end
}

#---------------------------------------------------------------------------*

rule <definition_expression_term>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@AC_machineDefinition outDefinition {
  <definition_expression_factor> !inSemanticContext !? variablesMap ?outDefinition
  repeat
  while
    $*$
    @location errorLocation = @location.here
    @AC_machineDefinition leftOperand = outDefinition
    @AC_machineDefinition rightOperand
    <definition_expression_factor> !inSemanticContext !? variablesMap ?rightOperand
    outDefinition = @C_strongModalComposition. new { !leftOperand !errorLocation !rightOperand}
  while
    $**$
    @location errorLocation = @location.here
    @AC_machineDefinition leftOperand = outDefinition
    @AC_machineDefinition rightOperand
    <definition_expression_factor> !inSemanticContext !? variablesMap ?rightOperand
    outDefinition = @C_weakModalComposition. new { !leftOperand !errorLocation !rightOperand}
  while
    $||$
    @AC_machineDefinition leftOperand = outDefinition
    @AC_machineDefinition rightOperand
    <definition_expression_factor> !inSemanticContext !? variablesMap ?rightOperand
    outDefinition = @C_parallelComposition. new { !leftOperand !rightOperand}
  end
}

#---------------------------------------------------------------------------*

rule <modalcompadd_definition>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@M_modesMap outModeMap
  !@ListForModes outInclusionList {
  outModeMap = @M_modesMap. emptyMap
  outInclusionList = @ListForModes. emptyList
  repeat
    @lstring modeName
    $identifier$ ? modeName
    $:$
    @AC_machineDefinition def
    <definition_expression> !inSemanticContext !?variablesMap ?def
    [!?outModeMap insertKey !modeName ![outModeMap count] !def]
    $;$
  while
  end
  repeat
  while
    $include$
    @lstring sourceModeName
    $identifier$ ? sourceModeName
    @uint sourceModeIndex
    [outModeMap searchKey !sourceModeName ?sourceModeIndex ?*]
    $to$
    @lstring targetModeName
    $identifier$ ? targetModeName
    @uint targetModeIndex
    [outModeMap searchKey !targetModeName ?targetModeIndex ?*]
    $;$
    if sourceModeIndex == targetModeIndex then
      warning targetModeName : "unuseful include: 'modalcompadd' operator never adds transitions from terminal states to initial states of the same mode"
    else
      outInclusionList += !sourceModeIndex !targetModeIndex
    end
  end
}

#---------------------------------------------------------------------------*

rule <modalcompsub_definition>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@M_modesMap outModeMap
  !@ListForModes outExclusionList {
  outModeMap = @M_modesMap. emptyMap
  outExclusionList = @ListForModes. emptyList
  repeat
    @lstring modeName
    $identifier$ ? modeName
    $:$
    @AC_machineDefinition def
    <definition_expression> !inSemanticContext !?variablesMap ?def
    [!?outModeMap insertKey !modeName ![outModeMap count] !def]
    $;$
  while
  end
  repeat
  while
    $exclude$
    @lstring sourceModeName
    $identifier$ ? sourceModeName
    @uint sourceModeIndex
    [outModeMap searchKey !sourceModeName ?sourceModeIndex ?*]
    $to$
    @lstring targetModeName
    $identifier$ ? targetModeName
    @uint targetModeIndex
    [outModeMap searchKey !targetModeName ?targetModeIndex ?*]
    $;$
    if sourceModeIndex == targetModeIndex then
      warning targetModeName : "unuseful include: 'modalcompadd' operator never adds transitions from terminal states to initial states of the same mode"
    else
      outExclusionList += !sourceModeIndex !targetModeIndex
    end
  end
}

#---------------------------------------------------------------------------*

rule <definition_expression_factor>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@AC_machineDefinition outDefinition {
  select
    <explicit_automaton> !inSemanticContext !?variablesMap ?outDefinition
  or
    $($
    <definition_expression> !inSemanticContext !? variablesMap ?outDefinition
    $)$
  or
    @M_variablesMap extendedVariablesMap = variablesMap
    @uint previousVariableCount = [extendedVariablesMap count]
    $?$
    repeat
      @lstring variableName
      $identifier$ ? variableName
      [!?extendedVariablesMap insertKey !variableName ![extendedVariablesMap count]]
    while
      $,$
    end
    @uint actualVariableCount = [extendedVariablesMap count]
    $($
    @AC_machineDefinition def
    <definition_expression> !inSemanticContext !?extendedVariablesMap ?def
    $)$
    outDefinition = @C_existsDefinition. new { !previousVariableCount !actualVariableCount !def}
  or
    @M_variablesMap extendedVariablesMap = variablesMap
    @uint previousVariableCount = [extendedVariablesMap count]
    $!$
    repeat
      @lstring variableName
      $identifier$ ? variableName
      [!?extendedVariablesMap insertKey !variableName ![extendedVariablesMap count]]
    while
      $,$
    end
    @uint actualVariableCount = [extendedVariablesMap count]
    $($
    @AC_machineDefinition def
    <definition_expression> !inSemanticContext !?extendedVariablesMap ?def
    $)$
    outDefinition = @C_forallDefinition. new { !previousVariableCount !actualVariableCount !def}
  or
    $bool$
    ${$
    @AC_boolExpression def
    <io_bool_expression> !inSemanticContext !?variablesMap ?def
    outDefinition = @C_boolToSeqExpression. new { !def}
    $}$
  or
    $@$
    @AC_machineDefinition def
    <definition_expression_factor> !inSemanticContext !? variablesMap ?def
    outDefinition = @C_fullSaturationOperation. new { !def}
  or
    $~$
    @AC_machineDefinition def
    <definition_expression_factor> !inSemanticContext !? variablesMap ?def
    outDefinition = @C_complementationOperation. new { !def}
  or
    $nofirst$
    $($
    @AC_machineDefinition def
    <definition_expression> !inSemanticContext !? variablesMap ?def
    outDefinition = @C_suppressInitialStatesOperation. new { !def}
    $)$
  or
    $nolast$
    $($
    @AC_machineDefinition def
    <definition_expression> !inSemanticContext !? variablesMap ?def
    outDefinition = @C_suppressTerminalStatesOperation. new { !def}
    $)$
  or
    $modalcompadd$
    ${$
    @M_modesMap modeMap
    @ListForModes inclusionList
    <modalcompadd_definition>
      !inSemanticContext
      !?variablesMap
      ?modeMap
      ?inclusionList
    $}$
    outDefinition = @C_additiveModalCompositionComponent. new { !modeMap !inclusionList}
  or
    $modalcompsub$
    ${$
    @M_modesMap modeMap
    @ListForModes exclusionList
    <modalcompsub_definition>
      !inSemanticContext
      !?variablesMap
      ?modeMap
      ?exclusionList
    $}$
    outDefinition = @C_substractiveModalCompositionComponent. new { !modeMap !exclusionList}
  or
    $trans$
    ${$
    @AC_boolExpression sourceExpression
    <io_bool_expression> !inSemanticContext !?variablesMap ?sourceExpression
    $to$
    @AC_boolExpression targetExpression
    <io_bool_expression> !inSemanticContext !?variablesMap ?targetExpression
    $}$
    outDefinition = @C_trans. new { !sourceExpression !targetExpression}
  end
}

#---------------------------------------------------------------------------*

rule <definition_expression_factor>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap ioVarMap
  !@AC_machineDefinition outDefinition {
  @lstring machineIdentifier
  $machineIdf$ ? machineIdentifier
  @uint machineInputVariableCount
  @uint machineInputAndInternalVariableCount
  @M_variablesMap machineVariablesMap
  @uint indexOfImportedMachine
  [[inSemanticContext machinesMap] searchKey !machineIdentifier ?indexOfImportedMachine ?machineInputVariableCount ?machineInputAndInternalVariableCount ?machineVariablesMap ?*]
  var translationVector =@L_translationVector.emptyList{}
#--- Parse input variables
  $($
  repeat
    @lstring inputVar
    $identifier$ ? inputVar
    @uint inputVarIndex
    [ioVarMap searchKey !inputVar ?inputVarIndex]
    translationVector += !inputVarIndex
  while
    $,$
  end
  $)$
  @uint inputVariablesCount = [translationVector length]
  if inputVariablesCount != machineInputVariableCount then
    error @location.here : "The '$" + [machineIdentifier string] + "' machine defines " + [machineInputVariableCount string]
    + " input variable(s), but this operand defines " + [inputVariablesCount string] + " input variable(s)"
  end
#--- Parse internal variables
  $($
  select
  or
    repeat
      @lstring internalVar
      $identifier$ ? internalVar
      @uint internalVarIndex
      [ioVarMap searchKey !internalVar ?internalVarIndex]
      translationVector += ! internalVarIndex
    while
      $,$
    end
  end
  $)$
  @uint inputAndInternalVariablesCount = [translationVector length]
  if inputAndInternalVariablesCount != machineInputAndInternalVariableCount then
    error @location.here : "The '$" + [machineIdentifier string] + "' machine defines " + [machineInputAndInternalVariableCount string]
    + " input and internal variable(s), but this operand defines " + [inputAndInternalVariablesCount string] + " input and internal variable(s)"
  end
#--- Parse output variables
  $($
  repeat
    @lstring outputVar
    $identifier$ ? outputVar
    @uint outputVarIndex
    [ioVarMap searchKey !outputVar ?outputVarIndex]
    translationVector += !outputVarIndex
  while
    $,$
  end
  $)$
  @uint allVariablesCount = [translationVector length]
  @uint machineAllVariablesCount = [machineVariablesMap count]
  if allVariablesCount != machineAllVariablesCount then
    error @location.here : "The '$" + [machineIdentifier string] + "' machine defines " + [machineAllVariablesCount string]
    + " variables, but this operand defines " + [allVariablesCount string] + " variables"
  end
  outDefinition = @C_importMachine. new { !indexOfImportedMachine !translationVector}
}

#---------------------------------------------------------------------------*
#         EXPLICIT AUTOMATON                                                *
#---------------------------------------------------------------------------*

rule <explicit_automaton>
  ?let @semanticContext inSemanticContext
  ?!@M_variablesMap variablesMap
  !@AC_machineDefinition outDefinition {
  var statesMap =@M_stateMap.emptyMap{}
  var stateDefinitionList =@L_stateDefinition.emptyList{}
  $auto$
  ${$
#--- States declaration
  $state$
  repeat
    @lstring stateName
    $identifier$ ? stateName
    [!?statesMap insertKey !stateName ![statesMap count]]
  while
    $,$
  end
  $;$
#--- Initial states
  var initialStatesDefinitionList =@L_statesDefinitionList.emptyList{}
  $first$
  repeat
    @lstring initialState
    $identifier$ ? initialState
    @uint initialStateIndex
    [statesMap searchKey !initialState ?initialStateIndex]
    initialStatesDefinitionList += !initialStateIndex !@location.here
  while
    $,$
  end
  $;$
#--- terminal states
  var terminalStatesDefinitionList =@L_statesDefinitionList.emptyList{}
  select
  or
    $last$
    repeat
      @lstring terminalState
      $identifier$ ? terminalState
      @uint terminalStateIndex
      [statesMap searchKey !terminalState ?terminalStateIndex]
      terminalStatesDefinitionList += ! terminalStateIndex !@location.here
    while
      $,$
    end
    $;$
  end
#--- Parse state definitions
  var stateDefinitionMap =@M_stateMap.emptyMap{}
  repeat
  #--- Current state
    @lstring stateName
    $identifier$ ? stateName
    @uint stateIndex
    [statesMap searchKey !stateName ?stateIndex]
    [!?stateDefinitionMap defineState !stateName ![stateDefinitionMap count]]
    $:$
  #--- State input expression
    @AC_boolExpression stateExpression
    <io_bool_expression> !inSemanticContext !?variablesMap ?stateExpression
    @location endOfStateExpression = @location.here
    ${$
  #--- Parse state transition
    var transitionsList =@L_transitionDefinition.emptyList{}
    repeat
    while
      @AC_boolExpression transitionInputExpression
      <io_bool_expression> !inSemanticContext !?variablesMap ?transitionInputExpression
      @location endOfExpression = @location.here
      $goto$
      @lstring targetStateName
      $identifier$ ? targetStateName
      @uint targetStateIndex
      [statesMap searchKey !targetStateName ?targetStateIndex]
      transitionsList += !transitionInputExpression !endOfExpression !targetStateIndex
      $;$
    end
    $}$
    stateDefinitionList += !stateIndex !stateExpression !endOfStateExpression
                           !transitionsList
  while
  end
#--- Check all states are defined
  for () in  statesMap do
    if not [stateDefinitionMap hasKey ![lkey string]] then
      error @location.here : "'" + lkey + "' state is not described"
    end
  end
#--- End of input source
  $}$
  outDefinition = @C_explicitAutomatonDefinition. new { !statesMap !initialStatesDefinitionList !terminalStatesDefinitionList !stateDefinitionList !@location.here}
}

#---------------------------------------------------------------------------*

}