#---------------------------------------------------------------------------*
#                                                                           *
#   L E X I Q U E                                                           *
#                                                                           *
#---------------------------------------------------------------------------*
lexique sara_scanner {
@string identifierString
@uint ulongValue
style identifier -> "Identifiers"
style keyWords -> "Key words"
style machineNameStyle -> "Machine names"
style delimitors -> "Delimitors"
style integerStyle -> "Integer constants"
style stringStyle -> "Character strings"
style commentStyle -> "Comments"
# -------------------------- identifier or key word --------------------
# keywords can be written in lower
# for identifiers, case is significant

$identifier$ ! identifierString  style identifier %errorMessage "an identifier"
list keyWordList style keyWords %errorMessage "the '%K' key word"{
 "auto", "state", "first", "last", "goto", "true", "false",
 "nofirst", "nolast", "modalcompadd", "exclude", "modalcompsub", "include",
 "to", "scenario", "trans", "display",
# "ite_cache", "and_cache", "use_and", "use_ite", "use_and_ite", 
 "bdd", "bool", "map",
 "check", "checkbool", "checkidentical" }

rule 'a'->'z' | 'A'->'Z' {
  repeat
    enterCharacterIntoString ( !?identifierString !* )
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end
  send %codeFor identifierString in keyWordList default $identifier$
}
# -------------------------- Delimitors -------------------------------

list delimitorsList style delimitors %errorMessage "the '%K' delimitor"{
  ",", ";", ":", "{", "}", "->", "&", "~", "?", "!", "|", "||", "+", "(", ")", ":=", "^", "=", "*", "@", "**" }
rule list delimitorsList
# -------------------- Characters string --------------------------------------

$literal_string$ ! identifierString  style stringStyle %nonAtomicSelection %errorMessage "a character string constant \"...\""

%errorMessage incorrectStringEnd : "string does not end with '\"'"
%errorMessage incorrectCharInString : "this character cannot appear within a string"
rule '"' {
  repeat
  while '\\' :
    select
    case 'n' :
      enterCharacterIntoString ( !?identifierString !'\n' )
    case '\\' :
      enterCharacterIntoString ( !?identifierString !'\\' )
    case '"' :
      enterCharacterIntoString ( !?identifierString !'"' )
    default
      error incorrectCharInString
    end
   while ' ' | '!' | '#'-> '\u007E' :
    enterCharacterIntoString ( !?identifierString !* )
  end
  select
  case '"' :
    send $literal_string$
  default
    error incorrectStringEnd
  end
}
# -------------------------- Machine name -----------------------------
$machineIdf$ ! identifierString  style machineNameStyle %errorMessage "a machine name ($...)"
%errorMessage incorrectMachineNameBeginning : "incorrect machine name beginning"
rule '$' {
  select
  case 'a'->'z' | 'A'->'Z' | '_' :
    repeat
      enterCharacterIntoString ( !?identifierString !* )
    while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
    end
  default
    error incorrectMachineNameBeginning
  end
  send $machineIdf$ 
}
#------------------------------- Decimal positive number ------------------
$literal_integer$ ! ulongValue  style integerStyle %errorMessage "a decimal number"
%errorMessage decimalNumberTooLarge : "decimal number too large"

%errorMessage internalError : "internal error"

rule '0'->'9' {
  enterDigitIntoUInt ( !* !?ulongValue error decimalNumberTooLarge, internalError )
  repeat
  while '0'->'9' :
    enterDigitIntoUInt ( !* !?ulongValue error decimalNumberTooLarge, internalError )
  while '_' :
  end
  send $literal_integer$
}
#--- separators
  rule '\u0001' -> ' ' {
  }
#------------------------------------ Comment ----------------------------
%errorMessage incorrectEndOfComment : "incorrect end of comment"
$comment$  style commentStyle %nonAtomicSelection %errorMessage "a comment"

rule '#' {
  repeat
  while '\u0001' ->'\t' | '\v'-> '\uFFFD' :
  end
  select
  case '\n' :
  default
    error incorrectEndOfComment
  end
  drop $comment$
}
}

#---------------------------------------------------------------------------*
